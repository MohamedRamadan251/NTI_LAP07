
NTI_LAP07.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000154  00800060  000031f0  00003264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002730  00000000  00000000  000033b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000f1c  00000000  00000000  00005ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  00006a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001d3  00000000  00000000  00006b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000200f  00000000  00000000  00006d57  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001170  00000000  00000000  00008d66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001001  00000000  00000000  00009ed6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  0000aed8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c1  00000000  00000000  0000b078  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ae  00000000  00000000  0000b339  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000bbe7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ef       	ldi	r30, 0xF0	; 240
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3b       	cpi	r26, 0xB4	; 180
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <main>
      7a:	0c 94 f6 18 	jmp	0x31ec	; 0x31ec <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 7b 18 	jmp	0x30f6	; 0x30f6 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ab e9       	ldi	r26, 0x9B	; 155
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 97 18 	jmp	0x312e	; 0x312e <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 87 18 	jmp	0x310e	; 0x310e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 a3 18 	jmp	0x3146	; 0x3146 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 87 18 	jmp	0x310e	; 0x310e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 a3 18 	jmp	0x3146	; 0x3146 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 7b 18 	jmp	0x30f6	; 0x30f6 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8b e9       	ldi	r24, 0x9B	; 155
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 97 18 	jmp	0x312e	; 0x312e <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 87 18 	jmp	0x310e	; 0x310e <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 a3 18 	jmp	0x3146	; 0x3146 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 87 18 	jmp	0x310e	; 0x310e <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 a3 18 	jmp	0x3146	; 0x3146 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 87 18 	jmp	0x310e	; 0x310e <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 a3 18 	jmp	0x3146	; 0x3146 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 8b 18 	jmp	0x3116	; 0x3116 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 a7 18 	jmp	0x314e	; 0x314e <__epilogue_restores__+0x20>

000007ea <__floatunsisf>:
     7ea:	a8 e0       	ldi	r26, 0x08	; 8
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 83 18 	jmp	0x3106	; 0x3106 <__prologue_saves__+0x10>
     7f6:	7b 01       	movw	r14, r22
     7f8:	8c 01       	movw	r16, r24
     7fa:	61 15       	cp	r22, r1
     7fc:	71 05       	cpc	r23, r1
     7fe:	81 05       	cpc	r24, r1
     800:	91 05       	cpc	r25, r1
     802:	19 f4       	brne	.+6      	; 0x80a <__floatunsisf+0x20>
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	89 83       	std	Y+1, r24	; 0x01
     808:	60 c0       	rjmp	.+192    	; 0x8ca <__stack+0x6b>
     80a:	83 e0       	ldi	r24, 0x03	; 3
     80c:	89 83       	std	Y+1, r24	; 0x01
     80e:	8e e1       	ldi	r24, 0x1E	; 30
     810:	c8 2e       	mov	r12, r24
     812:	d1 2c       	mov	r13, r1
     814:	dc 82       	std	Y+4, r13	; 0x04
     816:	cb 82       	std	Y+3, r12	; 0x03
     818:	ed 82       	std	Y+5, r14	; 0x05
     81a:	fe 82       	std	Y+6, r15	; 0x06
     81c:	0f 83       	std	Y+7, r16	; 0x07
     81e:	18 87       	std	Y+8, r17	; 0x08
     820:	c8 01       	movw	r24, r16
     822:	b7 01       	movw	r22, r14
     824:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__clzsi2>
     828:	fc 01       	movw	r30, r24
     82a:	31 97       	sbiw	r30, 0x01	; 1
     82c:	f7 ff       	sbrs	r31, 7
     82e:	3b c0       	rjmp	.+118    	; 0x8a6 <__stack+0x47>
     830:	22 27       	eor	r18, r18
     832:	33 27       	eor	r19, r19
     834:	2e 1b       	sub	r18, r30
     836:	3f 0b       	sbc	r19, r31
     838:	57 01       	movw	r10, r14
     83a:	68 01       	movw	r12, r16
     83c:	02 2e       	mov	r0, r18
     83e:	04 c0       	rjmp	.+8      	; 0x848 <__floatunsisf+0x5e>
     840:	d6 94       	lsr	r13
     842:	c7 94       	ror	r12
     844:	b7 94       	ror	r11
     846:	a7 94       	ror	r10
     848:	0a 94       	dec	r0
     84a:	d2 f7       	brpl	.-12     	; 0x840 <__floatunsisf+0x56>
     84c:	40 e0       	ldi	r20, 0x00	; 0
     84e:	50 e0       	ldi	r21, 0x00	; 0
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	a0 e0       	ldi	r26, 0x00	; 0
     85a:	b0 e0       	ldi	r27, 0x00	; 0
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
     85e:	88 0f       	add	r24, r24
     860:	99 1f       	adc	r25, r25
     862:	aa 1f       	adc	r26, r26
     864:	bb 1f       	adc	r27, r27
     866:	2a 95       	dec	r18
     868:	d2 f7       	brpl	.-12     	; 0x85e <__floatunsisf+0x74>
     86a:	01 97       	sbiw	r24, 0x01	; 1
     86c:	a1 09       	sbc	r26, r1
     86e:	b1 09       	sbc	r27, r1
     870:	8e 21       	and	r24, r14
     872:	9f 21       	and	r25, r15
     874:	a0 23       	and	r26, r16
     876:	b1 23       	and	r27, r17
     878:	00 97       	sbiw	r24, 0x00	; 0
     87a:	a1 05       	cpc	r26, r1
     87c:	b1 05       	cpc	r27, r1
     87e:	21 f0       	breq	.+8      	; 0x888 <__stack+0x29>
     880:	41 e0       	ldi	r20, 0x01	; 1
     882:	50 e0       	ldi	r21, 0x00	; 0
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	4a 29       	or	r20, r10
     88a:	5b 29       	or	r21, r11
     88c:	6c 29       	or	r22, r12
     88e:	7d 29       	or	r23, r13
     890:	4d 83       	std	Y+5, r20	; 0x05
     892:	5e 83       	std	Y+6, r21	; 0x06
     894:	6f 83       	std	Y+7, r22	; 0x07
     896:	78 87       	std	Y+8, r23	; 0x08
     898:	8e e1       	ldi	r24, 0x1E	; 30
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	8e 1b       	sub	r24, r30
     89e:	9f 0b       	sbc	r25, r31
     8a0:	9c 83       	std	Y+4, r25	; 0x04
     8a2:	8b 83       	std	Y+3, r24	; 0x03
     8a4:	12 c0       	rjmp	.+36     	; 0x8ca <__stack+0x6b>
     8a6:	30 97       	sbiw	r30, 0x00	; 0
     8a8:	81 f0       	breq	.+32     	; 0x8ca <__stack+0x6b>
     8aa:	0e 2e       	mov	r0, r30
     8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <__stack+0x57>
     8ae:	ee 0c       	add	r14, r14
     8b0:	ff 1c       	adc	r15, r15
     8b2:	00 1f       	adc	r16, r16
     8b4:	11 1f       	adc	r17, r17
     8b6:	0a 94       	dec	r0
     8b8:	d2 f7       	brpl	.-12     	; 0x8ae <__stack+0x4f>
     8ba:	ed 82       	std	Y+5, r14	; 0x05
     8bc:	fe 82       	std	Y+6, r15	; 0x06
     8be:	0f 83       	std	Y+7, r16	; 0x07
     8c0:	18 87       	std	Y+8, r17	; 0x08
     8c2:	ce 1a       	sub	r12, r30
     8c4:	df 0a       	sbc	r13, r31
     8c6:	dc 82       	std	Y+4, r13	; 0x04
     8c8:	cb 82       	std	Y+3, r12	; 0x03
     8ca:	1a 82       	std	Y+2, r1	; 0x02
     8cc:	ce 01       	movw	r24, r28
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     8d4:	28 96       	adiw	r28, 0x08	; 8
     8d6:	ea e0       	ldi	r30, 0x0A	; 10
     8d8:	0c 94 9f 18 	jmp	0x313e	; 0x313e <__epilogue_restores__+0x10>

000008dc <__clzsi2>:
     8dc:	ef 92       	push	r14
     8de:	ff 92       	push	r15
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	7b 01       	movw	r14, r22
     8e6:	8c 01       	movw	r16, r24
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	e8 16       	cp	r14, r24
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	f8 06       	cpc	r15, r24
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	08 07       	cpc	r16, r24
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	18 07       	cpc	r17, r24
     8f8:	88 f4       	brcc	.+34     	; 0x91c <__clzsi2+0x40>
     8fa:	8f ef       	ldi	r24, 0xFF	; 255
     8fc:	e8 16       	cp	r14, r24
     8fe:	f1 04       	cpc	r15, r1
     900:	01 05       	cpc	r16, r1
     902:	11 05       	cpc	r17, r1
     904:	31 f0       	breq	.+12     	; 0x912 <__clzsi2+0x36>
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x36>
     908:	88 e0       	ldi	r24, 0x08	; 8
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	17 c0       	rjmp	.+46     	; 0x940 <__clzsi2+0x64>
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	12 c0       	rjmp	.+36     	; 0x940 <__clzsi2+0x64>
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	e8 16       	cp	r14, r24
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	f8 06       	cpc	r15, r24
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	08 07       	cpc	r16, r24
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	18 07       	cpc	r17, r24
     92c:	28 f0       	brcs	.+10     	; 0x938 <__clzsi2+0x5c>
     92e:	88 e1       	ldi	r24, 0x18	; 24
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	04 c0       	rjmp	.+8      	; 0x940 <__clzsi2+0x64>
     938:	80 e1       	ldi	r24, 0x10	; 16
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a0 e0       	ldi	r26, 0x00	; 0
     93e:	b0 e0       	ldi	r27, 0x00	; 0
     940:	20 e2       	ldi	r18, 0x20	; 32
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e0       	ldi	r20, 0x00	; 0
     946:	50 e0       	ldi	r21, 0x00	; 0
     948:	28 1b       	sub	r18, r24
     94a:	39 0b       	sbc	r19, r25
     94c:	4a 0b       	sbc	r20, r26
     94e:	5b 0b       	sbc	r21, r27
     950:	04 c0       	rjmp	.+8      	; 0x95a <__clzsi2+0x7e>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	8a 95       	dec	r24
     95c:	d2 f7       	brpl	.-12     	; 0x952 <__clzsi2+0x76>
     95e:	f7 01       	movw	r30, r14
     960:	ed 55       	subi	r30, 0x5D	; 93
     962:	ff 4f       	sbci	r31, 0xFF	; 255
     964:	80 81       	ld	r24, Z
     966:	28 1b       	sub	r18, r24
     968:	31 09       	sbc	r19, r1
     96a:	41 09       	sbc	r20, r1
     96c:	51 09       	sbc	r21, r1
     96e:	c9 01       	movw	r24, r18
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16
     974:	ff 90       	pop	r15
     976:	ef 90       	pop	r14
     978:	08 95       	ret

0000097a <__pack_f>:
     97a:	df 92       	push	r13
     97c:	ef 92       	push	r14
     97e:	ff 92       	push	r15
     980:	0f 93       	push	r16
     982:	1f 93       	push	r17
     984:	fc 01       	movw	r30, r24
     986:	e4 80       	ldd	r14, Z+4	; 0x04
     988:	f5 80       	ldd	r15, Z+5	; 0x05
     98a:	06 81       	ldd	r16, Z+6	; 0x06
     98c:	17 81       	ldd	r17, Z+7	; 0x07
     98e:	d1 80       	ldd	r13, Z+1	; 0x01
     990:	80 81       	ld	r24, Z
     992:	82 30       	cpi	r24, 0x02	; 2
     994:	48 f4       	brcc	.+18     	; 0x9a8 <__pack_f+0x2e>
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	a0 e1       	ldi	r26, 0x10	; 16
     99c:	b0 e0       	ldi	r27, 0x00	; 0
     99e:	e8 2a       	or	r14, r24
     9a0:	f9 2a       	or	r15, r25
     9a2:	0a 2b       	or	r16, r26
     9a4:	1b 2b       	or	r17, r27
     9a6:	a5 c0       	rjmp	.+330    	; 0xaf2 <__pack_f+0x178>
     9a8:	84 30       	cpi	r24, 0x04	; 4
     9aa:	09 f4       	brne	.+2      	; 0x9ae <__pack_f+0x34>
     9ac:	9f c0       	rjmp	.+318    	; 0xaec <__pack_f+0x172>
     9ae:	82 30       	cpi	r24, 0x02	; 2
     9b0:	21 f4       	brne	.+8      	; 0x9ba <__pack_f+0x40>
     9b2:	ee 24       	eor	r14, r14
     9b4:	ff 24       	eor	r15, r15
     9b6:	87 01       	movw	r16, r14
     9b8:	05 c0       	rjmp	.+10     	; 0x9c4 <__pack_f+0x4a>
     9ba:	e1 14       	cp	r14, r1
     9bc:	f1 04       	cpc	r15, r1
     9be:	01 05       	cpc	r16, r1
     9c0:	11 05       	cpc	r17, r1
     9c2:	19 f4       	brne	.+6      	; 0x9ca <__pack_f+0x50>
     9c4:	e0 e0       	ldi	r30, 0x00	; 0
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	96 c0       	rjmp	.+300    	; 0xaf6 <__pack_f+0x17c>
     9ca:	62 81       	ldd	r22, Z+2	; 0x02
     9cc:	73 81       	ldd	r23, Z+3	; 0x03
     9ce:	9f ef       	ldi	r25, 0xFF	; 255
     9d0:	62 38       	cpi	r22, 0x82	; 130
     9d2:	79 07       	cpc	r23, r25
     9d4:	0c f0       	brlt	.+2      	; 0x9d8 <__pack_f+0x5e>
     9d6:	5b c0       	rjmp	.+182    	; 0xa8e <__pack_f+0x114>
     9d8:	22 e8       	ldi	r18, 0x82	; 130
     9da:	3f ef       	ldi	r19, 0xFF	; 255
     9dc:	26 1b       	sub	r18, r22
     9de:	37 0b       	sbc	r19, r23
     9e0:	2a 31       	cpi	r18, 0x1A	; 26
     9e2:	31 05       	cpc	r19, r1
     9e4:	2c f0       	brlt	.+10     	; 0x9f0 <__pack_f+0x76>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	2a c0       	rjmp	.+84     	; 0xa44 <__pack_f+0xca>
     9f0:	b8 01       	movw	r22, r16
     9f2:	a7 01       	movw	r20, r14
     9f4:	02 2e       	mov	r0, r18
     9f6:	04 c0       	rjmp	.+8      	; 0xa00 <__pack_f+0x86>
     9f8:	76 95       	lsr	r23
     9fa:	67 95       	ror	r22
     9fc:	57 95       	ror	r21
     9fe:	47 95       	ror	r20
     a00:	0a 94       	dec	r0
     a02:	d2 f7       	brpl	.-12     	; 0x9f8 <__pack_f+0x7e>
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	04 c0       	rjmp	.+8      	; 0xa16 <__pack_f+0x9c>
     a0e:	88 0f       	add	r24, r24
     a10:	99 1f       	adc	r25, r25
     a12:	aa 1f       	adc	r26, r26
     a14:	bb 1f       	adc	r27, r27
     a16:	2a 95       	dec	r18
     a18:	d2 f7       	brpl	.-12     	; 0xa0e <__pack_f+0x94>
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	a1 09       	sbc	r26, r1
     a1e:	b1 09       	sbc	r27, r1
     a20:	8e 21       	and	r24, r14
     a22:	9f 21       	and	r25, r15
     a24:	a0 23       	and	r26, r16
     a26:	b1 23       	and	r27, r17
     a28:	00 97       	sbiw	r24, 0x00	; 0
     a2a:	a1 05       	cpc	r26, r1
     a2c:	b1 05       	cpc	r27, r1
     a2e:	21 f0       	breq	.+8      	; 0xa38 <__pack_f+0xbe>
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	9a 01       	movw	r18, r20
     a3a:	ab 01       	movw	r20, r22
     a3c:	28 2b       	or	r18, r24
     a3e:	39 2b       	or	r19, r25
     a40:	4a 2b       	or	r20, r26
     a42:	5b 2b       	or	r21, r27
     a44:	da 01       	movw	r26, r20
     a46:	c9 01       	movw	r24, r18
     a48:	8f 77       	andi	r24, 0x7F	; 127
     a4a:	90 70       	andi	r25, 0x00	; 0
     a4c:	a0 70       	andi	r26, 0x00	; 0
     a4e:	b0 70       	andi	r27, 0x00	; 0
     a50:	80 34       	cpi	r24, 0x40	; 64
     a52:	91 05       	cpc	r25, r1
     a54:	a1 05       	cpc	r26, r1
     a56:	b1 05       	cpc	r27, r1
     a58:	39 f4       	brne	.+14     	; 0xa68 <__pack_f+0xee>
     a5a:	27 ff       	sbrs	r18, 7
     a5c:	09 c0       	rjmp	.+18     	; 0xa70 <__pack_f+0xf6>
     a5e:	20 5c       	subi	r18, 0xC0	; 192
     a60:	3f 4f       	sbci	r19, 0xFF	; 255
     a62:	4f 4f       	sbci	r20, 0xFF	; 255
     a64:	5f 4f       	sbci	r21, 0xFF	; 255
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <__pack_f+0xf6>
     a68:	21 5c       	subi	r18, 0xC1	; 193
     a6a:	3f 4f       	sbci	r19, 0xFF	; 255
     a6c:	4f 4f       	sbci	r20, 0xFF	; 255
     a6e:	5f 4f       	sbci	r21, 0xFF	; 255
     a70:	e0 e0       	ldi	r30, 0x00	; 0
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	20 30       	cpi	r18, 0x00	; 0
     a76:	a0 e0       	ldi	r26, 0x00	; 0
     a78:	3a 07       	cpc	r19, r26
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	4a 07       	cpc	r20, r26
     a7e:	a0 e4       	ldi	r26, 0x40	; 64
     a80:	5a 07       	cpc	r21, r26
     a82:	10 f0       	brcs	.+4      	; 0xa88 <__pack_f+0x10e>
     a84:	e1 e0       	ldi	r30, 0x01	; 1
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	79 01       	movw	r14, r18
     a8a:	8a 01       	movw	r16, r20
     a8c:	27 c0       	rjmp	.+78     	; 0xadc <__pack_f+0x162>
     a8e:	60 38       	cpi	r22, 0x80	; 128
     a90:	71 05       	cpc	r23, r1
     a92:	64 f5       	brge	.+88     	; 0xaec <__pack_f+0x172>
     a94:	fb 01       	movw	r30, r22
     a96:	e1 58       	subi	r30, 0x81	; 129
     a98:	ff 4f       	sbci	r31, 0xFF	; 255
     a9a:	d8 01       	movw	r26, r16
     a9c:	c7 01       	movw	r24, r14
     a9e:	8f 77       	andi	r24, 0x7F	; 127
     aa0:	90 70       	andi	r25, 0x00	; 0
     aa2:	a0 70       	andi	r26, 0x00	; 0
     aa4:	b0 70       	andi	r27, 0x00	; 0
     aa6:	80 34       	cpi	r24, 0x40	; 64
     aa8:	91 05       	cpc	r25, r1
     aaa:	a1 05       	cpc	r26, r1
     aac:	b1 05       	cpc	r27, r1
     aae:	39 f4       	brne	.+14     	; 0xabe <__pack_f+0x144>
     ab0:	e7 fe       	sbrs	r14, 7
     ab2:	0d c0       	rjmp	.+26     	; 0xace <__pack_f+0x154>
     ab4:	80 e4       	ldi	r24, 0x40	; 64
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	a0 e0       	ldi	r26, 0x00	; 0
     aba:	b0 e0       	ldi	r27, 0x00	; 0
     abc:	04 c0       	rjmp	.+8      	; 0xac6 <__pack_f+0x14c>
     abe:	8f e3       	ldi	r24, 0x3F	; 63
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	a0 e0       	ldi	r26, 0x00	; 0
     ac4:	b0 e0       	ldi	r27, 0x00	; 0
     ac6:	e8 0e       	add	r14, r24
     ac8:	f9 1e       	adc	r15, r25
     aca:	0a 1f       	adc	r16, r26
     acc:	1b 1f       	adc	r17, r27
     ace:	17 ff       	sbrs	r17, 7
     ad0:	05 c0       	rjmp	.+10     	; 0xadc <__pack_f+0x162>
     ad2:	16 95       	lsr	r17
     ad4:	07 95       	ror	r16
     ad6:	f7 94       	ror	r15
     ad8:	e7 94       	ror	r14
     ada:	31 96       	adiw	r30, 0x01	; 1
     adc:	87 e0       	ldi	r24, 0x07	; 7
     ade:	16 95       	lsr	r17
     ae0:	07 95       	ror	r16
     ae2:	f7 94       	ror	r15
     ae4:	e7 94       	ror	r14
     ae6:	8a 95       	dec	r24
     ae8:	d1 f7       	brne	.-12     	; 0xade <__pack_f+0x164>
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x17c>
     aec:	ee 24       	eor	r14, r14
     aee:	ff 24       	eor	r15, r15
     af0:	87 01       	movw	r16, r14
     af2:	ef ef       	ldi	r30, 0xFF	; 255
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	6e 2f       	mov	r22, r30
     af8:	67 95       	ror	r22
     afa:	66 27       	eor	r22, r22
     afc:	67 95       	ror	r22
     afe:	90 2f       	mov	r25, r16
     b00:	9f 77       	andi	r25, 0x7F	; 127
     b02:	d7 94       	ror	r13
     b04:	dd 24       	eor	r13, r13
     b06:	d7 94       	ror	r13
     b08:	8e 2f       	mov	r24, r30
     b0a:	86 95       	lsr	r24
     b0c:	49 2f       	mov	r20, r25
     b0e:	46 2b       	or	r20, r22
     b10:	58 2f       	mov	r21, r24
     b12:	5d 29       	or	r21, r13
     b14:	b7 01       	movw	r22, r14
     b16:	ca 01       	movw	r24, r20
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
     b1c:	ff 90       	pop	r15
     b1e:	ef 90       	pop	r14
     b20:	df 90       	pop	r13
     b22:	08 95       	ret

00000b24 <__unpack_f>:
     b24:	fc 01       	movw	r30, r24
     b26:	db 01       	movw	r26, r22
     b28:	40 81       	ld	r20, Z
     b2a:	51 81       	ldd	r21, Z+1	; 0x01
     b2c:	22 81       	ldd	r18, Z+2	; 0x02
     b2e:	62 2f       	mov	r22, r18
     b30:	6f 77       	andi	r22, 0x7F	; 127
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	22 1f       	adc	r18, r18
     b36:	22 27       	eor	r18, r18
     b38:	22 1f       	adc	r18, r18
     b3a:	93 81       	ldd	r25, Z+3	; 0x03
     b3c:	89 2f       	mov	r24, r25
     b3e:	88 0f       	add	r24, r24
     b40:	82 2b       	or	r24, r18
     b42:	28 2f       	mov	r18, r24
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	99 1f       	adc	r25, r25
     b48:	99 27       	eor	r25, r25
     b4a:	99 1f       	adc	r25, r25
     b4c:	11 96       	adiw	r26, 0x01	; 1
     b4e:	9c 93       	st	X, r25
     b50:	11 97       	sbiw	r26, 0x01	; 1
     b52:	21 15       	cp	r18, r1
     b54:	31 05       	cpc	r19, r1
     b56:	a9 f5       	brne	.+106    	; 0xbc2 <__unpack_f+0x9e>
     b58:	41 15       	cp	r20, r1
     b5a:	51 05       	cpc	r21, r1
     b5c:	61 05       	cpc	r22, r1
     b5e:	71 05       	cpc	r23, r1
     b60:	11 f4       	brne	.+4      	; 0xb66 <__unpack_f+0x42>
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	37 c0       	rjmp	.+110    	; 0xbd4 <__unpack_f+0xb0>
     b66:	82 e8       	ldi	r24, 0x82	; 130
     b68:	9f ef       	ldi	r25, 0xFF	; 255
     b6a:	13 96       	adiw	r26, 0x03	; 3
     b6c:	9c 93       	st	X, r25
     b6e:	8e 93       	st	-X, r24
     b70:	12 97       	sbiw	r26, 0x02	; 2
     b72:	9a 01       	movw	r18, r20
     b74:	ab 01       	movw	r20, r22
     b76:	67 e0       	ldi	r22, 0x07	; 7
     b78:	22 0f       	add	r18, r18
     b7a:	33 1f       	adc	r19, r19
     b7c:	44 1f       	adc	r20, r20
     b7e:	55 1f       	adc	r21, r21
     b80:	6a 95       	dec	r22
     b82:	d1 f7       	brne	.-12     	; 0xb78 <__unpack_f+0x54>
     b84:	83 e0       	ldi	r24, 0x03	; 3
     b86:	8c 93       	st	X, r24
     b88:	0d c0       	rjmp	.+26     	; 0xba4 <__unpack_f+0x80>
     b8a:	22 0f       	add	r18, r18
     b8c:	33 1f       	adc	r19, r19
     b8e:	44 1f       	adc	r20, r20
     b90:	55 1f       	adc	r21, r21
     b92:	12 96       	adiw	r26, 0x02	; 2
     b94:	8d 91       	ld	r24, X+
     b96:	9c 91       	ld	r25, X
     b98:	13 97       	sbiw	r26, 0x03	; 3
     b9a:	01 97       	sbiw	r24, 0x01	; 1
     b9c:	13 96       	adiw	r26, 0x03	; 3
     b9e:	9c 93       	st	X, r25
     ba0:	8e 93       	st	-X, r24
     ba2:	12 97       	sbiw	r26, 0x02	; 2
     ba4:	20 30       	cpi	r18, 0x00	; 0
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	38 07       	cpc	r19, r24
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	48 07       	cpc	r20, r24
     bae:	80 e4       	ldi	r24, 0x40	; 64
     bb0:	58 07       	cpc	r21, r24
     bb2:	58 f3       	brcs	.-42     	; 0xb8a <__unpack_f+0x66>
     bb4:	14 96       	adiw	r26, 0x04	; 4
     bb6:	2d 93       	st	X+, r18
     bb8:	3d 93       	st	X+, r19
     bba:	4d 93       	st	X+, r20
     bbc:	5c 93       	st	X, r21
     bbe:	17 97       	sbiw	r26, 0x07	; 7
     bc0:	08 95       	ret
     bc2:	2f 3f       	cpi	r18, 0xFF	; 255
     bc4:	31 05       	cpc	r19, r1
     bc6:	79 f4       	brne	.+30     	; 0xbe6 <__unpack_f+0xc2>
     bc8:	41 15       	cp	r20, r1
     bca:	51 05       	cpc	r21, r1
     bcc:	61 05       	cpc	r22, r1
     bce:	71 05       	cpc	r23, r1
     bd0:	19 f4       	brne	.+6      	; 0xbd8 <__unpack_f+0xb4>
     bd2:	84 e0       	ldi	r24, 0x04	; 4
     bd4:	8c 93       	st	X, r24
     bd6:	08 95       	ret
     bd8:	64 ff       	sbrs	r22, 4
     bda:	03 c0       	rjmp	.+6      	; 0xbe2 <__unpack_f+0xbe>
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	8c 93       	st	X, r24
     be0:	12 c0       	rjmp	.+36     	; 0xc06 <__unpack_f+0xe2>
     be2:	1c 92       	st	X, r1
     be4:	10 c0       	rjmp	.+32     	; 0xc06 <__unpack_f+0xe2>
     be6:	2f 57       	subi	r18, 0x7F	; 127
     be8:	30 40       	sbci	r19, 0x00	; 0
     bea:	13 96       	adiw	r26, 0x03	; 3
     bec:	3c 93       	st	X, r19
     bee:	2e 93       	st	-X, r18
     bf0:	12 97       	sbiw	r26, 0x02	; 2
     bf2:	83 e0       	ldi	r24, 0x03	; 3
     bf4:	8c 93       	st	X, r24
     bf6:	87 e0       	ldi	r24, 0x07	; 7
     bf8:	44 0f       	add	r20, r20
     bfa:	55 1f       	adc	r21, r21
     bfc:	66 1f       	adc	r22, r22
     bfe:	77 1f       	adc	r23, r23
     c00:	8a 95       	dec	r24
     c02:	d1 f7       	brne	.-12     	; 0xbf8 <__unpack_f+0xd4>
     c04:	70 64       	ori	r23, 0x40	; 64
     c06:	14 96       	adiw	r26, 0x04	; 4
     c08:	4d 93       	st	X+, r20
     c0a:	5d 93       	st	X+, r21
     c0c:	6d 93       	st	X+, r22
     c0e:	7c 93       	st	X, r23
     c10:	17 97       	sbiw	r26, 0x07	; 7
     c12:	08 95       	ret

00000c14 <__fpcmp_parts_f>:
     c14:	1f 93       	push	r17
     c16:	dc 01       	movw	r26, r24
     c18:	fb 01       	movw	r30, r22
     c1a:	9c 91       	ld	r25, X
     c1c:	92 30       	cpi	r25, 0x02	; 2
     c1e:	08 f4       	brcc	.+2      	; 0xc22 <__fpcmp_parts_f+0xe>
     c20:	47 c0       	rjmp	.+142    	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c22:	80 81       	ld	r24, Z
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	08 f4       	brcc	.+2      	; 0xc2a <__fpcmp_parts_f+0x16>
     c28:	43 c0       	rjmp	.+134    	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c2a:	94 30       	cpi	r25, 0x04	; 4
     c2c:	51 f4       	brne	.+20     	; 0xc42 <__fpcmp_parts_f+0x2e>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	84 30       	cpi	r24, 0x04	; 4
     c34:	99 f5       	brne	.+102    	; 0xc9c <__fpcmp_parts_f+0x88>
     c36:	81 81       	ldd	r24, Z+1	; 0x01
     c38:	68 2f       	mov	r22, r24
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	61 1b       	sub	r22, r17
     c3e:	71 09       	sbc	r23, r1
     c40:	3f c0       	rjmp	.+126    	; 0xcc0 <__fpcmp_parts_f+0xac>
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	21 f0       	breq	.+8      	; 0xc4e <__fpcmp_parts_f+0x3a>
     c46:	92 30       	cpi	r25, 0x02	; 2
     c48:	31 f4       	brne	.+12     	; 0xc56 <__fpcmp_parts_f+0x42>
     c4a:	82 30       	cpi	r24, 0x02	; 2
     c4c:	b9 f1       	breq	.+110    	; 0xcbc <__fpcmp_parts_f+0xa8>
     c4e:	81 81       	ldd	r24, Z+1	; 0x01
     c50:	88 23       	and	r24, r24
     c52:	89 f1       	breq	.+98     	; 0xcb6 <__fpcmp_parts_f+0xa2>
     c54:	2d c0       	rjmp	.+90     	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c56:	11 96       	adiw	r26, 0x01	; 1
     c58:	1c 91       	ld	r17, X
     c5a:	11 97       	sbiw	r26, 0x01	; 1
     c5c:	82 30       	cpi	r24, 0x02	; 2
     c5e:	f1 f0       	breq	.+60     	; 0xc9c <__fpcmp_parts_f+0x88>
     c60:	81 81       	ldd	r24, Z+1	; 0x01
     c62:	18 17       	cp	r17, r24
     c64:	d9 f4       	brne	.+54     	; 0xc9c <__fpcmp_parts_f+0x88>
     c66:	12 96       	adiw	r26, 0x02	; 2
     c68:	2d 91       	ld	r18, X+
     c6a:	3c 91       	ld	r19, X
     c6c:	13 97       	sbiw	r26, 0x03	; 3
     c6e:	82 81       	ldd	r24, Z+2	; 0x02
     c70:	93 81       	ldd	r25, Z+3	; 0x03
     c72:	82 17       	cp	r24, r18
     c74:	93 07       	cpc	r25, r19
     c76:	94 f0       	brlt	.+36     	; 0xc9c <__fpcmp_parts_f+0x88>
     c78:	28 17       	cp	r18, r24
     c7a:	39 07       	cpc	r19, r25
     c7c:	bc f0       	brlt	.+46     	; 0xcac <__fpcmp_parts_f+0x98>
     c7e:	14 96       	adiw	r26, 0x04	; 4
     c80:	8d 91       	ld	r24, X+
     c82:	9d 91       	ld	r25, X+
     c84:	0d 90       	ld	r0, X+
     c86:	bc 91       	ld	r27, X
     c88:	a0 2d       	mov	r26, r0
     c8a:	24 81       	ldd	r18, Z+4	; 0x04
     c8c:	35 81       	ldd	r19, Z+5	; 0x05
     c8e:	46 81       	ldd	r20, Z+6	; 0x06
     c90:	57 81       	ldd	r21, Z+7	; 0x07
     c92:	28 17       	cp	r18, r24
     c94:	39 07       	cpc	r19, r25
     c96:	4a 07       	cpc	r20, r26
     c98:	5b 07       	cpc	r21, r27
     c9a:	18 f4       	brcc	.+6      	; 0xca2 <__fpcmp_parts_f+0x8e>
     c9c:	11 23       	and	r17, r17
     c9e:	41 f0       	breq	.+16     	; 0xcb0 <__fpcmp_parts_f+0x9c>
     ca0:	0a c0       	rjmp	.+20     	; 0xcb6 <__fpcmp_parts_f+0xa2>
     ca2:	82 17       	cp	r24, r18
     ca4:	93 07       	cpc	r25, r19
     ca6:	a4 07       	cpc	r26, r20
     ca8:	b5 07       	cpc	r27, r21
     caa:	40 f4       	brcc	.+16     	; 0xcbc <__fpcmp_parts_f+0xa8>
     cac:	11 23       	and	r17, r17
     cae:	19 f0       	breq	.+6      	; 0xcb6 <__fpcmp_parts_f+0xa2>
     cb0:	61 e0       	ldi	r22, 0x01	; 1
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	05 c0       	rjmp	.+10     	; 0xcc0 <__fpcmp_parts_f+0xac>
     cb6:	6f ef       	ldi	r22, 0xFF	; 255
     cb8:	7f ef       	ldi	r23, 0xFF	; 255
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <__fpcmp_parts_f+0xac>
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	cb 01       	movw	r24, r22
     cc2:	1f 91       	pop	r17
     cc4:	08 95       	ret

00000cc6 <MDIO_voidSetPinDir>:
#include "../../LIB/STD_TYPES.h"
#include "../../LIB/BIT_MATH.h"
#include "DIO_int.h"

void MDIO_voidSetPinDir (u8 A_u8PortNo , u8 A_u8PinNo , u8 A_u8PinDir)
{
     cc6:	df 93       	push	r29
     cc8:	cf 93       	push	r28
     cca:	00 d0       	rcall	.+0      	; 0xccc <MDIO_voidSetPinDir+0x6>
     ccc:	00 d0       	rcall	.+0      	; 0xcce <MDIO_voidSetPinDir+0x8>
     cce:	0f 92       	push	r0
     cd0:	cd b7       	in	r28, 0x3d	; 61
     cd2:	de b7       	in	r29, 0x3e	; 62
     cd4:	89 83       	std	Y+1, r24	; 0x01
     cd6:	6a 83       	std	Y+2, r22	; 0x02
     cd8:	4b 83       	std	Y+3, r20	; 0x03
	switch (A_u8PortNo)
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	28 2f       	mov	r18, r24
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	3d 83       	std	Y+5, r19	; 0x05
     ce2:	2c 83       	std	Y+4, r18	; 0x04
     ce4:	6c 81       	ldd	r22, Y+4	; 0x04
     ce6:	7d 81       	ldd	r23, Y+5	; 0x05
     ce8:	62 30       	cpi	r22, 0x02	; 2
     cea:	71 05       	cpc	r23, r1
     cec:	d1 f1       	breq	.+116    	; 0xd62 <MDIO_voidSetPinDir+0x9c>
     cee:	8c 81       	ldd	r24, Y+4	; 0x04
     cf0:	9d 81       	ldd	r25, Y+5	; 0x05
     cf2:	83 30       	cpi	r24, 0x03	; 3
     cf4:	91 05       	cpc	r25, r1
     cf6:	34 f4       	brge	.+12     	; 0xd04 <MDIO_voidSetPinDir+0x3e>
     cf8:	2c 81       	ldd	r18, Y+4	; 0x04
     cfa:	3d 81       	ldd	r19, Y+5	; 0x05
     cfc:	21 30       	cpi	r18, 0x01	; 1
     cfe:	31 05       	cpc	r19, r1
     d00:	71 f0       	breq	.+28     	; 0xd1e <MDIO_voidSetPinDir+0x58>
     d02:	94 c0       	rjmp	.+296    	; 0xe2c <MDIO_voidSetPinDir+0x166>
     d04:	6c 81       	ldd	r22, Y+4	; 0x04
     d06:	7d 81       	ldd	r23, Y+5	; 0x05
     d08:	63 30       	cpi	r22, 0x03	; 3
     d0a:	71 05       	cpc	r23, r1
     d0c:	09 f4       	brne	.+2      	; 0xd10 <MDIO_voidSetPinDir+0x4a>
     d0e:	4b c0       	rjmp	.+150    	; 0xda6 <MDIO_voidSetPinDir+0xe0>
     d10:	8c 81       	ldd	r24, Y+4	; 0x04
     d12:	9d 81       	ldd	r25, Y+5	; 0x05
     d14:	84 30       	cpi	r24, 0x04	; 4
     d16:	91 05       	cpc	r25, r1
     d18:	09 f4       	brne	.+2      	; 0xd1c <MDIO_voidSetPinDir+0x56>
     d1a:	67 c0       	rjmp	.+206    	; 0xdea <MDIO_voidSetPinDir+0x124>
     d1c:	87 c0       	rjmp	.+270    	; 0xe2c <MDIO_voidSetPinDir+0x166>
	    {
	    case DIO_PORTA : WRT_BIT(DDRA , A_u8PinNo , A_u8PinDir) ; break ;
     d1e:	aa e3       	ldi	r26, 0x3A	; 58
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	ea e3       	ldi	r30, 0x3A	; 58
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	48 2f       	mov	r20, r24
     d2a:	8a 81       	ldd	r24, Y+2	; 0x02
     d2c:	28 2f       	mov	r18, r24
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <MDIO_voidSetPinDir+0x74>
     d36:	88 0f       	add	r24, r24
     d38:	99 1f       	adc	r25, r25
     d3a:	2a 95       	dec	r18
     d3c:	e2 f7       	brpl	.-8      	; 0xd36 <MDIO_voidSetPinDir+0x70>
     d3e:	80 95       	com	r24
     d40:	48 23       	and	r20, r24
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	28 2f       	mov	r18, r24
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	8a 81       	ldd	r24, Y+2	; 0x02
     d4a:	88 2f       	mov	r24, r24
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	b9 01       	movw	r22, r18
     d50:	02 c0       	rjmp	.+4      	; 0xd56 <MDIO_voidSetPinDir+0x90>
     d52:	66 0f       	add	r22, r22
     d54:	77 1f       	adc	r23, r23
     d56:	8a 95       	dec	r24
     d58:	e2 f7       	brpl	.-8      	; 0xd52 <MDIO_voidSetPinDir+0x8c>
     d5a:	cb 01       	movw	r24, r22
     d5c:	84 2b       	or	r24, r20
     d5e:	8c 93       	st	X, r24
     d60:	65 c0       	rjmp	.+202    	; 0xe2c <MDIO_voidSetPinDir+0x166>
	    case DIO_PORTB : WRT_BIT(DDRB , A_u8PinNo , A_u8PinDir) ; break ;
     d62:	a7 e3       	ldi	r26, 0x37	; 55
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e7 e3       	ldi	r30, 0x37	; 55
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	48 2f       	mov	r20, r24
     d6e:	8a 81       	ldd	r24, Y+2	; 0x02
     d70:	28 2f       	mov	r18, r24
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	02 c0       	rjmp	.+4      	; 0xd7e <MDIO_voidSetPinDir+0xb8>
     d7a:	88 0f       	add	r24, r24
     d7c:	99 1f       	adc	r25, r25
     d7e:	2a 95       	dec	r18
     d80:	e2 f7       	brpl	.-8      	; 0xd7a <MDIO_voidSetPinDir+0xb4>
     d82:	80 95       	com	r24
     d84:	48 23       	and	r20, r24
     d86:	8b 81       	ldd	r24, Y+3	; 0x03
     d88:	28 2f       	mov	r18, r24
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	8a 81       	ldd	r24, Y+2	; 0x02
     d8e:	88 2f       	mov	r24, r24
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	b9 01       	movw	r22, r18
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <MDIO_voidSetPinDir+0xd4>
     d96:	66 0f       	add	r22, r22
     d98:	77 1f       	adc	r23, r23
     d9a:	8a 95       	dec	r24
     d9c:	e2 f7       	brpl	.-8      	; 0xd96 <MDIO_voidSetPinDir+0xd0>
     d9e:	cb 01       	movw	r24, r22
     da0:	84 2b       	or	r24, r20
     da2:	8c 93       	st	X, r24
     da4:	43 c0       	rjmp	.+134    	; 0xe2c <MDIO_voidSetPinDir+0x166>
	    case DIO_PORTC : WRT_BIT(DDRC , A_u8PinNo , A_u8PinDir) ; break ;
     da6:	a4 e3       	ldi	r26, 0x34	; 52
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	e4 e3       	ldi	r30, 0x34	; 52
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	48 2f       	mov	r20, r24
     db2:	8a 81       	ldd	r24, Y+2	; 0x02
     db4:	28 2f       	mov	r18, r24
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <MDIO_voidSetPinDir+0xfc>
     dbe:	88 0f       	add	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	2a 95       	dec	r18
     dc4:	e2 f7       	brpl	.-8      	; 0xdbe <MDIO_voidSetPinDir+0xf8>
     dc6:	80 95       	com	r24
     dc8:	48 23       	and	r20, r24
     dca:	8b 81       	ldd	r24, Y+3	; 0x03
     dcc:	28 2f       	mov	r18, r24
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	8a 81       	ldd	r24, Y+2	; 0x02
     dd2:	88 2f       	mov	r24, r24
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	b9 01       	movw	r22, r18
     dd8:	02 c0       	rjmp	.+4      	; 0xdde <MDIO_voidSetPinDir+0x118>
     dda:	66 0f       	add	r22, r22
     ddc:	77 1f       	adc	r23, r23
     dde:	8a 95       	dec	r24
     de0:	e2 f7       	brpl	.-8      	; 0xdda <MDIO_voidSetPinDir+0x114>
     de2:	cb 01       	movw	r24, r22
     de4:	84 2b       	or	r24, r20
     de6:	8c 93       	st	X, r24
     de8:	21 c0       	rjmp	.+66     	; 0xe2c <MDIO_voidSetPinDir+0x166>
	    case DIO_PORTD : WRT_BIT(DDRD , A_u8PinNo , A_u8PinDir) ; break ;
     dea:	a1 e3       	ldi	r26, 0x31	; 49
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	e1 e3       	ldi	r30, 0x31	; 49
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	48 2f       	mov	r20, r24
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	28 2f       	mov	r18, r24
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <MDIO_voidSetPinDir+0x140>
     e02:	88 0f       	add	r24, r24
     e04:	99 1f       	adc	r25, r25
     e06:	2a 95       	dec	r18
     e08:	e2 f7       	brpl	.-8      	; 0xe02 <MDIO_voidSetPinDir+0x13c>
     e0a:	80 95       	com	r24
     e0c:	48 23       	and	r20, r24
     e0e:	8b 81       	ldd	r24, Y+3	; 0x03
     e10:	28 2f       	mov	r18, r24
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	8a 81       	ldd	r24, Y+2	; 0x02
     e16:	88 2f       	mov	r24, r24
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	b9 01       	movw	r22, r18
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <MDIO_voidSetPinDir+0x15c>
     e1e:	66 0f       	add	r22, r22
     e20:	77 1f       	adc	r23, r23
     e22:	8a 95       	dec	r24
     e24:	e2 f7       	brpl	.-8      	; 0xe1e <MDIO_voidSetPinDir+0x158>
     e26:	cb 01       	movw	r24, r22
     e28:	84 2b       	or	r24, r20
     e2a:	8c 93       	st	X, r24
	    default : /**Error*/ break ;
	    }
}
     e2c:	0f 90       	pop	r0
     e2e:	0f 90       	pop	r0
     e30:	0f 90       	pop	r0
     e32:	0f 90       	pop	r0
     e34:	0f 90       	pop	r0
     e36:	cf 91       	pop	r28
     e38:	df 91       	pop	r29
     e3a:	08 95       	ret

00000e3c <MDIO_voidSetPinVal>:

void MDIO_voidSetPinVal (u8 A_u8PortNo , u8 A_u8PinNo)
{
     e3c:	df 93       	push	r29
     e3e:	cf 93       	push	r28
     e40:	00 d0       	rcall	.+0      	; 0xe42 <MDIO_voidSetPinVal+0x6>
     e42:	00 d0       	rcall	.+0      	; 0xe44 <MDIO_voidSetPinVal+0x8>
     e44:	cd b7       	in	r28, 0x3d	; 61
     e46:	de b7       	in	r29, 0x3e	; 62
     e48:	89 83       	std	Y+1, r24	; 0x01
     e4a:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortNo)
     e4c:	89 81       	ldd	r24, Y+1	; 0x01
     e4e:	28 2f       	mov	r18, r24
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	3c 83       	std	Y+4, r19	; 0x04
     e54:	2b 83       	std	Y+3, r18	; 0x03
     e56:	8b 81       	ldd	r24, Y+3	; 0x03
     e58:	9c 81       	ldd	r25, Y+4	; 0x04
     e5a:	82 30       	cpi	r24, 0x02	; 2
     e5c:	91 05       	cpc	r25, r1
     e5e:	51 f1       	breq	.+84     	; 0xeb4 <MDIO_voidSetPinVal+0x78>
     e60:	2b 81       	ldd	r18, Y+3	; 0x03
     e62:	3c 81       	ldd	r19, Y+4	; 0x04
     e64:	23 30       	cpi	r18, 0x03	; 3
     e66:	31 05       	cpc	r19, r1
     e68:	34 f4       	brge	.+12     	; 0xe76 <MDIO_voidSetPinVal+0x3a>
     e6a:	8b 81       	ldd	r24, Y+3	; 0x03
     e6c:	9c 81       	ldd	r25, Y+4	; 0x04
     e6e:	81 30       	cpi	r24, 0x01	; 1
     e70:	91 05       	cpc	r25, r1
     e72:	61 f0       	breq	.+24     	; 0xe8c <MDIO_voidSetPinVal+0x50>
     e74:	5a c0       	rjmp	.+180    	; 0xf2a <MDIO_voidSetPinVal+0xee>
     e76:	2b 81       	ldd	r18, Y+3	; 0x03
     e78:	3c 81       	ldd	r19, Y+4	; 0x04
     e7a:	23 30       	cpi	r18, 0x03	; 3
     e7c:	31 05       	cpc	r19, r1
     e7e:	71 f1       	breq	.+92     	; 0xedc <MDIO_voidSetPinVal+0xa0>
     e80:	8b 81       	ldd	r24, Y+3	; 0x03
     e82:	9c 81       	ldd	r25, Y+4	; 0x04
     e84:	84 30       	cpi	r24, 0x04	; 4
     e86:	91 05       	cpc	r25, r1
     e88:	e9 f1       	breq	.+122    	; 0xf04 <MDIO_voidSetPinVal+0xc8>
     e8a:	4f c0       	rjmp	.+158    	; 0xf2a <MDIO_voidSetPinVal+0xee>
		{
		case DIO_PORTA : SET_BIT(PORTA , A_u8PinNo ) ; break ;
     e8c:	ab e3       	ldi	r26, 0x3B	; 59
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	eb e3       	ldi	r30, 0x3B	; 59
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	48 2f       	mov	r20, r24
     e98:	8a 81       	ldd	r24, Y+2	; 0x02
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	02 2e       	mov	r0, r18
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <MDIO_voidSetPinVal+0x6e>
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	0a 94       	dec	r0
     eac:	e2 f7       	brpl	.-8      	; 0xea6 <MDIO_voidSetPinVal+0x6a>
     eae:	84 2b       	or	r24, r20
     eb0:	8c 93       	st	X, r24
     eb2:	3b c0       	rjmp	.+118    	; 0xf2a <MDIO_voidSetPinVal+0xee>
		case DIO_PORTB : SET_BIT(PORTB , A_u8PinNo ) ; break ;
     eb4:	a8 e3       	ldi	r26, 0x38	; 56
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e8 e3       	ldi	r30, 0x38	; 56
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	48 2f       	mov	r20, r24
     ec0:	8a 81       	ldd	r24, Y+2	; 0x02
     ec2:	28 2f       	mov	r18, r24
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	02 2e       	mov	r0, r18
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <MDIO_voidSetPinVal+0x96>
     ece:	88 0f       	add	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	0a 94       	dec	r0
     ed4:	e2 f7       	brpl	.-8      	; 0xece <MDIO_voidSetPinVal+0x92>
     ed6:	84 2b       	or	r24, r20
     ed8:	8c 93       	st	X, r24
     eda:	27 c0       	rjmp	.+78     	; 0xf2a <MDIO_voidSetPinVal+0xee>
		case DIO_PORTC : SET_BIT(PORTC , A_u8PinNo ) ; break ;
     edc:	a5 e3       	ldi	r26, 0x35	; 53
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e5 e3       	ldi	r30, 0x35	; 53
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	48 2f       	mov	r20, r24
     ee8:	8a 81       	ldd	r24, Y+2	; 0x02
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	02 2e       	mov	r0, r18
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <MDIO_voidSetPinVal+0xbe>
     ef6:	88 0f       	add	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	0a 94       	dec	r0
     efc:	e2 f7       	brpl	.-8      	; 0xef6 <MDIO_voidSetPinVal+0xba>
     efe:	84 2b       	or	r24, r20
     f00:	8c 93       	st	X, r24
     f02:	13 c0       	rjmp	.+38     	; 0xf2a <MDIO_voidSetPinVal+0xee>
		case DIO_PORTD : SET_BIT(PORTD , A_u8PinNo ) ; break ;
     f04:	a2 e3       	ldi	r26, 0x32	; 50
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	e2 e3       	ldi	r30, 0x32	; 50
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	48 2f       	mov	r20, r24
     f10:	8a 81       	ldd	r24, Y+2	; 0x02
     f12:	28 2f       	mov	r18, r24
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	02 2e       	mov	r0, r18
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <MDIO_voidSetPinVal+0xe6>
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	0a 94       	dec	r0
     f24:	e2 f7       	brpl	.-8      	; 0xf1e <MDIO_voidSetPinVal+0xe2>
     f26:	84 2b       	or	r24, r20
     f28:	8c 93       	st	X, r24
		default : /**Error*/ break ;
		}
}
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	0f 90       	pop	r0
     f30:	0f 90       	pop	r0
     f32:	cf 91       	pop	r28
     f34:	df 91       	pop	r29
     f36:	08 95       	ret

00000f38 <MDIO_u8GetPinVal>:

u8   MDIO_u8GetPinVal   (u8 A_u8PortNo , u8 A_u8PinNo)
{
     f38:	df 93       	push	r29
     f3a:	cf 93       	push	r28
     f3c:	00 d0       	rcall	.+0      	; 0xf3e <MDIO_u8GetPinVal+0x6>
     f3e:	00 d0       	rcall	.+0      	; 0xf40 <MDIO_u8GetPinVal+0x8>
     f40:	0f 92       	push	r0
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
     f46:	8a 83       	std	Y+2, r24	; 0x02
     f48:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8PinVal ;
	switch (A_u8PortNo)
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	3d 83       	std	Y+5, r19	; 0x05
     f52:	2c 83       	std	Y+4, r18	; 0x04
     f54:	4c 81       	ldd	r20, Y+4	; 0x04
     f56:	5d 81       	ldd	r21, Y+5	; 0x05
     f58:	42 30       	cpi	r20, 0x02	; 2
     f5a:	51 05       	cpc	r21, r1
     f5c:	b1 f1       	breq	.+108    	; 0xfca <MDIO_u8GetPinVal+0x92>
     f5e:	8c 81       	ldd	r24, Y+4	; 0x04
     f60:	9d 81       	ldd	r25, Y+5	; 0x05
     f62:	83 30       	cpi	r24, 0x03	; 3
     f64:	91 05       	cpc	r25, r1
     f66:	34 f4       	brge	.+12     	; 0xf74 <MDIO_u8GetPinVal+0x3c>
     f68:	2c 81       	ldd	r18, Y+4	; 0x04
     f6a:	3d 81       	ldd	r19, Y+5	; 0x05
     f6c:	21 30       	cpi	r18, 0x01	; 1
     f6e:	31 05       	cpc	r19, r1
     f70:	71 f0       	breq	.+28     	; 0xf8e <MDIO_u8GetPinVal+0x56>
     f72:	84 c0       	rjmp	.+264    	; 0x107c <MDIO_u8GetPinVal+0x144>
     f74:	4c 81       	ldd	r20, Y+4	; 0x04
     f76:	5d 81       	ldd	r21, Y+5	; 0x05
     f78:	43 30       	cpi	r20, 0x03	; 3
     f7a:	51 05       	cpc	r21, r1
     f7c:	09 f4       	brne	.+2      	; 0xf80 <MDIO_u8GetPinVal+0x48>
     f7e:	43 c0       	rjmp	.+134    	; 0x1006 <MDIO_u8GetPinVal+0xce>
     f80:	8c 81       	ldd	r24, Y+4	; 0x04
     f82:	9d 81       	ldd	r25, Y+5	; 0x05
     f84:	84 30       	cpi	r24, 0x04	; 4
     f86:	91 05       	cpc	r25, r1
     f88:	09 f4       	brne	.+2      	; 0xf8c <MDIO_u8GetPinVal+0x54>
     f8a:	5b c0       	rjmp	.+182    	; 0x1042 <MDIO_u8GetPinVal+0x10a>
     f8c:	77 c0       	rjmp	.+238    	; 0x107c <MDIO_u8GetPinVal+0x144>
		{
		case DIO_PORTA : L_u8PinVal = READ_BIT(PINA , A_u8PinNo) ; break ;
     f8e:	e9 e3       	ldi	r30, 0x39	; 57
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	48 2f       	mov	r20, r24
     f96:	50 e0       	ldi	r21, 0x00	; 0
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <MDIO_u8GetPinVal+0x70>
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	2a 95       	dec	r18
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <MDIO_u8GetPinVal+0x6c>
     fac:	9a 01       	movw	r18, r20
     fae:	28 23       	and	r18, r24
     fb0:	39 23       	and	r19, r25
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	88 2f       	mov	r24, r24
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	a9 01       	movw	r20, r18
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <MDIO_u8GetPinVal+0x88>
     fbc:	55 95       	asr	r21
     fbe:	47 95       	ror	r20
     fc0:	8a 95       	dec	r24
     fc2:	e2 f7       	brpl	.-8      	; 0xfbc <MDIO_u8GetPinVal+0x84>
     fc4:	ca 01       	movw	r24, r20
     fc6:	89 83       	std	Y+1, r24	; 0x01
     fc8:	59 c0       	rjmp	.+178    	; 0x107c <MDIO_u8GetPinVal+0x144>
		case DIO_PORTB : L_u8PinVal = READ_BIT(PINB , A_u8PinNo) ; break ;
     fca:	e6 e3       	ldi	r30, 0x36	; 54
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	48 2f       	mov	r20, r24
     fd2:	50 e0       	ldi	r21, 0x00	; 0
     fd4:	8b 81       	ldd	r24, Y+3	; 0x03
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <MDIO_u8GetPinVal+0xac>
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	2a 95       	dec	r18
     fe6:	e2 f7       	brpl	.-8      	; 0xfe0 <MDIO_u8GetPinVal+0xa8>
     fe8:	9a 01       	movw	r18, r20
     fea:	28 23       	and	r18, r24
     fec:	39 23       	and	r19, r25
     fee:	8b 81       	ldd	r24, Y+3	; 0x03
     ff0:	88 2f       	mov	r24, r24
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	a9 01       	movw	r20, r18
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <MDIO_u8GetPinVal+0xc4>
     ff8:	55 95       	asr	r21
     ffa:	47 95       	ror	r20
     ffc:	8a 95       	dec	r24
     ffe:	e2 f7       	brpl	.-8      	; 0xff8 <MDIO_u8GetPinVal+0xc0>
    1000:	ca 01       	movw	r24, r20
    1002:	89 83       	std	Y+1, r24	; 0x01
    1004:	3b c0       	rjmp	.+118    	; 0x107c <MDIO_u8GetPinVal+0x144>
		case DIO_PORTC : L_u8PinVal = READ_BIT(PINC , A_u8PinNo) ; break ;
    1006:	e3 e3       	ldi	r30, 0x33	; 51
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	48 2f       	mov	r20, r24
    100e:	50 e0       	ldi	r21, 0x00	; 0
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <MDIO_u8GetPinVal+0xe8>
    101c:	88 0f       	add	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	2a 95       	dec	r18
    1022:	e2 f7       	brpl	.-8      	; 0x101c <MDIO_u8GetPinVal+0xe4>
    1024:	9a 01       	movw	r18, r20
    1026:	28 23       	and	r18, r24
    1028:	39 23       	and	r19, r25
    102a:	8b 81       	ldd	r24, Y+3	; 0x03
    102c:	88 2f       	mov	r24, r24
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	a9 01       	movw	r20, r18
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <MDIO_u8GetPinVal+0x100>
    1034:	55 95       	asr	r21
    1036:	47 95       	ror	r20
    1038:	8a 95       	dec	r24
    103a:	e2 f7       	brpl	.-8      	; 0x1034 <MDIO_u8GetPinVal+0xfc>
    103c:	ca 01       	movw	r24, r20
    103e:	89 83       	std	Y+1, r24	; 0x01
    1040:	1d c0       	rjmp	.+58     	; 0x107c <MDIO_u8GetPinVal+0x144>
		case DIO_PORTD : L_u8PinVal = READ_BIT(PIND , A_u8PinNo) ; break ;
    1042:	e0 e3       	ldi	r30, 0x30	; 48
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	48 2f       	mov	r20, r24
    104a:	50 e0       	ldi	r21, 0x00	; 0
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	02 c0       	rjmp	.+4      	; 0x105c <MDIO_u8GetPinVal+0x124>
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	2a 95       	dec	r18
    105e:	e2 f7       	brpl	.-8      	; 0x1058 <MDIO_u8GetPinVal+0x120>
    1060:	9a 01       	movw	r18, r20
    1062:	28 23       	and	r18, r24
    1064:	39 23       	and	r19, r25
    1066:	8b 81       	ldd	r24, Y+3	; 0x03
    1068:	88 2f       	mov	r24, r24
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	a9 01       	movw	r20, r18
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <MDIO_u8GetPinVal+0x13c>
    1070:	55 95       	asr	r21
    1072:	47 95       	ror	r20
    1074:	8a 95       	dec	r24
    1076:	e2 f7       	brpl	.-8      	; 0x1070 <MDIO_u8GetPinVal+0x138>
    1078:	ca 01       	movw	r24, r20
    107a:	89 83       	std	Y+1, r24	; 0x01
		default : /**Error*/ break ;
		}
	return L_u8PinVal ;
    107c:	89 81       	ldd	r24, Y+1	; 0x01
}
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	cf 91       	pop	r28
    108a:	df 91       	pop	r29
    108c:	08 95       	ret

0000108e <MDIO_voidSetPortVal>:

void MDIO_voidSetPortVal (u8 A_u8PortNo , u8 A_u8PortVal)
{
    108e:	df 93       	push	r29
    1090:	cf 93       	push	r28
    1092:	00 d0       	rcall	.+0      	; 0x1094 <MDIO_voidSetPortVal+0x6>
    1094:	00 d0       	rcall	.+0      	; 0x1096 <MDIO_voidSetPortVal+0x8>
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
    109a:	89 83       	std	Y+1, r24	; 0x01
    109c:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortNo)
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	3c 83       	std	Y+4, r19	; 0x04
    10a6:	2b 83       	std	Y+3, r18	; 0x03
    10a8:	8b 81       	ldd	r24, Y+3	; 0x03
    10aa:	9c 81       	ldd	r25, Y+4	; 0x04
    10ac:	82 30       	cpi	r24, 0x02	; 2
    10ae:	91 05       	cpc	r25, r1
    10b0:	d9 f0       	breq	.+54     	; 0x10e8 <MDIO_voidSetPortVal+0x5a>
    10b2:	2b 81       	ldd	r18, Y+3	; 0x03
    10b4:	3c 81       	ldd	r19, Y+4	; 0x04
    10b6:	23 30       	cpi	r18, 0x03	; 3
    10b8:	31 05       	cpc	r19, r1
    10ba:	34 f4       	brge	.+12     	; 0x10c8 <MDIO_voidSetPortVal+0x3a>
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
    10be:	9c 81       	ldd	r25, Y+4	; 0x04
    10c0:	81 30       	cpi	r24, 0x01	; 1
    10c2:	91 05       	cpc	r25, r1
    10c4:	61 f0       	breq	.+24     	; 0x10de <MDIO_voidSetPortVal+0x50>
    10c6:	1e c0       	rjmp	.+60     	; 0x1104 <MDIO_voidSetPortVal+0x76>
    10c8:	2b 81       	ldd	r18, Y+3	; 0x03
    10ca:	3c 81       	ldd	r19, Y+4	; 0x04
    10cc:	23 30       	cpi	r18, 0x03	; 3
    10ce:	31 05       	cpc	r19, r1
    10d0:	81 f0       	breq	.+32     	; 0x10f2 <MDIO_voidSetPortVal+0x64>
    10d2:	8b 81       	ldd	r24, Y+3	; 0x03
    10d4:	9c 81       	ldd	r25, Y+4	; 0x04
    10d6:	84 30       	cpi	r24, 0x04	; 4
    10d8:	91 05       	cpc	r25, r1
    10da:	81 f0       	breq	.+32     	; 0x10fc <MDIO_voidSetPortVal+0x6e>
    10dc:	13 c0       	rjmp	.+38     	; 0x1104 <MDIO_voidSetPortVal+0x76>
		{
		case DIO_PORTA : PORTA = A_u8PortVal  ; break ;
    10de:	eb e3       	ldi	r30, 0x3B	; 59
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	80 83       	st	Z, r24
    10e6:	0e c0       	rjmp	.+28     	; 0x1104 <MDIO_voidSetPortVal+0x76>
		case DIO_PORTB : PORTB = A_u8PortVal  ; break ;
    10e8:	e8 e3       	ldi	r30, 0x38	; 56
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	8a 81       	ldd	r24, Y+2	; 0x02
    10ee:	80 83       	st	Z, r24
    10f0:	09 c0       	rjmp	.+18     	; 0x1104 <MDIO_voidSetPortVal+0x76>
		case DIO_PORTC : PORTC = A_u8PortVal  ; break ;
    10f2:	e5 e3       	ldi	r30, 0x35	; 53
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	8a 81       	ldd	r24, Y+2	; 0x02
    10f8:	80 83       	st	Z, r24
    10fa:	04 c0       	rjmp	.+8      	; 0x1104 <MDIO_voidSetPortVal+0x76>
		case DIO_PORTD : PORTD = A_u8PortVal  ; break ;
    10fc:	e2 e3       	ldi	r30, 0x32	; 50
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	80 83       	st	Z, r24
		default : /**Error*/ break ;
		}
}
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	0f 90       	pop	r0
    110a:	0f 90       	pop	r0
    110c:	cf 91       	pop	r28
    110e:	df 91       	pop	r29
    1110:	08 95       	ret

00001112 <MDIO_voidSetPortDir>:

void MDIO_voidSetPortDir (u8 A_u8PortNo , u8 A_u8PortVal)
{
    1112:	df 93       	push	r29
    1114:	cf 93       	push	r28
    1116:	00 d0       	rcall	.+0      	; 0x1118 <MDIO_voidSetPortDir+0x6>
    1118:	00 d0       	rcall	.+0      	; 0x111a <MDIO_voidSetPortDir+0x8>
    111a:	cd b7       	in	r28, 0x3d	; 61
    111c:	de b7       	in	r29, 0x3e	; 62
    111e:	89 83       	std	Y+1, r24	; 0x01
    1120:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortNo)
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	3c 83       	std	Y+4, r19	; 0x04
    112a:	2b 83       	std	Y+3, r18	; 0x03
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	9c 81       	ldd	r25, Y+4	; 0x04
    1130:	82 30       	cpi	r24, 0x02	; 2
    1132:	91 05       	cpc	r25, r1
    1134:	d9 f0       	breq	.+54     	; 0x116c <MDIO_voidSetPortDir+0x5a>
    1136:	2b 81       	ldd	r18, Y+3	; 0x03
    1138:	3c 81       	ldd	r19, Y+4	; 0x04
    113a:	23 30       	cpi	r18, 0x03	; 3
    113c:	31 05       	cpc	r19, r1
    113e:	34 f4       	brge	.+12     	; 0x114c <MDIO_voidSetPortDir+0x3a>
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	9c 81       	ldd	r25, Y+4	; 0x04
    1144:	81 30       	cpi	r24, 0x01	; 1
    1146:	91 05       	cpc	r25, r1
    1148:	61 f0       	breq	.+24     	; 0x1162 <MDIO_voidSetPortDir+0x50>
    114a:	1e c0       	rjmp	.+60     	; 0x1188 <MDIO_voidSetPortDir+0x76>
    114c:	2b 81       	ldd	r18, Y+3	; 0x03
    114e:	3c 81       	ldd	r19, Y+4	; 0x04
    1150:	23 30       	cpi	r18, 0x03	; 3
    1152:	31 05       	cpc	r19, r1
    1154:	81 f0       	breq	.+32     	; 0x1176 <MDIO_voidSetPortDir+0x64>
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	9c 81       	ldd	r25, Y+4	; 0x04
    115a:	84 30       	cpi	r24, 0x04	; 4
    115c:	91 05       	cpc	r25, r1
    115e:	81 f0       	breq	.+32     	; 0x1180 <MDIO_voidSetPortDir+0x6e>
    1160:	13 c0       	rjmp	.+38     	; 0x1188 <MDIO_voidSetPortDir+0x76>
		{
		case DIO_PORTA : DDRA = A_u8PortVal  ; break ;
    1162:	ea e3       	ldi	r30, 0x3A	; 58
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	80 83       	st	Z, r24
    116a:	0e c0       	rjmp	.+28     	; 0x1188 <MDIO_voidSetPortDir+0x76>
		case DIO_PORTB : DDRB = A_u8PortVal  ; break ;
    116c:	e7 e3       	ldi	r30, 0x37	; 55
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	80 83       	st	Z, r24
    1174:	09 c0       	rjmp	.+18     	; 0x1188 <MDIO_voidSetPortDir+0x76>
		case DIO_PORTC : DDRC = A_u8PortVal  ; break ;
    1176:	e4 e3       	ldi	r30, 0x34	; 52
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	8a 81       	ldd	r24, Y+2	; 0x02
    117c:	80 83       	st	Z, r24
    117e:	04 c0       	rjmp	.+8      	; 0x1188 <MDIO_voidSetPortDir+0x76>
		case DIO_PORTD : DDRD = A_u8PortVal  ; break ;
    1180:	e1 e3       	ldi	r30, 0x31	; 49
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	80 83       	st	Z, r24
		default : /**Error*/ break ;
		}
}
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	0f 90       	pop	r0
    118e:	0f 90       	pop	r0
    1190:	cf 91       	pop	r28
    1192:	df 91       	pop	r29
    1194:	08 95       	ret

00001196 <MDIO_u8GetPortVal>:

u8   MDIO_u8GetPortVal   (u8 A_u8PortNo)
{
    1196:	df 93       	push	r29
    1198:	cf 93       	push	r28
    119a:	00 d0       	rcall	.+0      	; 0x119c <MDIO_u8GetPortVal+0x6>
    119c:	00 d0       	rcall	.+0      	; 0x119e <MDIO_u8GetPortVal+0x8>
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    11a2:	8a 83       	std	Y+2, r24	; 0x02
	u8 L_u8PinVal ;
	switch (A_u8PortNo)
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	3c 83       	std	Y+4, r19	; 0x04
    11ac:	2b 83       	std	Y+3, r18	; 0x03
    11ae:	8b 81       	ldd	r24, Y+3	; 0x03
    11b0:	9c 81       	ldd	r25, Y+4	; 0x04
    11b2:	82 30       	cpi	r24, 0x02	; 2
    11b4:	91 05       	cpc	r25, r1
    11b6:	d9 f0       	breq	.+54     	; 0x11ee <MDIO_u8GetPortVal+0x58>
    11b8:	2b 81       	ldd	r18, Y+3	; 0x03
    11ba:	3c 81       	ldd	r19, Y+4	; 0x04
    11bc:	23 30       	cpi	r18, 0x03	; 3
    11be:	31 05       	cpc	r19, r1
    11c0:	34 f4       	brge	.+12     	; 0x11ce <MDIO_u8GetPortVal+0x38>
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	9c 81       	ldd	r25, Y+4	; 0x04
    11c6:	81 30       	cpi	r24, 0x01	; 1
    11c8:	91 05       	cpc	r25, r1
    11ca:	61 f0       	breq	.+24     	; 0x11e4 <MDIO_u8GetPortVal+0x4e>
    11cc:	1e c0       	rjmp	.+60     	; 0x120a <MDIO_u8GetPortVal+0x74>
    11ce:	2b 81       	ldd	r18, Y+3	; 0x03
    11d0:	3c 81       	ldd	r19, Y+4	; 0x04
    11d2:	23 30       	cpi	r18, 0x03	; 3
    11d4:	31 05       	cpc	r19, r1
    11d6:	81 f0       	breq	.+32     	; 0x11f8 <MDIO_u8GetPortVal+0x62>
    11d8:	8b 81       	ldd	r24, Y+3	; 0x03
    11da:	9c 81       	ldd	r25, Y+4	; 0x04
    11dc:	84 30       	cpi	r24, 0x04	; 4
    11de:	91 05       	cpc	r25, r1
    11e0:	81 f0       	breq	.+32     	; 0x1202 <MDIO_u8GetPortVal+0x6c>
    11e2:	13 c0       	rjmp	.+38     	; 0x120a <MDIO_u8GetPortVal+0x74>
		{
		case DIO_PORTA : L_u8PinVal = PINA ; break ;
    11e4:	e9 e3       	ldi	r30, 0x39	; 57
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	89 83       	std	Y+1, r24	; 0x01
    11ec:	0e c0       	rjmp	.+28     	; 0x120a <MDIO_u8GetPortVal+0x74>
		case DIO_PORTB : L_u8PinVal = PINB ; break ;
    11ee:	e6 e3       	ldi	r30, 0x36	; 54
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	89 83       	std	Y+1, r24	; 0x01
    11f6:	09 c0       	rjmp	.+18     	; 0x120a <MDIO_u8GetPortVal+0x74>
		case DIO_PORTC : L_u8PinVal = PINC ; break ;
    11f8:	e3 e3       	ldi	r30, 0x33	; 51
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	89 83       	std	Y+1, r24	; 0x01
    1200:	04 c0       	rjmp	.+8      	; 0x120a <MDIO_u8GetPortVal+0x74>
		case DIO_PORTD : L_u8PinVal = PIND ; break ;
    1202:	e0 e3       	ldi	r30, 0x30	; 48
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	89 83       	std	Y+1, r24	; 0x01
		default : /**Error*/ break ;
		}
	return L_u8PinVal ;
    120a:	89 81       	ldd	r24, Y+1	; 0x01
}
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	cf 91       	pop	r28
    1216:	df 91       	pop	r29
    1218:	08 95       	ret

0000121a <MDIO_voidClrPinVal>:

void MDIO_voidClrPinVal (u8 A_u8PortNo , u8 A_u8PinNo)
{
    121a:	df 93       	push	r29
    121c:	cf 93       	push	r28
    121e:	00 d0       	rcall	.+0      	; 0x1220 <MDIO_voidClrPinVal+0x6>
    1220:	00 d0       	rcall	.+0      	; 0x1222 <MDIO_voidClrPinVal+0x8>
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    1226:	89 83       	std	Y+1, r24	; 0x01
    1228:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortNo)
    122a:	89 81       	ldd	r24, Y+1	; 0x01
    122c:	28 2f       	mov	r18, r24
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	3c 83       	std	Y+4, r19	; 0x04
    1232:	2b 83       	std	Y+3, r18	; 0x03
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	9c 81       	ldd	r25, Y+4	; 0x04
    1238:	82 30       	cpi	r24, 0x02	; 2
    123a:	91 05       	cpc	r25, r1
    123c:	61 f1       	breq	.+88     	; 0x1296 <MDIO_voidClrPinVal+0x7c>
    123e:	2b 81       	ldd	r18, Y+3	; 0x03
    1240:	3c 81       	ldd	r19, Y+4	; 0x04
    1242:	23 30       	cpi	r18, 0x03	; 3
    1244:	31 05       	cpc	r19, r1
    1246:	34 f4       	brge	.+12     	; 0x1254 <MDIO_voidClrPinVal+0x3a>
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	9c 81       	ldd	r25, Y+4	; 0x04
    124c:	81 30       	cpi	r24, 0x01	; 1
    124e:	91 05       	cpc	r25, r1
    1250:	69 f0       	breq	.+26     	; 0x126c <MDIO_voidClrPinVal+0x52>
    1252:	5f c0       	rjmp	.+190    	; 0x1312 <MDIO_voidClrPinVal+0xf8>
    1254:	2b 81       	ldd	r18, Y+3	; 0x03
    1256:	3c 81       	ldd	r19, Y+4	; 0x04
    1258:	23 30       	cpi	r18, 0x03	; 3
    125a:	31 05       	cpc	r19, r1
    125c:	89 f1       	breq	.+98     	; 0x12c0 <MDIO_voidClrPinVal+0xa6>
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	9c 81       	ldd	r25, Y+4	; 0x04
    1262:	84 30       	cpi	r24, 0x04	; 4
    1264:	91 05       	cpc	r25, r1
    1266:	09 f4       	brne	.+2      	; 0x126a <MDIO_voidClrPinVal+0x50>
    1268:	40 c0       	rjmp	.+128    	; 0x12ea <MDIO_voidClrPinVal+0xd0>
    126a:	53 c0       	rjmp	.+166    	; 0x1312 <MDIO_voidClrPinVal+0xf8>
		{
		case DIO_PORTA : CLR_BIT(PORTA , A_u8PinNo) ; break ;
    126c:	ab e3       	ldi	r26, 0x3B	; 59
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	eb e3       	ldi	r30, 0x3B	; 59
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	48 2f       	mov	r20, r24
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	02 2e       	mov	r0, r18
    1284:	02 c0       	rjmp	.+4      	; 0x128a <MDIO_voidClrPinVal+0x70>
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	0a 94       	dec	r0
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <MDIO_voidClrPinVal+0x6c>
    128e:	80 95       	com	r24
    1290:	84 23       	and	r24, r20
    1292:	8c 93       	st	X, r24
    1294:	3e c0       	rjmp	.+124    	; 0x1312 <MDIO_voidClrPinVal+0xf8>
		case DIO_PORTB : CLR_BIT(PORTB , A_u8PinNo) ; break ;
    1296:	a8 e3       	ldi	r26, 0x38	; 56
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	e8 e3       	ldi	r30, 0x38	; 56
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	48 2f       	mov	r20, r24
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	02 2e       	mov	r0, r18
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <MDIO_voidClrPinVal+0x9a>
    12b0:	88 0f       	add	r24, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	0a 94       	dec	r0
    12b6:	e2 f7       	brpl	.-8      	; 0x12b0 <MDIO_voidClrPinVal+0x96>
    12b8:	80 95       	com	r24
    12ba:	84 23       	and	r24, r20
    12bc:	8c 93       	st	X, r24
    12be:	29 c0       	rjmp	.+82     	; 0x1312 <MDIO_voidClrPinVal+0xf8>
		case DIO_PORTC : CLR_BIT(PORTC , A_u8PinNo) ; break ;
    12c0:	a5 e3       	ldi	r26, 0x35	; 53
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	e5 e3       	ldi	r30, 0x35	; 53
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	48 2f       	mov	r20, r24
    12cc:	8a 81       	ldd	r24, Y+2	; 0x02
    12ce:	28 2f       	mov	r18, r24
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	02 2e       	mov	r0, r18
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <MDIO_voidClrPinVal+0xc4>
    12da:	88 0f       	add	r24, r24
    12dc:	99 1f       	adc	r25, r25
    12de:	0a 94       	dec	r0
    12e0:	e2 f7       	brpl	.-8      	; 0x12da <MDIO_voidClrPinVal+0xc0>
    12e2:	80 95       	com	r24
    12e4:	84 23       	and	r24, r20
    12e6:	8c 93       	st	X, r24
    12e8:	14 c0       	rjmp	.+40     	; 0x1312 <MDIO_voidClrPinVal+0xf8>
		case DIO_PORTD : CLR_BIT(PORTD , A_u8PinNo) ; break ;
    12ea:	a2 e3       	ldi	r26, 0x32	; 50
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	e2 e3       	ldi	r30, 0x32	; 50
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	48 2f       	mov	r20, r24
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	02 2e       	mov	r0, r18
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <MDIO_voidClrPinVal+0xee>
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	0a 94       	dec	r0
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <MDIO_voidClrPinVal+0xea>
    130c:	80 95       	com	r24
    130e:	84 23       	and	r24, r20
    1310:	8c 93       	st	X, r24
		default : /**Error*/ break ;
		}
}
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	cf 91       	pop	r28
    131c:	df 91       	pop	r29
    131e:	08 95       	ret

00001320 <MDIO_voidClrPort>:

void MDIO_voidClrPort (u8 A_u8PortNo)
{
    1320:	df 93       	push	r29
    1322:	cf 93       	push	r28
    1324:	00 d0       	rcall	.+0      	; 0x1326 <MDIO_voidClrPort+0x6>
    1326:	0f 92       	push	r0
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
    132c:	89 83       	std	Y+1, r24	; 0x01
	switch (A_u8PortNo)
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	3b 83       	std	Y+3, r19	; 0x03
    1336:	2a 83       	std	Y+2, r18	; 0x02
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	9b 81       	ldd	r25, Y+3	; 0x03
    133c:	82 30       	cpi	r24, 0x02	; 2
    133e:	91 05       	cpc	r25, r1
    1340:	d1 f0       	breq	.+52     	; 0x1376 <MDIO_voidClrPort+0x56>
    1342:	2a 81       	ldd	r18, Y+2	; 0x02
    1344:	3b 81       	ldd	r19, Y+3	; 0x03
    1346:	23 30       	cpi	r18, 0x03	; 3
    1348:	31 05       	cpc	r19, r1
    134a:	34 f4       	brge	.+12     	; 0x1358 <MDIO_voidClrPort+0x38>
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	9b 81       	ldd	r25, Y+3	; 0x03
    1350:	81 30       	cpi	r24, 0x01	; 1
    1352:	91 05       	cpc	r25, r1
    1354:	61 f0       	breq	.+24     	; 0x136e <MDIO_voidClrPort+0x4e>
    1356:	1a c0       	rjmp	.+52     	; 0x138c <MDIO_voidClrPort+0x6c>
    1358:	2a 81       	ldd	r18, Y+2	; 0x02
    135a:	3b 81       	ldd	r19, Y+3	; 0x03
    135c:	23 30       	cpi	r18, 0x03	; 3
    135e:	31 05       	cpc	r19, r1
    1360:	71 f0       	breq	.+28     	; 0x137e <MDIO_voidClrPort+0x5e>
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	9b 81       	ldd	r25, Y+3	; 0x03
    1366:	84 30       	cpi	r24, 0x04	; 4
    1368:	91 05       	cpc	r25, r1
    136a:	69 f0       	breq	.+26     	; 0x1386 <MDIO_voidClrPort+0x66>
    136c:	0f c0       	rjmp	.+30     	; 0x138c <MDIO_voidClrPort+0x6c>
		{
		case DIO_PORTA : PORTA = ALL_PINS_ZERO ; break ;
    136e:	eb e3       	ldi	r30, 0x3B	; 59
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	10 82       	st	Z, r1
    1374:	0b c0       	rjmp	.+22     	; 0x138c <MDIO_voidClrPort+0x6c>
		case DIO_PORTB : PORTB = ALL_PINS_ZERO ; break ;
    1376:	e8 e3       	ldi	r30, 0x38	; 56
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	10 82       	st	Z, r1
    137c:	07 c0       	rjmp	.+14     	; 0x138c <MDIO_voidClrPort+0x6c>
		case DIO_PORTC : PORTC = ALL_PINS_ZERO ; break ;
    137e:	e5 e3       	ldi	r30, 0x35	; 53
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	10 82       	st	Z, r1
    1384:	03 c0       	rjmp	.+6      	; 0x138c <MDIO_voidClrPort+0x6c>
		case DIO_PORTD : PORTD = ALL_PINS_ZERO ; break ;
    1386:	e2 e3       	ldi	r30, 0x32	; 50
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	10 82       	st	Z, r1
		default : /**Error*/ break ;
		}
}
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	08 95       	ret

00001398 <MDIO_voidTogPinVal>:

void MDIO_voidTogPinVal (u8 A_u8PortNo , u8 A_u8PinNo)
{
    1398:	df 93       	push	r29
    139a:	cf 93       	push	r28
    139c:	00 d0       	rcall	.+0      	; 0x139e <MDIO_voidTogPinVal+0x6>
    139e:	00 d0       	rcall	.+0      	; 0x13a0 <MDIO_voidTogPinVal+0x8>
    13a0:	cd b7       	in	r28, 0x3d	; 61
    13a2:	de b7       	in	r29, 0x3e	; 62
    13a4:	89 83       	std	Y+1, r24	; 0x01
    13a6:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortNo)
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	28 2f       	mov	r18, r24
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	3c 83       	std	Y+4, r19	; 0x04
    13b0:	2b 83       	std	Y+3, r18	; 0x03
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	9c 81       	ldd	r25, Y+4	; 0x04
    13b6:	82 30       	cpi	r24, 0x02	; 2
    13b8:	91 05       	cpc	r25, r1
    13ba:	51 f1       	breq	.+84     	; 0x1410 <MDIO_voidTogPinVal+0x78>
    13bc:	2b 81       	ldd	r18, Y+3	; 0x03
    13be:	3c 81       	ldd	r19, Y+4	; 0x04
    13c0:	23 30       	cpi	r18, 0x03	; 3
    13c2:	31 05       	cpc	r19, r1
    13c4:	34 f4       	brge	.+12     	; 0x13d2 <MDIO_voidTogPinVal+0x3a>
    13c6:	8b 81       	ldd	r24, Y+3	; 0x03
    13c8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ca:	81 30       	cpi	r24, 0x01	; 1
    13cc:	91 05       	cpc	r25, r1
    13ce:	61 f0       	breq	.+24     	; 0x13e8 <MDIO_voidTogPinVal+0x50>
    13d0:	5a c0       	rjmp	.+180    	; 0x1486 <MDIO_voidTogPinVal+0xee>
    13d2:	2b 81       	ldd	r18, Y+3	; 0x03
    13d4:	3c 81       	ldd	r19, Y+4	; 0x04
    13d6:	23 30       	cpi	r18, 0x03	; 3
    13d8:	31 05       	cpc	r19, r1
    13da:	71 f1       	breq	.+92     	; 0x1438 <MDIO_voidTogPinVal+0xa0>
    13dc:	8b 81       	ldd	r24, Y+3	; 0x03
    13de:	9c 81       	ldd	r25, Y+4	; 0x04
    13e0:	84 30       	cpi	r24, 0x04	; 4
    13e2:	91 05       	cpc	r25, r1
    13e4:	e9 f1       	breq	.+122    	; 0x1460 <MDIO_voidTogPinVal+0xc8>
    13e6:	4f c0       	rjmp	.+158    	; 0x1486 <MDIO_voidTogPinVal+0xee>
		{
		case DIO_PORTA : TOG_BIT(PORTA , A_u8PinNo) ; break ;
    13e8:	ab e3       	ldi	r26, 0x3B	; 59
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	eb e3       	ldi	r30, 0x3B	; 59
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	48 2f       	mov	r20, r24
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	28 2f       	mov	r18, r24
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	02 2e       	mov	r0, r18
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <MDIO_voidTogPinVal+0x6e>
    1402:	88 0f       	add	r24, r24
    1404:	99 1f       	adc	r25, r25
    1406:	0a 94       	dec	r0
    1408:	e2 f7       	brpl	.-8      	; 0x1402 <MDIO_voidTogPinVal+0x6a>
    140a:	84 27       	eor	r24, r20
    140c:	8c 93       	st	X, r24
    140e:	3b c0       	rjmp	.+118    	; 0x1486 <MDIO_voidTogPinVal+0xee>
		case DIO_PORTB : TOG_BIT(PORTB , A_u8PinNo) ; break ;
    1410:	a8 e3       	ldi	r26, 0x38	; 56
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e8 e3       	ldi	r30, 0x38	; 56
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	48 2f       	mov	r20, r24
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	02 2e       	mov	r0, r18
    1428:	02 c0       	rjmp	.+4      	; 0x142e <MDIO_voidTogPinVal+0x96>
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	0a 94       	dec	r0
    1430:	e2 f7       	brpl	.-8      	; 0x142a <MDIO_voidTogPinVal+0x92>
    1432:	84 27       	eor	r24, r20
    1434:	8c 93       	st	X, r24
    1436:	27 c0       	rjmp	.+78     	; 0x1486 <MDIO_voidTogPinVal+0xee>
		case DIO_PORTC : TOG_BIT(PORTC , A_u8PinNo) ; break ;
    1438:	a5 e3       	ldi	r26, 0x35	; 53
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	e5 e3       	ldi	r30, 0x35	; 53
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	48 2f       	mov	r20, r24
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	02 2e       	mov	r0, r18
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <MDIO_voidTogPinVal+0xbe>
    1452:	88 0f       	add	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	0a 94       	dec	r0
    1458:	e2 f7       	brpl	.-8      	; 0x1452 <MDIO_voidTogPinVal+0xba>
    145a:	84 27       	eor	r24, r20
    145c:	8c 93       	st	X, r24
    145e:	13 c0       	rjmp	.+38     	; 0x1486 <MDIO_voidTogPinVal+0xee>
		case DIO_PORTD : TOG_BIT(PORTD , A_u8PinNo) ; break ;
    1460:	a2 e3       	ldi	r26, 0x32	; 50
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	e2 e3       	ldi	r30, 0x32	; 50
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	48 2f       	mov	r20, r24
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	02 2e       	mov	r0, r18
    1478:	02 c0       	rjmp	.+4      	; 0x147e <MDIO_voidTogPinVal+0xe6>
    147a:	88 0f       	add	r24, r24
    147c:	99 1f       	adc	r25, r25
    147e:	0a 94       	dec	r0
    1480:	e2 f7       	brpl	.-8      	; 0x147a <MDIO_voidTogPinVal+0xe2>
    1482:	84 27       	eor	r24, r20
    1484:	8c 93       	st	X, r24
		default : /**Error*/ break ;
		}
}
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	cf 91       	pop	r28
    1490:	df 91       	pop	r29
    1492:	08 95       	ret

00001494 <MDIO_voidTogPort>:

void MDIO_voidTogPort (u8 A_u8PortNo)
{
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	00 d0       	rcall	.+0      	; 0x149a <MDIO_voidTogPort+0x6>
    149a:	0f 92       	push	r0
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	89 83       	std	Y+1, r24	; 0x01
	switch (A_u8PortNo)
    14a2:	89 81       	ldd	r24, Y+1	; 0x01
    14a4:	28 2f       	mov	r18, r24
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	3b 83       	std	Y+3, r19	; 0x03
    14aa:	2a 83       	std	Y+2, r18	; 0x02
    14ac:	8a 81       	ldd	r24, Y+2	; 0x02
    14ae:	9b 81       	ldd	r25, Y+3	; 0x03
    14b0:	82 30       	cpi	r24, 0x02	; 2
    14b2:	91 05       	cpc	r25, r1
    14b4:	f1 f0       	breq	.+60     	; 0x14f2 <MDIO_voidTogPort+0x5e>
    14b6:	2a 81       	ldd	r18, Y+2	; 0x02
    14b8:	3b 81       	ldd	r19, Y+3	; 0x03
    14ba:	23 30       	cpi	r18, 0x03	; 3
    14bc:	31 05       	cpc	r19, r1
    14be:	34 f4       	brge	.+12     	; 0x14cc <MDIO_voidTogPort+0x38>
    14c0:	8a 81       	ldd	r24, Y+2	; 0x02
    14c2:	9b 81       	ldd	r25, Y+3	; 0x03
    14c4:	81 30       	cpi	r24, 0x01	; 1
    14c6:	91 05       	cpc	r25, r1
    14c8:	61 f0       	breq	.+24     	; 0x14e2 <MDIO_voidTogPort+0x4e>
    14ca:	2a c0       	rjmp	.+84     	; 0x1520 <MDIO_voidTogPort+0x8c>
    14cc:	2a 81       	ldd	r18, Y+2	; 0x02
    14ce:	3b 81       	ldd	r19, Y+3	; 0x03
    14d0:	23 30       	cpi	r18, 0x03	; 3
    14d2:	31 05       	cpc	r19, r1
    14d4:	b1 f0       	breq	.+44     	; 0x1502 <MDIO_voidTogPort+0x6e>
    14d6:	8a 81       	ldd	r24, Y+2	; 0x02
    14d8:	9b 81       	ldd	r25, Y+3	; 0x03
    14da:	84 30       	cpi	r24, 0x04	; 4
    14dc:	91 05       	cpc	r25, r1
    14de:	c9 f0       	breq	.+50     	; 0x1512 <MDIO_voidTogPort+0x7e>
    14e0:	1f c0       	rjmp	.+62     	; 0x1520 <MDIO_voidTogPort+0x8c>
		{
		case DIO_PORTA : PORTA = ~PORTA ; break ;
    14e2:	ab e3       	ldi	r26, 0x3B	; 59
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	eb e3       	ldi	r30, 0x3B	; 59
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	80 95       	com	r24
    14ee:	8c 93       	st	X, r24
    14f0:	17 c0       	rjmp	.+46     	; 0x1520 <MDIO_voidTogPort+0x8c>
		case DIO_PORTB : PORTB = ~PORTB ; break ;
    14f2:	a8 e3       	ldi	r26, 0x38	; 56
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	e8 e3       	ldi	r30, 0x38	; 56
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	80 95       	com	r24
    14fe:	8c 93       	st	X, r24
    1500:	0f c0       	rjmp	.+30     	; 0x1520 <MDIO_voidTogPort+0x8c>
		case DIO_PORTC : PORTC = ~PORTC ; break ;
    1502:	a5 e3       	ldi	r26, 0x35	; 53
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e5 e3       	ldi	r30, 0x35	; 53
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	80 95       	com	r24
    150e:	8c 93       	st	X, r24
    1510:	07 c0       	rjmp	.+14     	; 0x1520 <MDIO_voidTogPort+0x8c>
		case DIO_PORTD : PORTD = ~PORTD ; break ;
    1512:	a2 e3       	ldi	r26, 0x32	; 50
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	e2 e3       	ldi	r30, 0x32	; 50
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	80 95       	com	r24
    151e:	8c 93       	st	X, r24
		default : /**Error*/ break ;
		}
}
    1520:	0f 90       	pop	r0
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	cf 91       	pop	r28
    1528:	df 91       	pop	r29
    152a:	08 95       	ret

0000152c <MDIO_voidWriteLowNibble>:

void MDIO_voidWriteLowNibble (u8 A_u8PortNo , u8 A_u8PortVal)
{
    152c:	df 93       	push	r29
    152e:	cf 93       	push	r28
    1530:	00 d0       	rcall	.+0      	; 0x1532 <MDIO_voidWriteLowNibble+0x6>
    1532:	00 d0       	rcall	.+0      	; 0x1534 <MDIO_voidWriteLowNibble+0x8>
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
    1538:	89 83       	std	Y+1, r24	; 0x01
    153a:	6a 83       	std	Y+2, r22	; 0x02
	A_u8PortVal = A_u8PortVal & LOW_NIBBLE_OUTPUT ;
    153c:	8a 81       	ldd	r24, Y+2	; 0x02
    153e:	8f 70       	andi	r24, 0x0F	; 15
    1540:	8a 83       	std	Y+2, r24	; 0x02
	switch (A_u8PortNo)
    1542:	89 81       	ldd	r24, Y+1	; 0x01
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	3c 83       	std	Y+4, r19	; 0x04
    154a:	2b 83       	std	Y+3, r18	; 0x03
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	9c 81       	ldd	r25, Y+4	; 0x04
    1550:	82 30       	cpi	r24, 0x02	; 2
    1552:	91 05       	cpc	r25, r1
    1554:	31 f1       	breq	.+76     	; 0x15a2 <MDIO_voidWriteLowNibble+0x76>
    1556:	2b 81       	ldd	r18, Y+3	; 0x03
    1558:	3c 81       	ldd	r19, Y+4	; 0x04
    155a:	23 30       	cpi	r18, 0x03	; 3
    155c:	31 05       	cpc	r19, r1
    155e:	34 f4       	brge	.+12     	; 0x156c <MDIO_voidWriteLowNibble+0x40>
    1560:	8b 81       	ldd	r24, Y+3	; 0x03
    1562:	9c 81       	ldd	r25, Y+4	; 0x04
    1564:	81 30       	cpi	r24, 0x01	; 1
    1566:	91 05       	cpc	r25, r1
    1568:	61 f0       	breq	.+24     	; 0x1582 <MDIO_voidWriteLowNibble+0x56>
    156a:	4a c0       	rjmp	.+148    	; 0x1600 <MDIO_voidWriteLowNibble+0xd4>
    156c:	2b 81       	ldd	r18, Y+3	; 0x03
    156e:	3c 81       	ldd	r19, Y+4	; 0x04
    1570:	23 30       	cpi	r18, 0x03	; 3
    1572:	31 05       	cpc	r19, r1
    1574:	31 f1       	breq	.+76     	; 0x15c2 <MDIO_voidWriteLowNibble+0x96>
    1576:	8b 81       	ldd	r24, Y+3	; 0x03
    1578:	9c 81       	ldd	r25, Y+4	; 0x04
    157a:	84 30       	cpi	r24, 0x04	; 4
    157c:	91 05       	cpc	r25, r1
    157e:	89 f1       	breq	.+98     	; 0x15e2 <MDIO_voidWriteLowNibble+0xb6>
    1580:	3f c0       	rjmp	.+126    	; 0x1600 <MDIO_voidWriteLowNibble+0xd4>
		{
		case DIO_PORTA : PORTA = PORTA & HIGH_NIBBLE_OUTPUT ;
    1582:	ab e3       	ldi	r26, 0x3B	; 59
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	eb e3       	ldi	r30, 0x3B	; 59
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	80 7f       	andi	r24, 0xF0	; 240
    158e:	8c 93       	st	X, r24
						 PORTA = PORTA | A_u8PortVal        ;
    1590:	ab e3       	ldi	r26, 0x3B	; 59
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	eb e3       	ldi	r30, 0x3B	; 59
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	90 81       	ld	r25, Z
    159a:	8a 81       	ldd	r24, Y+2	; 0x02
    159c:	89 2b       	or	r24, r25
    159e:	8c 93       	st	X, r24
    15a0:	2f c0       	rjmp	.+94     	; 0x1600 <MDIO_voidWriteLowNibble+0xd4>
		                 break ;                        
		case DIO_PORTB : PORTB = PORTB & HIGH_NIBBLE_OUTPUT ;
    15a2:	a8 e3       	ldi	r26, 0x38	; 56
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e8 e3       	ldi	r30, 0x38	; 56
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	80 7f       	andi	r24, 0xF0	; 240
    15ae:	8c 93       	st	X, r24
						 PORTB = PORTB | A_u8PortVal        ;		
    15b0:	a8 e3       	ldi	r26, 0x38	; 56
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	e8 e3       	ldi	r30, 0x38	; 56
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	90 81       	ld	r25, Z
    15ba:	8a 81       	ldd	r24, Y+2	; 0x02
    15bc:	89 2b       	or	r24, r25
    15be:	8c 93       	st	X, r24
    15c0:	1f c0       	rjmp	.+62     	; 0x1600 <MDIO_voidWriteLowNibble+0xd4>
		                 break ;                        
		case DIO_PORTC : PORTC = PORTC & HIGH_NIBBLE_OUTPUT ; 
    15c2:	a5 e3       	ldi	r26, 0x35	; 53
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e5 e3       	ldi	r30, 0x35	; 53
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	80 7f       	andi	r24, 0xF0	; 240
    15ce:	8c 93       	st	X, r24
						 PORTC = PORTC | A_u8PortVal        ;		
    15d0:	a5 e3       	ldi	r26, 0x35	; 53
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	e5 e3       	ldi	r30, 0x35	; 53
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	90 81       	ld	r25, Z
    15da:	8a 81       	ldd	r24, Y+2	; 0x02
    15dc:	89 2b       	or	r24, r25
    15de:	8c 93       	st	X, r24
    15e0:	0f c0       	rjmp	.+30     	; 0x1600 <MDIO_voidWriteLowNibble+0xd4>
		                 break ;                        
		case DIO_PORTD : PORTD = PORTD & HIGH_NIBBLE_OUTPUT ;
    15e2:	a2 e3       	ldi	r26, 0x32	; 50
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	e2 e3       	ldi	r30, 0x32	; 50
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	80 7f       	andi	r24, 0xF0	; 240
    15ee:	8c 93       	st	X, r24
						 PORTD = PORTD | A_u8PortVal        ;		
    15f0:	a2 e3       	ldi	r26, 0x32	; 50
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	e2 e3       	ldi	r30, 0x32	; 50
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	90 81       	ld	r25, Z
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	89 2b       	or	r24, r25
    15fe:	8c 93       	st	X, r24
		                 break ;
		default : /**Error*/ break ;
		}
}
    1600:	0f 90       	pop	r0
    1602:	0f 90       	pop	r0
    1604:	0f 90       	pop	r0
    1606:	0f 90       	pop	r0
    1608:	cf 91       	pop	r28
    160a:	df 91       	pop	r29
    160c:	08 95       	ret

0000160e <MDIO_voidWriteHighNibble>:

void MDIO_voidWriteHighNibble (u8 A_u8PortNo , u8 A_u8PortVal)
{
    160e:	df 93       	push	r29
    1610:	cf 93       	push	r28
    1612:	00 d0       	rcall	.+0      	; 0x1614 <MDIO_voidWriteHighNibble+0x6>
    1614:	00 d0       	rcall	.+0      	; 0x1616 <MDIO_voidWriteHighNibble+0x8>
    1616:	cd b7       	in	r28, 0x3d	; 61
    1618:	de b7       	in	r29, 0x3e	; 62
    161a:	89 83       	std	Y+1, r24	; 0x01
    161c:	6a 83       	std	Y+2, r22	; 0x02
	A_u8PortVal = A_u8PortVal << FOUR_BITS ;
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	82 95       	swap	r24
    1622:	80 7f       	andi	r24, 0xF0	; 240
    1624:	8a 83       	std	Y+2, r24	; 0x02
	switch (A_u8PortNo)
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	28 2f       	mov	r18, r24
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	3c 83       	std	Y+4, r19	; 0x04
    162e:	2b 83       	std	Y+3, r18	; 0x03
    1630:	8b 81       	ldd	r24, Y+3	; 0x03
    1632:	9c 81       	ldd	r25, Y+4	; 0x04
    1634:	82 30       	cpi	r24, 0x02	; 2
    1636:	91 05       	cpc	r25, r1
    1638:	31 f1       	breq	.+76     	; 0x1686 <MDIO_voidWriteHighNibble+0x78>
    163a:	2b 81       	ldd	r18, Y+3	; 0x03
    163c:	3c 81       	ldd	r19, Y+4	; 0x04
    163e:	23 30       	cpi	r18, 0x03	; 3
    1640:	31 05       	cpc	r19, r1
    1642:	34 f4       	brge	.+12     	; 0x1650 <MDIO_voidWriteHighNibble+0x42>
    1644:	8b 81       	ldd	r24, Y+3	; 0x03
    1646:	9c 81       	ldd	r25, Y+4	; 0x04
    1648:	81 30       	cpi	r24, 0x01	; 1
    164a:	91 05       	cpc	r25, r1
    164c:	61 f0       	breq	.+24     	; 0x1666 <MDIO_voidWriteHighNibble+0x58>
    164e:	4a c0       	rjmp	.+148    	; 0x16e4 <MDIO_voidWriteHighNibble+0xd6>
    1650:	2b 81       	ldd	r18, Y+3	; 0x03
    1652:	3c 81       	ldd	r19, Y+4	; 0x04
    1654:	23 30       	cpi	r18, 0x03	; 3
    1656:	31 05       	cpc	r19, r1
    1658:	31 f1       	breq	.+76     	; 0x16a6 <MDIO_voidWriteHighNibble+0x98>
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	9c 81       	ldd	r25, Y+4	; 0x04
    165e:	84 30       	cpi	r24, 0x04	; 4
    1660:	91 05       	cpc	r25, r1
    1662:	89 f1       	breq	.+98     	; 0x16c6 <MDIO_voidWriteHighNibble+0xb8>
    1664:	3f c0       	rjmp	.+126    	; 0x16e4 <MDIO_voidWriteHighNibble+0xd6>
		{
		case DIO_PORTA : PORTA = PORTA & LOW_NIBBLE_OUTPUT ; 
    1666:	ab e3       	ldi	r26, 0x3B	; 59
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	eb e3       	ldi	r30, 0x3B	; 59
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	8f 70       	andi	r24, 0x0F	; 15
    1672:	8c 93       	st	X, r24
						 PORTA = PORTA | A_u8PortVal       ;
    1674:	ab e3       	ldi	r26, 0x3B	; 59
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	eb e3       	ldi	r30, 0x3B	; 59
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	90 81       	ld	r25, Z
    167e:	8a 81       	ldd	r24, Y+2	; 0x02
    1680:	89 2b       	or	r24, r25
    1682:	8c 93       	st	X, r24
    1684:	2f c0       	rjmp	.+94     	; 0x16e4 <MDIO_voidWriteHighNibble+0xd6>
		                 break ;                      
		case DIO_PORTB : PORTB = PORTB & LOW_NIBBLE_OUTPUT ; 
    1686:	a8 e3       	ldi	r26, 0x38	; 56
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	e8 e3       	ldi	r30, 0x38	; 56
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	8f 70       	andi	r24, 0x0F	; 15
    1692:	8c 93       	st	X, r24
						 PORTB = PORTB | A_u8PortVal       ;
    1694:	a8 e3       	ldi	r26, 0x38	; 56
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	e8 e3       	ldi	r30, 0x38	; 56
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	90 81       	ld	r25, Z
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	89 2b       	or	r24, r25
    16a2:	8c 93       	st	X, r24
    16a4:	1f c0       	rjmp	.+62     	; 0x16e4 <MDIO_voidWriteHighNibble+0xd6>
		                 break ;               
		case DIO_PORTC : PORTC = PORTC & LOW_NIBBLE_OUTPUT ; 
    16a6:	a5 e3       	ldi	r26, 0x35	; 53
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	e5 e3       	ldi	r30, 0x35	; 53
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	8f 70       	andi	r24, 0x0F	; 15
    16b2:	8c 93       	st	X, r24
						 PORTC = PORTC | A_u8PortVal       ;
    16b4:	a5 e3       	ldi	r26, 0x35	; 53
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	e5 e3       	ldi	r30, 0x35	; 53
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	90 81       	ld	r25, Z
    16be:	8a 81       	ldd	r24, Y+2	; 0x02
    16c0:	89 2b       	or	r24, r25
    16c2:	8c 93       	st	X, r24
    16c4:	0f c0       	rjmp	.+30     	; 0x16e4 <MDIO_voidWriteHighNibble+0xd6>
		                 break ;                        
		case DIO_PORTD : PORTD = PORTD & LOW_NIBBLE_OUTPUT ;
    16c6:	a2 e3       	ldi	r26, 0x32	; 50
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	e2 e3       	ldi	r30, 0x32	; 50
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	8f 70       	andi	r24, 0x0F	; 15
    16d2:	8c 93       	st	X, r24
						 PORTD = PORTD | A_u8PortVal       ;
    16d4:	a2 e3       	ldi	r26, 0x32	; 50
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	e2 e3       	ldi	r30, 0x32	; 50
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	90 81       	ld	r25, Z
    16de:	8a 81       	ldd	r24, Y+2	; 0x02
    16e0:	89 2b       	or	r24, r25
    16e2:	8c 93       	st	X, r24
		                 break ;
		default : /**Error*/ break ;
		}
}
    16e4:	0f 90       	pop	r0
    16e6:	0f 90       	pop	r0
    16e8:	0f 90       	pop	r0
    16ea:	0f 90       	pop	r0
    16ec:	cf 91       	pop	r28
    16ee:	df 91       	pop	r29
    16f0:	08 95       	ret

000016f2 <MDIO_voidConnectPullup>:

void MDIO_voidConnectPullup(u8 A_u8PortNo ,u8 A_u8PinNo, u8 A_u8ConnectPullup)
{
    16f2:	df 93       	push	r29
    16f4:	cf 93       	push	r28
    16f6:	00 d0       	rcall	.+0      	; 0x16f8 <MDIO_voidConnectPullup+0x6>
    16f8:	00 d0       	rcall	.+0      	; 0x16fa <MDIO_voidConnectPullup+0x8>
    16fa:	0f 92       	push	r0
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
    1700:	89 83       	std	Y+1, r24	; 0x01
    1702:	6a 83       	std	Y+2, r22	; 0x02
    1704:	4b 83       	std	Y+3, r20	; 0x03
	switch (A_u8ConnectPullup)
    1706:	8b 81       	ldd	r24, Y+3	; 0x03
    1708:	28 2f       	mov	r18, r24
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	3d 83       	std	Y+5, r19	; 0x05
    170e:	2c 83       	std	Y+4, r18	; 0x04
    1710:	8c 81       	ldd	r24, Y+4	; 0x04
    1712:	9d 81       	ldd	r25, Y+5	; 0x05
    1714:	81 30       	cpi	r24, 0x01	; 1
    1716:	91 05       	cpc	r25, r1
    1718:	31 f0       	breq	.+12     	; 0x1726 <MDIO_voidConnectPullup+0x34>
    171a:	2c 81       	ldd	r18, Y+4	; 0x04
    171c:	3d 81       	ldd	r19, Y+5	; 0x05
    171e:	22 30       	cpi	r18, 0x02	; 2
    1720:	31 05       	cpc	r19, r1
    1722:	31 f0       	breq	.+12     	; 0x1730 <MDIO_voidConnectPullup+0x3e>
    1724:	09 c0       	rjmp	.+18     	; 0x1738 <MDIO_voidConnectPullup+0x46>
	{
	case ENABLE_PULLUP  : MDIO_voidSetPinVal (A_u8PortNo , A_u8PinNo) ;break ;
    1726:	89 81       	ldd	r24, Y+1	; 0x01
    1728:	6a 81       	ldd	r22, Y+2	; 0x02
    172a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MDIO_voidSetPinVal>
    172e:	04 c0       	rjmp	.+8      	; 0x1738 <MDIO_voidConnectPullup+0x46>
	case DISABLE_PULLUP : MDIO_voidClrPinVal (A_u8PortNo , A_u8PinNo) ;break ;
    1730:	89 81       	ldd	r24, Y+1	; 0x01
    1732:	6a 81       	ldd	r22, Y+2	; 0x02
    1734:	0e 94 0d 09 	call	0x121a	; 0x121a <MDIO_voidClrPinVal>
	default : /**Error*/ break ;
	}
}
    1738:	0f 90       	pop	r0
    173a:	0f 90       	pop	r0
    173c:	0f 90       	pop	r0
    173e:	0f 90       	pop	r0
    1740:	0f 90       	pop	r0
    1742:	cf 91       	pop	r28
    1744:	df 91       	pop	r29
    1746:	08 95       	ret

00001748 <HLCD_voidSendCmd>:
#include <util/delay.h>
#include "LCD_conf.h"
#include "LCD_private.h"

void HLCD_voidSendCmd(u8 A_u8CmdID)
{
    1748:	0f 93       	push	r16
    174a:	1f 93       	push	r17
    174c:	df 93       	push	r29
    174e:	cf 93       	push	r28
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
    1754:	c7 54       	subi	r28, 0x47	; 71
    1756:	d0 40       	sbci	r29, 0x00	; 0
    1758:	0f b6       	in	r0, 0x3f	; 63
    175a:	f8 94       	cli
    175c:	de bf       	out	0x3e, r29	; 62
    175e:	0f be       	out	0x3f, r0	; 63
    1760:	cd bf       	out	0x3d, r28	; 61
    1762:	fe 01       	movw	r30, r28
    1764:	e9 5b       	subi	r30, 0xB9	; 185
    1766:	ff 4f       	sbci	r31, 0xFF	; 255
    1768:	80 83       	st	Z, r24
	    _delay_ms (2) ;
	
	#elif MODE == FOUR_BIT_CONNECTION
	
	    /**set read/write to low */
	    MDIO_voidClrPinVal  (LCD_RW_PORT , LCD_RW_PIN ) ;
    176a:	84 e0       	ldi	r24, 0x04	; 4
    176c:	62 e0       	ldi	r22, 0x02	; 2
    176e:	0e 94 0d 09 	call	0x121a	; 0x121a <MDIO_voidClrPinVal>
	    
	    /**send last four bits of data to last four bit at control register */
	    MDIO_voidWriteHighNibble (LCD_DATA_PORT , A_u8CmdID >> FOUR_BITS) ;
    1772:	fe 01       	movw	r30, r28
    1774:	e9 5b       	subi	r30, 0xB9	; 185
    1776:	ff 4f       	sbci	r31, 0xFF	; 255
    1778:	80 81       	ld	r24, Z
    177a:	98 2f       	mov	r25, r24
    177c:	92 95       	swap	r25
    177e:	9f 70       	andi	r25, 0x0F	; 15
    1780:	84 e0       	ldi	r24, 0x04	; 4
    1782:	69 2f       	mov	r22, r25
    1784:	0e 94 07 0b 	call	0x160e	; 0x160e <MDIO_voidWriteHighNibble>
	    
	    /**set register select to low */
	    MDIO_voidClrPinVal  (LCD_RS_PORT , LCD_RS_PIN ) ;
    1788:	84 e0       	ldi	r24, 0x04	; 4
    178a:	61 e0       	ldi	r22, 0x01	; 1
    178c:	0e 94 0d 09 	call	0x121a	; 0x121a <MDIO_voidClrPinVal>
	    
	    /**set enable to high */
	    MDIO_voidSetPinVal  (LCD_EN_PORT , LCD_EN_PIN ) ;
    1790:	84 e0       	ldi	r24, 0x04	; 4
    1792:	63 e0       	ldi	r22, 0x03	; 3
    1794:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MDIO_voidSetPinVal>
    1798:	fe 01       	movw	r30, r28
    179a:	ed 5b       	subi	r30, 0xBD	; 189
    179c:	ff 4f       	sbci	r31, 0xFF	; 255
    179e:	80 e0       	ldi	r24, 0x00	; 0
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	a0 e0       	ldi	r26, 0x00	; 0
    17a4:	b0 e4       	ldi	r27, 0x40	; 64
    17a6:	80 83       	st	Z, r24
    17a8:	91 83       	std	Z+1, r25	; 0x01
    17aa:	a2 83       	std	Z+2, r26	; 0x02
    17ac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ae:	8e 01       	movw	r16, r28
    17b0:	01 5c       	subi	r16, 0xC1	; 193
    17b2:	1f 4f       	sbci	r17, 0xFF	; 255
    17b4:	fe 01       	movw	r30, r28
    17b6:	ed 5b       	subi	r30, 0xBD	; 189
    17b8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ba:	60 81       	ld	r22, Z
    17bc:	71 81       	ldd	r23, Z+1	; 0x01
    17be:	82 81       	ldd	r24, Z+2	; 0x02
    17c0:	93 81       	ldd	r25, Z+3	; 0x03
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	4a ef       	ldi	r20, 0xFA	; 250
    17c8:	54 e4       	ldi	r21, 0x44	; 68
    17ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17ce:	dc 01       	movw	r26, r24
    17d0:	cb 01       	movw	r24, r22
    17d2:	f8 01       	movw	r30, r16
    17d4:	80 83       	st	Z, r24
    17d6:	91 83       	std	Z+1, r25	; 0x01
    17d8:	a2 83       	std	Z+2, r26	; 0x02
    17da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17dc:	fe 01       	movw	r30, r28
    17de:	ff 96       	adiw	r30, 0x3f	; 63
    17e0:	60 81       	ld	r22, Z
    17e2:	71 81       	ldd	r23, Z+1	; 0x01
    17e4:	82 81       	ldd	r24, Z+2	; 0x02
    17e6:	93 81       	ldd	r25, Z+3	; 0x03
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	40 e8       	ldi	r20, 0x80	; 128
    17ee:	5f e3       	ldi	r21, 0x3F	; 63
    17f0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17f4:	88 23       	and	r24, r24
    17f6:	2c f4       	brge	.+10     	; 0x1802 <HLCD_voidSendCmd+0xba>
		__ticks = 1;
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	9e af       	std	Y+62, r25	; 0x3e
    17fe:	8d af       	std	Y+61, r24	; 0x3d
    1800:	46 c0       	rjmp	.+140    	; 0x188e <HLCD_voidSendCmd+0x146>
	else if (__tmp > 65535)
    1802:	fe 01       	movw	r30, r28
    1804:	ff 96       	adiw	r30, 0x3f	; 63
    1806:	60 81       	ld	r22, Z
    1808:	71 81       	ldd	r23, Z+1	; 0x01
    180a:	82 81       	ldd	r24, Z+2	; 0x02
    180c:	93 81       	ldd	r25, Z+3	; 0x03
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	3f ef       	ldi	r19, 0xFF	; 255
    1812:	4f e7       	ldi	r20, 0x7F	; 127
    1814:	57 e4       	ldi	r21, 0x47	; 71
    1816:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    181a:	18 16       	cp	r1, r24
    181c:	64 f5       	brge	.+88     	; 0x1876 <HLCD_voidSendCmd+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    181e:	fe 01       	movw	r30, r28
    1820:	ed 5b       	subi	r30, 0xBD	; 189
    1822:	ff 4f       	sbci	r31, 0xFF	; 255
    1824:	60 81       	ld	r22, Z
    1826:	71 81       	ldd	r23, Z+1	; 0x01
    1828:	82 81       	ldd	r24, Z+2	; 0x02
    182a:	93 81       	ldd	r25, Z+3	; 0x03
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	40 e2       	ldi	r20, 0x20	; 32
    1832:	51 e4       	ldi	r21, 0x41	; 65
    1834:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	bc 01       	movw	r22, r24
    183e:	cd 01       	movw	r24, r26
    1840:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1844:	dc 01       	movw	r26, r24
    1846:	cb 01       	movw	r24, r22
    1848:	9e af       	std	Y+62, r25	; 0x3e
    184a:	8d af       	std	Y+61, r24	; 0x3d
    184c:	0f c0       	rjmp	.+30     	; 0x186c <HLCD_voidSendCmd+0x124>
    184e:	88 ec       	ldi	r24, 0xC8	; 200
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	9c af       	std	Y+60, r25	; 0x3c
    1854:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1856:	8b ad       	ldd	r24, Y+59	; 0x3b
    1858:	9c ad       	ldd	r25, Y+60	; 0x3c
    185a:	01 97       	sbiw	r24, 0x01	; 1
    185c:	f1 f7       	brne	.-4      	; 0x185a <HLCD_voidSendCmd+0x112>
    185e:	9c af       	std	Y+60, r25	; 0x3c
    1860:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1862:	8d ad       	ldd	r24, Y+61	; 0x3d
    1864:	9e ad       	ldd	r25, Y+62	; 0x3e
    1866:	01 97       	sbiw	r24, 0x01	; 1
    1868:	9e af       	std	Y+62, r25	; 0x3e
    186a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    186c:	8d ad       	ldd	r24, Y+61	; 0x3d
    186e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1870:	00 97       	sbiw	r24, 0x00	; 0
    1872:	69 f7       	brne	.-38     	; 0x184e <HLCD_voidSendCmd+0x106>
    1874:	16 c0       	rjmp	.+44     	; 0x18a2 <HLCD_voidSendCmd+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1876:	fe 01       	movw	r30, r28
    1878:	ff 96       	adiw	r30, 0x3f	; 63
    187a:	60 81       	ld	r22, Z
    187c:	71 81       	ldd	r23, Z+1	; 0x01
    187e:	82 81       	ldd	r24, Z+2	; 0x02
    1880:	93 81       	ldd	r25, Z+3	; 0x03
    1882:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1886:	dc 01       	movw	r26, r24
    1888:	cb 01       	movw	r24, r22
    188a:	9e af       	std	Y+62, r25	; 0x3e
    188c:	8d af       	std	Y+61, r24	; 0x3d
    188e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1890:	9e ad       	ldd	r25, Y+62	; 0x3e
    1892:	9a af       	std	Y+58, r25	; 0x3a
    1894:	89 af       	std	Y+57, r24	; 0x39
    1896:	89 ad       	ldd	r24, Y+57	; 0x39
    1898:	9a ad       	ldd	r25, Y+58	; 0x3a
    189a:	01 97       	sbiw	r24, 0x01	; 1
    189c:	f1 f7       	brne	.-4      	; 0x189a <HLCD_voidSendCmd+0x152>
    189e:	9a af       	std	Y+58, r25	; 0x3a
    18a0:	89 af       	std	Y+57, r24	; 0x39
	    
	    /* Wait for E to settle */
	    _delay_ms (2) ;
	    
	    /**set enable to low */
	    MDIO_voidClrPinVal  (LCD_EN_PORT , LCD_EN_PIN ) ;
    18a2:	84 e0       	ldi	r24, 0x04	; 4
    18a4:	63 e0       	ldi	r22, 0x03	; 3
    18a6:	0e 94 0d 09 	call	0x121a	; 0x121a <MDIO_voidClrPinVal>
    18aa:	80 e0       	ldi	r24, 0x00	; 0
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	a0 e0       	ldi	r26, 0x00	; 0
    18b0:	b0 e4       	ldi	r27, 0x40	; 64
    18b2:	8d ab       	std	Y+53, r24	; 0x35
    18b4:	9e ab       	std	Y+54, r25	; 0x36
    18b6:	af ab       	std	Y+55, r26	; 0x37
    18b8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ba:	6d a9       	ldd	r22, Y+53	; 0x35
    18bc:	7e a9       	ldd	r23, Y+54	; 0x36
    18be:	8f a9       	ldd	r24, Y+55	; 0x37
    18c0:	98 ad       	ldd	r25, Y+56	; 0x38
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	4a ef       	ldi	r20, 0xFA	; 250
    18c8:	54 e4       	ldi	r21, 0x44	; 68
    18ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18ce:	dc 01       	movw	r26, r24
    18d0:	cb 01       	movw	r24, r22
    18d2:	89 ab       	std	Y+49, r24	; 0x31
    18d4:	9a ab       	std	Y+50, r25	; 0x32
    18d6:	ab ab       	std	Y+51, r26	; 0x33
    18d8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18da:	69 a9       	ldd	r22, Y+49	; 0x31
    18dc:	7a a9       	ldd	r23, Y+50	; 0x32
    18de:	8b a9       	ldd	r24, Y+51	; 0x33
    18e0:	9c a9       	ldd	r25, Y+52	; 0x34
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	40 e8       	ldi	r20, 0x80	; 128
    18e8:	5f e3       	ldi	r21, 0x3F	; 63
    18ea:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18ee:	88 23       	and	r24, r24
    18f0:	2c f4       	brge	.+10     	; 0x18fc <HLCD_voidSendCmd+0x1b4>
		__ticks = 1;
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	98 ab       	std	Y+48, r25	; 0x30
    18f8:	8f a7       	std	Y+47, r24	; 0x2f
    18fa:	3f c0       	rjmp	.+126    	; 0x197a <HLCD_voidSendCmd+0x232>
	else if (__tmp > 65535)
    18fc:	69 a9       	ldd	r22, Y+49	; 0x31
    18fe:	7a a9       	ldd	r23, Y+50	; 0x32
    1900:	8b a9       	ldd	r24, Y+51	; 0x33
    1902:	9c a9       	ldd	r25, Y+52	; 0x34
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	3f ef       	ldi	r19, 0xFF	; 255
    1908:	4f e7       	ldi	r20, 0x7F	; 127
    190a:	57 e4       	ldi	r21, 0x47	; 71
    190c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1910:	18 16       	cp	r1, r24
    1912:	4c f5       	brge	.+82     	; 0x1966 <HLCD_voidSendCmd+0x21e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1914:	6d a9       	ldd	r22, Y+53	; 0x35
    1916:	7e a9       	ldd	r23, Y+54	; 0x36
    1918:	8f a9       	ldd	r24, Y+55	; 0x37
    191a:	98 ad       	ldd	r25, Y+56	; 0x38
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	40 e2       	ldi	r20, 0x20	; 32
    1922:	51 e4       	ldi	r21, 0x41	; 65
    1924:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1928:	dc 01       	movw	r26, r24
    192a:	cb 01       	movw	r24, r22
    192c:	bc 01       	movw	r22, r24
    192e:	cd 01       	movw	r24, r26
    1930:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1934:	dc 01       	movw	r26, r24
    1936:	cb 01       	movw	r24, r22
    1938:	98 ab       	std	Y+48, r25	; 0x30
    193a:	8f a7       	std	Y+47, r24	; 0x2f
    193c:	0f c0       	rjmp	.+30     	; 0x195c <HLCD_voidSendCmd+0x214>
    193e:	88 ec       	ldi	r24, 0xC8	; 200
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	9e a7       	std	Y+46, r25	; 0x2e
    1944:	8d a7       	std	Y+45, r24	; 0x2d
    1946:	8d a5       	ldd	r24, Y+45	; 0x2d
    1948:	9e a5       	ldd	r25, Y+46	; 0x2e
    194a:	01 97       	sbiw	r24, 0x01	; 1
    194c:	f1 f7       	brne	.-4      	; 0x194a <HLCD_voidSendCmd+0x202>
    194e:	9e a7       	std	Y+46, r25	; 0x2e
    1950:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1952:	8f a5       	ldd	r24, Y+47	; 0x2f
    1954:	98 a9       	ldd	r25, Y+48	; 0x30
    1956:	01 97       	sbiw	r24, 0x01	; 1
    1958:	98 ab       	std	Y+48, r25	; 0x30
    195a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    195c:	8f a5       	ldd	r24, Y+47	; 0x2f
    195e:	98 a9       	ldd	r25, Y+48	; 0x30
    1960:	00 97       	sbiw	r24, 0x00	; 0
    1962:	69 f7       	brne	.-38     	; 0x193e <HLCD_voidSendCmd+0x1f6>
    1964:	14 c0       	rjmp	.+40     	; 0x198e <HLCD_voidSendCmd+0x246>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1966:	69 a9       	ldd	r22, Y+49	; 0x31
    1968:	7a a9       	ldd	r23, Y+50	; 0x32
    196a:	8b a9       	ldd	r24, Y+51	; 0x33
    196c:	9c a9       	ldd	r25, Y+52	; 0x34
    196e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1972:	dc 01       	movw	r26, r24
    1974:	cb 01       	movw	r24, r22
    1976:	98 ab       	std	Y+48, r25	; 0x30
    1978:	8f a7       	std	Y+47, r24	; 0x2f
    197a:	8f a5       	ldd	r24, Y+47	; 0x2f
    197c:	98 a9       	ldd	r25, Y+48	; 0x30
    197e:	9c a7       	std	Y+44, r25	; 0x2c
    1980:	8b a7       	std	Y+43, r24	; 0x2b
    1982:	8b a5       	ldd	r24, Y+43	; 0x2b
    1984:	9c a5       	ldd	r25, Y+44	; 0x2c
    1986:	01 97       	sbiw	r24, 0x01	; 1
    1988:	f1 f7       	brne	.-4      	; 0x1986 <HLCD_voidSendCmd+0x23e>
    198a:	9c a7       	std	Y+44, r25	; 0x2c
    198c:	8b a7       	std	Y+43, r24	; 0x2b
	    /* Wait for E to settle */
	    _delay_ms (2) ;
	    
	    
	    /**set read/write to low */
	    MDIO_voidClrPinVal  (LCD_RW_PORT , LCD_RW_PIN ) ;
    198e:	84 e0       	ldi	r24, 0x04	; 4
    1990:	62 e0       	ldi	r22, 0x02	; 2
    1992:	0e 94 0d 09 	call	0x121a	; 0x121a <MDIO_voidClrPinVal>
	    
	    /**send last four bits of data to last four bit at control register */
	    MDIO_voidWriteHighNibble (LCD_DATA_PORT , A_u8CmdID) ;
    1996:	fe 01       	movw	r30, r28
    1998:	e9 5b       	subi	r30, 0xB9	; 185
    199a:	ff 4f       	sbci	r31, 0xFF	; 255
    199c:	84 e0       	ldi	r24, 0x04	; 4
    199e:	60 81       	ld	r22, Z
    19a0:	0e 94 07 0b 	call	0x160e	; 0x160e <MDIO_voidWriteHighNibble>
	    
	    /**set register select to low */
	    MDIO_voidClrPinVal (LCD_RS_PORT , LCD_RS_PIN ) ;
    19a4:	84 e0       	ldi	r24, 0x04	; 4
    19a6:	61 e0       	ldi	r22, 0x01	; 1
    19a8:	0e 94 0d 09 	call	0x121a	; 0x121a <MDIO_voidClrPinVal>
	    
	    /**set enable to high */
	    MDIO_voidSetPinVal  (LCD_EN_PORT , LCD_EN_PIN ) ;
    19ac:	84 e0       	ldi	r24, 0x04	; 4
    19ae:	63 e0       	ldi	r22, 0x03	; 3
    19b0:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MDIO_voidSetPinVal>
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	a0 e0       	ldi	r26, 0x00	; 0
    19ba:	b0 e4       	ldi	r27, 0x40	; 64
    19bc:	8f a3       	std	Y+39, r24	; 0x27
    19be:	98 a7       	std	Y+40, r25	; 0x28
    19c0:	a9 a7       	std	Y+41, r26	; 0x29
    19c2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c4:	6f a1       	ldd	r22, Y+39	; 0x27
    19c6:	78 a5       	ldd	r23, Y+40	; 0x28
    19c8:	89 a5       	ldd	r24, Y+41	; 0x29
    19ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	4a ef       	ldi	r20, 0xFA	; 250
    19d2:	54 e4       	ldi	r21, 0x44	; 68
    19d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19d8:	dc 01       	movw	r26, r24
    19da:	cb 01       	movw	r24, r22
    19dc:	8b a3       	std	Y+35, r24	; 0x23
    19de:	9c a3       	std	Y+36, r25	; 0x24
    19e0:	ad a3       	std	Y+37, r26	; 0x25
    19e2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    19e4:	6b a1       	ldd	r22, Y+35	; 0x23
    19e6:	7c a1       	ldd	r23, Y+36	; 0x24
    19e8:	8d a1       	ldd	r24, Y+37	; 0x25
    19ea:	9e a1       	ldd	r25, Y+38	; 0x26
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	40 e8       	ldi	r20, 0x80	; 128
    19f2:	5f e3       	ldi	r21, 0x3F	; 63
    19f4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19f8:	88 23       	and	r24, r24
    19fa:	2c f4       	brge	.+10     	; 0x1a06 <HLCD_voidSendCmd+0x2be>
		__ticks = 1;
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	9a a3       	std	Y+34, r25	; 0x22
    1a02:	89 a3       	std	Y+33, r24	; 0x21
    1a04:	3f c0       	rjmp	.+126    	; 0x1a84 <HLCD_voidSendCmd+0x33c>
	else if (__tmp > 65535)
    1a06:	6b a1       	ldd	r22, Y+35	; 0x23
    1a08:	7c a1       	ldd	r23, Y+36	; 0x24
    1a0a:	8d a1       	ldd	r24, Y+37	; 0x25
    1a0c:	9e a1       	ldd	r25, Y+38	; 0x26
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	3f ef       	ldi	r19, 0xFF	; 255
    1a12:	4f e7       	ldi	r20, 0x7F	; 127
    1a14:	57 e4       	ldi	r21, 0x47	; 71
    1a16:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a1a:	18 16       	cp	r1, r24
    1a1c:	4c f5       	brge	.+82     	; 0x1a70 <HLCD_voidSendCmd+0x328>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a1e:	6f a1       	ldd	r22, Y+39	; 0x27
    1a20:	78 a5       	ldd	r23, Y+40	; 0x28
    1a22:	89 a5       	ldd	r24, Y+41	; 0x29
    1a24:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	40 e2       	ldi	r20, 0x20	; 32
    1a2c:	51 e4       	ldi	r21, 0x41	; 65
    1a2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	bc 01       	movw	r22, r24
    1a38:	cd 01       	movw	r24, r26
    1a3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a3e:	dc 01       	movw	r26, r24
    1a40:	cb 01       	movw	r24, r22
    1a42:	9a a3       	std	Y+34, r25	; 0x22
    1a44:	89 a3       	std	Y+33, r24	; 0x21
    1a46:	0f c0       	rjmp	.+30     	; 0x1a66 <HLCD_voidSendCmd+0x31e>
    1a48:	88 ec       	ldi	r24, 0xC8	; 200
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	98 a3       	std	Y+32, r25	; 0x20
    1a4e:	8f 8f       	std	Y+31, r24	; 0x1f
    1a50:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a52:	98 a1       	ldd	r25, Y+32	; 0x20
    1a54:	01 97       	sbiw	r24, 0x01	; 1
    1a56:	f1 f7       	brne	.-4      	; 0x1a54 <HLCD_voidSendCmd+0x30c>
    1a58:	98 a3       	std	Y+32, r25	; 0x20
    1a5a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a5c:	89 a1       	ldd	r24, Y+33	; 0x21
    1a5e:	9a a1       	ldd	r25, Y+34	; 0x22
    1a60:	01 97       	sbiw	r24, 0x01	; 1
    1a62:	9a a3       	std	Y+34, r25	; 0x22
    1a64:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a66:	89 a1       	ldd	r24, Y+33	; 0x21
    1a68:	9a a1       	ldd	r25, Y+34	; 0x22
    1a6a:	00 97       	sbiw	r24, 0x00	; 0
    1a6c:	69 f7       	brne	.-38     	; 0x1a48 <HLCD_voidSendCmd+0x300>
    1a6e:	14 c0       	rjmp	.+40     	; 0x1a98 <HLCD_voidSendCmd+0x350>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a70:	6b a1       	ldd	r22, Y+35	; 0x23
    1a72:	7c a1       	ldd	r23, Y+36	; 0x24
    1a74:	8d a1       	ldd	r24, Y+37	; 0x25
    1a76:	9e a1       	ldd	r25, Y+38	; 0x26
    1a78:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	9a a3       	std	Y+34, r25	; 0x22
    1a82:	89 a3       	std	Y+33, r24	; 0x21
    1a84:	89 a1       	ldd	r24, Y+33	; 0x21
    1a86:	9a a1       	ldd	r25, Y+34	; 0x22
    1a88:	9e 8f       	std	Y+30, r25	; 0x1e
    1a8a:	8d 8f       	std	Y+29, r24	; 0x1d
    1a8c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a8e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a90:	01 97       	sbiw	r24, 0x01	; 1
    1a92:	f1 f7       	brne	.-4      	; 0x1a90 <HLCD_voidSendCmd+0x348>
    1a94:	9e 8f       	std	Y+30, r25	; 0x1e
    1a96:	8d 8f       	std	Y+29, r24	; 0x1d
	    
	    /* Wait for E to settle */
	    _delay_ms (2) ;
	    
	    /**set enable to low */
	    MDIO_voidClrPinVal  (LCD_EN_PORT , LCD_EN_PIN ) ;
    1a98:	84 e0       	ldi	r24, 0x04	; 4
    1a9a:	63 e0       	ldi	r22, 0x03	; 3
    1a9c:	0e 94 0d 09 	call	0x121a	; 0x121a <MDIO_voidClrPinVal>
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	a0 e0       	ldi	r26, 0x00	; 0
    1aa6:	b0 e4       	ldi	r27, 0x40	; 64
    1aa8:	89 8f       	std	Y+25, r24	; 0x19
    1aaa:	9a 8f       	std	Y+26, r25	; 0x1a
    1aac:	ab 8f       	std	Y+27, r26	; 0x1b
    1aae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab0:	69 8d       	ldd	r22, Y+25	; 0x19
    1ab2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ab4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ab6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	4a ef       	ldi	r20, 0xFA	; 250
    1abe:	54 e4       	ldi	r21, 0x44	; 68
    1ac0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	8d 8b       	std	Y+21, r24	; 0x15
    1aca:	9e 8b       	std	Y+22, r25	; 0x16
    1acc:	af 8b       	std	Y+23, r26	; 0x17
    1ace:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ad0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ad2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ad4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ad6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	40 e8       	ldi	r20, 0x80	; 128
    1ade:	5f e3       	ldi	r21, 0x3F	; 63
    1ae0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ae4:	88 23       	and	r24, r24
    1ae6:	2c f4       	brge	.+10     	; 0x1af2 <HLCD_voidSendCmd+0x3aa>
		__ticks = 1;
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	9c 8b       	std	Y+20, r25	; 0x14
    1aee:	8b 8b       	std	Y+19, r24	; 0x13
    1af0:	3f c0       	rjmp	.+126    	; 0x1b70 <HLCD_voidSendCmd+0x428>
	else if (__tmp > 65535)
    1af2:	6d 89       	ldd	r22, Y+21	; 0x15
    1af4:	7e 89       	ldd	r23, Y+22	; 0x16
    1af6:	8f 89       	ldd	r24, Y+23	; 0x17
    1af8:	98 8d       	ldd	r25, Y+24	; 0x18
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	3f ef       	ldi	r19, 0xFF	; 255
    1afe:	4f e7       	ldi	r20, 0x7F	; 127
    1b00:	57 e4       	ldi	r21, 0x47	; 71
    1b02:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b06:	18 16       	cp	r1, r24
    1b08:	4c f5       	brge	.+82     	; 0x1b5c <HLCD_voidSendCmd+0x414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b0a:	69 8d       	ldd	r22, Y+25	; 0x19
    1b0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b12:	20 e0       	ldi	r18, 0x00	; 0
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	40 e2       	ldi	r20, 0x20	; 32
    1b18:	51 e4       	ldi	r21, 0x41	; 65
    1b1a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b1e:	dc 01       	movw	r26, r24
    1b20:	cb 01       	movw	r24, r22
    1b22:	bc 01       	movw	r22, r24
    1b24:	cd 01       	movw	r24, r26
    1b26:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	9c 8b       	std	Y+20, r25	; 0x14
    1b30:	8b 8b       	std	Y+19, r24	; 0x13
    1b32:	0f c0       	rjmp	.+30     	; 0x1b52 <HLCD_voidSendCmd+0x40a>
    1b34:	88 ec       	ldi	r24, 0xC8	; 200
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	9a 8b       	std	Y+18, r25	; 0x12
    1b3a:	89 8b       	std	Y+17, r24	; 0x11
    1b3c:	89 89       	ldd	r24, Y+17	; 0x11
    1b3e:	9a 89       	ldd	r25, Y+18	; 0x12
    1b40:	01 97       	sbiw	r24, 0x01	; 1
    1b42:	f1 f7       	brne	.-4      	; 0x1b40 <HLCD_voidSendCmd+0x3f8>
    1b44:	9a 8b       	std	Y+18, r25	; 0x12
    1b46:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b48:	8b 89       	ldd	r24, Y+19	; 0x13
    1b4a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b4c:	01 97       	sbiw	r24, 0x01	; 1
    1b4e:	9c 8b       	std	Y+20, r25	; 0x14
    1b50:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b52:	8b 89       	ldd	r24, Y+19	; 0x13
    1b54:	9c 89       	ldd	r25, Y+20	; 0x14
    1b56:	00 97       	sbiw	r24, 0x00	; 0
    1b58:	69 f7       	brne	.-38     	; 0x1b34 <HLCD_voidSendCmd+0x3ec>
    1b5a:	14 c0       	rjmp	.+40     	; 0x1b84 <HLCD_voidSendCmd+0x43c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b5c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b5e:	7e 89       	ldd	r23, Y+22	; 0x16
    1b60:	8f 89       	ldd	r24, Y+23	; 0x17
    1b62:	98 8d       	ldd	r25, Y+24	; 0x18
    1b64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	9c 8b       	std	Y+20, r25	; 0x14
    1b6e:	8b 8b       	std	Y+19, r24	; 0x13
    1b70:	8b 89       	ldd	r24, Y+19	; 0x13
    1b72:	9c 89       	ldd	r25, Y+20	; 0x14
    1b74:	98 8b       	std	Y+16, r25	; 0x10
    1b76:	8f 87       	std	Y+15, r24	; 0x0f
    1b78:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b7a:	98 89       	ldd	r25, Y+16	; 0x10
    1b7c:	01 97       	sbiw	r24, 0x01	; 1
    1b7e:	f1 f7       	brne	.-4      	; 0x1b7c <HLCD_voidSendCmd+0x434>
    1b80:	98 8b       	std	Y+16, r25	; 0x10
    1b82:	8f 87       	std	Y+15, r24	; 0x0f
    1b84:	80 e0       	ldi	r24, 0x00	; 0
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	a0 e8       	ldi	r26, 0x80	; 128
    1b8a:	bf e3       	ldi	r27, 0x3F	; 63
    1b8c:	8b 87       	std	Y+11, r24	; 0x0b
    1b8e:	9c 87       	std	Y+12, r25	; 0x0c
    1b90:	ad 87       	std	Y+13, r26	; 0x0d
    1b92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b94:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b96:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b98:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	4a ef       	ldi	r20, 0xFA	; 250
    1ba2:	54 e4       	ldi	r21, 0x44	; 68
    1ba4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ba8:	dc 01       	movw	r26, r24
    1baa:	cb 01       	movw	r24, r22
    1bac:	8f 83       	std	Y+7, r24	; 0x07
    1bae:	98 87       	std	Y+8, r25	; 0x08
    1bb0:	a9 87       	std	Y+9, r26	; 0x09
    1bb2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bb4:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb6:	78 85       	ldd	r23, Y+8	; 0x08
    1bb8:	89 85       	ldd	r24, Y+9	; 0x09
    1bba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	40 e8       	ldi	r20, 0x80	; 128
    1bc2:	5f e3       	ldi	r21, 0x3F	; 63
    1bc4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bc8:	88 23       	and	r24, r24
    1bca:	2c f4       	brge	.+10     	; 0x1bd6 <HLCD_voidSendCmd+0x48e>
		__ticks = 1;
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	9e 83       	std	Y+6, r25	; 0x06
    1bd2:	8d 83       	std	Y+5, r24	; 0x05
    1bd4:	3f c0       	rjmp	.+126    	; 0x1c54 <HLCD_voidSendCmd+0x50c>
	else if (__tmp > 65535)
    1bd6:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd8:	78 85       	ldd	r23, Y+8	; 0x08
    1bda:	89 85       	ldd	r24, Y+9	; 0x09
    1bdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	3f ef       	ldi	r19, 0xFF	; 255
    1be2:	4f e7       	ldi	r20, 0x7F	; 127
    1be4:	57 e4       	ldi	r21, 0x47	; 71
    1be6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1bea:	18 16       	cp	r1, r24
    1bec:	4c f5       	brge	.+82     	; 0x1c40 <HLCD_voidSendCmd+0x4f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bf0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bf2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bf4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	40 e2       	ldi	r20, 0x20	; 32
    1bfc:	51 e4       	ldi	r21, 0x41	; 65
    1bfe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	bc 01       	movw	r22, r24
    1c08:	cd 01       	movw	r24, r26
    1c0a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	9e 83       	std	Y+6, r25	; 0x06
    1c14:	8d 83       	std	Y+5, r24	; 0x05
    1c16:	0f c0       	rjmp	.+30     	; 0x1c36 <HLCD_voidSendCmd+0x4ee>
    1c18:	88 ec       	ldi	r24, 0xC8	; 200
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	9c 83       	std	Y+4, r25	; 0x04
    1c1e:	8b 83       	std	Y+3, r24	; 0x03
    1c20:	8b 81       	ldd	r24, Y+3	; 0x03
    1c22:	9c 81       	ldd	r25, Y+4	; 0x04
    1c24:	01 97       	sbiw	r24, 0x01	; 1
    1c26:	f1 f7       	brne	.-4      	; 0x1c24 <HLCD_voidSendCmd+0x4dc>
    1c28:	9c 83       	std	Y+4, r25	; 0x04
    1c2a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c30:	01 97       	sbiw	r24, 0x01	; 1
    1c32:	9e 83       	std	Y+6, r25	; 0x06
    1c34:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c36:	8d 81       	ldd	r24, Y+5	; 0x05
    1c38:	9e 81       	ldd	r25, Y+6	; 0x06
    1c3a:	00 97       	sbiw	r24, 0x00	; 0
    1c3c:	69 f7       	brne	.-38     	; 0x1c18 <HLCD_voidSendCmd+0x4d0>
    1c3e:	14 c0       	rjmp	.+40     	; 0x1c68 <HLCD_voidSendCmd+0x520>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c40:	6f 81       	ldd	r22, Y+7	; 0x07
    1c42:	78 85       	ldd	r23, Y+8	; 0x08
    1c44:	89 85       	ldd	r24, Y+9	; 0x09
    1c46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	cb 01       	movw	r24, r22
    1c50:	9e 83       	std	Y+6, r25	; 0x06
    1c52:	8d 83       	std	Y+5, r24	; 0x05
    1c54:	8d 81       	ldd	r24, Y+5	; 0x05
    1c56:	9e 81       	ldd	r25, Y+6	; 0x06
    1c58:	9a 83       	std	Y+2, r25	; 0x02
    1c5a:	89 83       	std	Y+1, r24	; 0x01
    1c5c:	89 81       	ldd	r24, Y+1	; 0x01
    1c5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c60:	01 97       	sbiw	r24, 0x01	; 1
    1c62:	f1 f7       	brne	.-4      	; 0x1c60 <HLCD_voidSendCmd+0x518>
    1c64:	9a 83       	std	Y+2, r25	; 0x02
    1c66:	89 83       	std	Y+1, r24	; 0x01
	    _delay_ms (2) ;
	    #else
	    #error "select write mode"
	    #endif
	    _delay_ms(1) ;
    1c68:	c9 5b       	subi	r28, 0xB9	; 185
    1c6a:	df 4f       	sbci	r29, 0xFF	; 255
    1c6c:	0f b6       	in	r0, 0x3f	; 63
    1c6e:	f8 94       	cli
    1c70:	de bf       	out	0x3e, r29	; 62
    1c72:	0f be       	out	0x3f, r0	; 63
    1c74:	cd bf       	out	0x3d, r28	; 61
    1c76:	cf 91       	pop	r28
    1c78:	df 91       	pop	r29
    1c7a:	1f 91       	pop	r17
    1c7c:	0f 91       	pop	r16
    1c7e:	08 95       	ret

00001c80 <HLCD_voidInit>:
#include "LCD_private.h"
#include "LCD_conf.h"
#include "LCD_int.h"

void HLCD_voidInit(void)
{
    1c80:	0f 93       	push	r16
    1c82:	1f 93       	push	r17
    1c84:	df 93       	push	r29
    1c86:	cf 93       	push	r28
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
    1c8c:	c4 55       	subi	r28, 0x54	; 84
    1c8e:	d0 40       	sbci	r29, 0x00	; 0
    1c90:	0f b6       	in	r0, 0x3f	; 63
    1c92:	f8 94       	cli
    1c94:	de bf       	out	0x3e, r29	; 62
    1c96:	0f be       	out	0x3f, r0	; 63
    1c98:	cd bf       	out	0x3d, r28	; 61
    1c9a:	fe 01       	movw	r30, r28
    1c9c:	ef 5a       	subi	r30, 0xAF	; 175
    1c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	a8 e4       	ldi	r26, 0x48	; 72
    1ca6:	b3 e4       	ldi	r27, 0x43	; 67
    1ca8:	80 83       	st	Z, r24
    1caa:	91 83       	std	Z+1, r25	; 0x01
    1cac:	a2 83       	std	Z+2, r26	; 0x02
    1cae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cb0:	8e 01       	movw	r16, r28
    1cb2:	03 5b       	subi	r16, 0xB3	; 179
    1cb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb6:	fe 01       	movw	r30, r28
    1cb8:	ef 5a       	subi	r30, 0xAF	; 175
    1cba:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbc:	60 81       	ld	r22, Z
    1cbe:	71 81       	ldd	r23, Z+1	; 0x01
    1cc0:	82 81       	ldd	r24, Z+2	; 0x02
    1cc2:	93 81       	ldd	r25, Z+3	; 0x03
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	4a ef       	ldi	r20, 0xFA	; 250
    1cca:	54 e4       	ldi	r21, 0x44	; 68
    1ccc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	f8 01       	movw	r30, r16
    1cd6:	80 83       	st	Z, r24
    1cd8:	91 83       	std	Z+1, r25	; 0x01
    1cda:	a2 83       	std	Z+2, r26	; 0x02
    1cdc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cde:	fe 01       	movw	r30, r28
    1ce0:	e3 5b       	subi	r30, 0xB3	; 179
    1ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce4:	60 81       	ld	r22, Z
    1ce6:	71 81       	ldd	r23, Z+1	; 0x01
    1ce8:	82 81       	ldd	r24, Z+2	; 0x02
    1cea:	93 81       	ldd	r25, Z+3	; 0x03
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	40 e8       	ldi	r20, 0x80	; 128
    1cf2:	5f e3       	ldi	r21, 0x3F	; 63
    1cf4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cf8:	88 23       	and	r24, r24
    1cfa:	44 f4       	brge	.+16     	; 0x1d0c <HLCD_voidInit+0x8c>
		__ticks = 1;
    1cfc:	fe 01       	movw	r30, r28
    1cfe:	e5 5b       	subi	r30, 0xB5	; 181
    1d00:	ff 4f       	sbci	r31, 0xFF	; 255
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	91 83       	std	Z+1, r25	; 0x01
    1d08:	80 83       	st	Z, r24
    1d0a:	64 c0       	rjmp	.+200    	; 0x1dd4 <HLCD_voidInit+0x154>
	else if (__tmp > 65535)
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	e3 5b       	subi	r30, 0xB3	; 179
    1d10:	ff 4f       	sbci	r31, 0xFF	; 255
    1d12:	60 81       	ld	r22, Z
    1d14:	71 81       	ldd	r23, Z+1	; 0x01
    1d16:	82 81       	ldd	r24, Z+2	; 0x02
    1d18:	93 81       	ldd	r25, Z+3	; 0x03
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	3f ef       	ldi	r19, 0xFF	; 255
    1d1e:	4f e7       	ldi	r20, 0x7F	; 127
    1d20:	57 e4       	ldi	r21, 0x47	; 71
    1d22:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d26:	18 16       	cp	r1, r24
    1d28:	0c f0       	brlt	.+2      	; 0x1d2c <HLCD_voidInit+0xac>
    1d2a:	43 c0       	rjmp	.+134    	; 0x1db2 <HLCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d2c:	fe 01       	movw	r30, r28
    1d2e:	ef 5a       	subi	r30, 0xAF	; 175
    1d30:	ff 4f       	sbci	r31, 0xFF	; 255
    1d32:	60 81       	ld	r22, Z
    1d34:	71 81       	ldd	r23, Z+1	; 0x01
    1d36:	82 81       	ldd	r24, Z+2	; 0x02
    1d38:	93 81       	ldd	r25, Z+3	; 0x03
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	40 e2       	ldi	r20, 0x20	; 32
    1d40:	51 e4       	ldi	r21, 0x41	; 65
    1d42:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	8e 01       	movw	r16, r28
    1d4c:	05 5b       	subi	r16, 0xB5	; 181
    1d4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d50:	bc 01       	movw	r22, r24
    1d52:	cd 01       	movw	r24, r26
    1d54:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	f8 01       	movw	r30, r16
    1d5e:	91 83       	std	Z+1, r25	; 0x01
    1d60:	80 83       	st	Z, r24
    1d62:	1f c0       	rjmp	.+62     	; 0x1da2 <HLCD_voidInit+0x122>
    1d64:	fe 01       	movw	r30, r28
    1d66:	e7 5b       	subi	r30, 0xB7	; 183
    1d68:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6a:	88 ec       	ldi	r24, 0xC8	; 200
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	91 83       	std	Z+1, r25	; 0x01
    1d70:	80 83       	st	Z, r24
    1d72:	fe 01       	movw	r30, r28
    1d74:	e7 5b       	subi	r30, 0xB7	; 183
    1d76:	ff 4f       	sbci	r31, 0xFF	; 255
    1d78:	80 81       	ld	r24, Z
    1d7a:	91 81       	ldd	r25, Z+1	; 0x01
    1d7c:	01 97       	sbiw	r24, 0x01	; 1
    1d7e:	f1 f7       	brne	.-4      	; 0x1d7c <HLCD_voidInit+0xfc>
    1d80:	fe 01       	movw	r30, r28
    1d82:	e7 5b       	subi	r30, 0xB7	; 183
    1d84:	ff 4f       	sbci	r31, 0xFF	; 255
    1d86:	91 83       	std	Z+1, r25	; 0x01
    1d88:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d8a:	de 01       	movw	r26, r28
    1d8c:	a5 5b       	subi	r26, 0xB5	; 181
    1d8e:	bf 4f       	sbci	r27, 0xFF	; 255
    1d90:	fe 01       	movw	r30, r28
    1d92:	e5 5b       	subi	r30, 0xB5	; 181
    1d94:	ff 4f       	sbci	r31, 0xFF	; 255
    1d96:	80 81       	ld	r24, Z
    1d98:	91 81       	ldd	r25, Z+1	; 0x01
    1d9a:	01 97       	sbiw	r24, 0x01	; 1
    1d9c:	11 96       	adiw	r26, 0x01	; 1
    1d9e:	9c 93       	st	X, r25
    1da0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1da2:	fe 01       	movw	r30, r28
    1da4:	e5 5b       	subi	r30, 0xB5	; 181
    1da6:	ff 4f       	sbci	r31, 0xFF	; 255
    1da8:	80 81       	ld	r24, Z
    1daa:	91 81       	ldd	r25, Z+1	; 0x01
    1dac:	00 97       	sbiw	r24, 0x00	; 0
    1dae:	d1 f6       	brne	.-76     	; 0x1d64 <HLCD_voidInit+0xe4>
    1db0:	27 c0       	rjmp	.+78     	; 0x1e00 <HLCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1db2:	8e 01       	movw	r16, r28
    1db4:	05 5b       	subi	r16, 0xB5	; 181
    1db6:	1f 4f       	sbci	r17, 0xFF	; 255
    1db8:	fe 01       	movw	r30, r28
    1dba:	e3 5b       	subi	r30, 0xB3	; 179
    1dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbe:	60 81       	ld	r22, Z
    1dc0:	71 81       	ldd	r23, Z+1	; 0x01
    1dc2:	82 81       	ldd	r24, Z+2	; 0x02
    1dc4:	93 81       	ldd	r25, Z+3	; 0x03
    1dc6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dca:	dc 01       	movw	r26, r24
    1dcc:	cb 01       	movw	r24, r22
    1dce:	f8 01       	movw	r30, r16
    1dd0:	91 83       	std	Z+1, r25	; 0x01
    1dd2:	80 83       	st	Z, r24
    1dd4:	de 01       	movw	r26, r28
    1dd6:	a9 5b       	subi	r26, 0xB9	; 185
    1dd8:	bf 4f       	sbci	r27, 0xFF	; 255
    1dda:	fe 01       	movw	r30, r28
    1ddc:	e5 5b       	subi	r30, 0xB5	; 181
    1dde:	ff 4f       	sbci	r31, 0xFF	; 255
    1de0:	80 81       	ld	r24, Z
    1de2:	91 81       	ldd	r25, Z+1	; 0x01
    1de4:	8d 93       	st	X+, r24
    1de6:	9c 93       	st	X, r25
    1de8:	fe 01       	movw	r30, r28
    1dea:	e9 5b       	subi	r30, 0xB9	; 185
    1dec:	ff 4f       	sbci	r31, 0xFF	; 255
    1dee:	80 81       	ld	r24, Z
    1df0:	91 81       	ldd	r25, Z+1	; 0x01
    1df2:	01 97       	sbiw	r24, 0x01	; 1
    1df4:	f1 f7       	brne	.-4      	; 0x1df2 <HLCD_voidInit+0x172>
    1df6:	fe 01       	movw	r30, r28
    1df8:	e9 5b       	subi	r30, 0xB9	; 185
    1dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfc:	91 83       	std	Z+1, r25	; 0x01
    1dfe:	80 83       	st	Z, r24
	    _delay_ms (1) ;
		
	#elif MODE == FOUR_BIT_CONNECTION
	
	    /** set direction of DIO_PIN4 to be output */
	    MDIO_voidSetPinDir  (LCD_DATA_PORT , DIO_PIN4 , DIO_HIGH) ;
    1e00:	84 e0       	ldi	r24, 0x04	; 4
    1e02:	64 e0       	ldi	r22, 0x04	; 4
    1e04:	41 e0       	ldi	r20, 0x01	; 1
    1e06:	0e 94 63 06 	call	0xcc6	; 0xcc6 <MDIO_voidSetPinDir>
		
		/** set direction of DIO_PIN5 to be output */
	    MDIO_voidSetPinDir  (LCD_DATA_PORT , DIO_PIN5 , DIO_HIGH) ;
    1e0a:	84 e0       	ldi	r24, 0x04	; 4
    1e0c:	65 e0       	ldi	r22, 0x05	; 5
    1e0e:	41 e0       	ldi	r20, 0x01	; 1
    1e10:	0e 94 63 06 	call	0xcc6	; 0xcc6 <MDIO_voidSetPinDir>
		
		/** set direction of DIO_PIN6 to be output */
	    MDIO_voidSetPinDir  (LCD_DATA_PORT , DIO_PIN6 , DIO_HIGH) ;
    1e14:	84 e0       	ldi	r24, 0x04	; 4
    1e16:	66 e0       	ldi	r22, 0x06	; 6
    1e18:	41 e0       	ldi	r20, 0x01	; 1
    1e1a:	0e 94 63 06 	call	0xcc6	; 0xcc6 <MDIO_voidSetPinDir>
		
		/** set direction of DIO_PIN7 to be output */
	    MDIO_voidSetPinDir  (LCD_DATA_PORT , DIO_PIN7 , DIO_HIGH) ;
    1e1e:	84 e0       	ldi	r24, 0x04	; 4
    1e20:	67 e0       	ldi	r22, 0x07	; 7
    1e22:	41 e0       	ldi	r20, 0x01	; 1
    1e24:	0e 94 63 06 	call	0xcc6	; 0xcc6 <MDIO_voidSetPinDir>
		
	    /** set direction of register select to be output */
	    MDIO_voidSetPinDir  (LCD_RS_PORT   , LCD_RS_PIN  , DIO_HIGH) ;
    1e28:	84 e0       	ldi	r24, 0x04	; 4
    1e2a:	61 e0       	ldi	r22, 0x01	; 1
    1e2c:	41 e0       	ldi	r20, 0x01	; 1
    1e2e:	0e 94 63 06 	call	0xcc6	; 0xcc6 <MDIO_voidSetPinDir>
		
		/** set direction of Enable pin to be output */
	    MDIO_voidSetPinDir  (LCD_EN_PORT   , LCD_EN_PIN  , DIO_HIGH) ;
    1e32:	84 e0       	ldi	r24, 0x04	; 4
    1e34:	63 e0       	ldi	r22, 0x03	; 3
    1e36:	41 e0       	ldi	r20, 0x01	; 1
    1e38:	0e 94 63 06 	call	0xcc6	; 0xcc6 <MDIO_voidSetPinDir>

		/** set direction of read/write pin to be output */
	    MDIO_voidSetPinDir  (LCD_RW_PORT   , LCD_RW_PIN  , DIO_HIGH) ;
    1e3c:	84 e0       	ldi	r24, 0x04	; 4
    1e3e:	62 e0       	ldi	r22, 0x02	; 2
    1e40:	41 e0       	ldi	r20, 0x01	; 1
    1e42:	0e 94 63 06 	call	0xcc6	; 0xcc6 <MDIO_voidSetPinDir>
	    
	    /** Return home*/
	    HLCD_voidSendCmd (CMD_RETURN_HOME) ;
    1e46:	82 e0       	ldi	r24, 0x02	; 2
    1e48:	0e 94 a4 0b 	call	0x1748	; 0x1748 <HLCD_voidSendCmd>
    1e4c:	fe 01       	movw	r30, r28
    1e4e:	ed 5b       	subi	r30, 0xBD	; 189
    1e50:	ff 4f       	sbci	r31, 0xFF	; 255
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	a0 e2       	ldi	r26, 0x20	; 32
    1e58:	b1 e4       	ldi	r27, 0x41	; 65
    1e5a:	80 83       	st	Z, r24
    1e5c:	91 83       	std	Z+1, r25	; 0x01
    1e5e:	a2 83       	std	Z+2, r26	; 0x02
    1e60:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e62:	8e 01       	movw	r16, r28
    1e64:	01 5c       	subi	r16, 0xC1	; 193
    1e66:	1f 4f       	sbci	r17, 0xFF	; 255
    1e68:	fe 01       	movw	r30, r28
    1e6a:	ed 5b       	subi	r30, 0xBD	; 189
    1e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6e:	60 81       	ld	r22, Z
    1e70:	71 81       	ldd	r23, Z+1	; 0x01
    1e72:	82 81       	ldd	r24, Z+2	; 0x02
    1e74:	93 81       	ldd	r25, Z+3	; 0x03
    1e76:	20 e0       	ldi	r18, 0x00	; 0
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	4a ef       	ldi	r20, 0xFA	; 250
    1e7c:	54 e4       	ldi	r21, 0x44	; 68
    1e7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	f8 01       	movw	r30, r16
    1e88:	80 83       	st	Z, r24
    1e8a:	91 83       	std	Z+1, r25	; 0x01
    1e8c:	a2 83       	std	Z+2, r26	; 0x02
    1e8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e90:	fe 01       	movw	r30, r28
    1e92:	ff 96       	adiw	r30, 0x3f	; 63
    1e94:	60 81       	ld	r22, Z
    1e96:	71 81       	ldd	r23, Z+1	; 0x01
    1e98:	82 81       	ldd	r24, Z+2	; 0x02
    1e9a:	93 81       	ldd	r25, Z+3	; 0x03
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	40 e8       	ldi	r20, 0x80	; 128
    1ea2:	5f e3       	ldi	r21, 0x3F	; 63
    1ea4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ea8:	88 23       	and	r24, r24
    1eaa:	2c f4       	brge	.+10     	; 0x1eb6 <HLCD_voidInit+0x236>
		__ticks = 1;
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	9e af       	std	Y+62, r25	; 0x3e
    1eb2:	8d af       	std	Y+61, r24	; 0x3d
    1eb4:	46 c0       	rjmp	.+140    	; 0x1f42 <HLCD_voidInit+0x2c2>
	else if (__tmp > 65535)
    1eb6:	fe 01       	movw	r30, r28
    1eb8:	ff 96       	adiw	r30, 0x3f	; 63
    1eba:	60 81       	ld	r22, Z
    1ebc:	71 81       	ldd	r23, Z+1	; 0x01
    1ebe:	82 81       	ldd	r24, Z+2	; 0x02
    1ec0:	93 81       	ldd	r25, Z+3	; 0x03
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	3f ef       	ldi	r19, 0xFF	; 255
    1ec6:	4f e7       	ldi	r20, 0x7F	; 127
    1ec8:	57 e4       	ldi	r21, 0x47	; 71
    1eca:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ece:	18 16       	cp	r1, r24
    1ed0:	64 f5       	brge	.+88     	; 0x1f2a <HLCD_voidInit+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed2:	fe 01       	movw	r30, r28
    1ed4:	ed 5b       	subi	r30, 0xBD	; 189
    1ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed8:	60 81       	ld	r22, Z
    1eda:	71 81       	ldd	r23, Z+1	; 0x01
    1edc:	82 81       	ldd	r24, Z+2	; 0x02
    1ede:	93 81       	ldd	r25, Z+3	; 0x03
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	40 e2       	ldi	r20, 0x20	; 32
    1ee6:	51 e4       	ldi	r21, 0x41	; 65
    1ee8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	bc 01       	movw	r22, r24
    1ef2:	cd 01       	movw	r24, r26
    1ef4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	9e af       	std	Y+62, r25	; 0x3e
    1efe:	8d af       	std	Y+61, r24	; 0x3d
    1f00:	0f c0       	rjmp	.+30     	; 0x1f20 <HLCD_voidInit+0x2a0>
    1f02:	88 ec       	ldi	r24, 0xC8	; 200
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	9c af       	std	Y+60, r25	; 0x3c
    1f08:	8b af       	std	Y+59, r24	; 0x3b
    1f0a:	8b ad       	ldd	r24, Y+59	; 0x3b
    1f0c:	9c ad       	ldd	r25, Y+60	; 0x3c
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
    1f10:	f1 f7       	brne	.-4      	; 0x1f0e <HLCD_voidInit+0x28e>
    1f12:	9c af       	std	Y+60, r25	; 0x3c
    1f14:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f16:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f18:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	9e af       	std	Y+62, r25	; 0x3e
    1f1e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f20:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f22:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f24:	00 97       	sbiw	r24, 0x00	; 0
    1f26:	69 f7       	brne	.-38     	; 0x1f02 <HLCD_voidInit+0x282>
    1f28:	16 c0       	rjmp	.+44     	; 0x1f56 <HLCD_voidInit+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f2a:	fe 01       	movw	r30, r28
    1f2c:	ff 96       	adiw	r30, 0x3f	; 63
    1f2e:	60 81       	ld	r22, Z
    1f30:	71 81       	ldd	r23, Z+1	; 0x01
    1f32:	82 81       	ldd	r24, Z+2	; 0x02
    1f34:	93 81       	ldd	r25, Z+3	; 0x03
    1f36:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	9e af       	std	Y+62, r25	; 0x3e
    1f40:	8d af       	std	Y+61, r24	; 0x3d
    1f42:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f44:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f46:	9a af       	std	Y+58, r25	; 0x3a
    1f48:	89 af       	std	Y+57, r24	; 0x39
    1f4a:	89 ad       	ldd	r24, Y+57	; 0x39
    1f4c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f4e:	01 97       	sbiw	r24, 0x01	; 1
    1f50:	f1 f7       	brne	.-4      	; 0x1f4e <HLCD_voidInit+0x2ce>
    1f52:	9a af       	std	Y+58, r25	; 0x3a
    1f54:	89 af       	std	Y+57, r24	; 0x39
		
		/* Wait for command to settle */
	    _delay_ms (10) ;
	    
	    /** function set */
	    HLCD_voidSendCmd (FOUR_BIT_CONNECTION) ;
    1f56:	88 e2       	ldi	r24, 0x28	; 40
    1f58:	0e 94 a4 0b 	call	0x1748	; 0x1748 <HLCD_voidSendCmd>
    1f5c:	80 e0       	ldi	r24, 0x00	; 0
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	a0 e8       	ldi	r26, 0x80	; 128
    1f62:	bf e3       	ldi	r27, 0x3F	; 63
    1f64:	8d ab       	std	Y+53, r24	; 0x35
    1f66:	9e ab       	std	Y+54, r25	; 0x36
    1f68:	af ab       	std	Y+55, r26	; 0x37
    1f6a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f6c:	6d a9       	ldd	r22, Y+53	; 0x35
    1f6e:	7e a9       	ldd	r23, Y+54	; 0x36
    1f70:	8f a9       	ldd	r24, Y+55	; 0x37
    1f72:	98 ad       	ldd	r25, Y+56	; 0x38
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	4a ef       	ldi	r20, 0xFA	; 250
    1f7a:	54 e4       	ldi	r21, 0x44	; 68
    1f7c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	89 ab       	std	Y+49, r24	; 0x31
    1f86:	9a ab       	std	Y+50, r25	; 0x32
    1f88:	ab ab       	std	Y+51, r26	; 0x33
    1f8a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f8c:	69 a9       	ldd	r22, Y+49	; 0x31
    1f8e:	7a a9       	ldd	r23, Y+50	; 0x32
    1f90:	8b a9       	ldd	r24, Y+51	; 0x33
    1f92:	9c a9       	ldd	r25, Y+52	; 0x34
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	40 e8       	ldi	r20, 0x80	; 128
    1f9a:	5f e3       	ldi	r21, 0x3F	; 63
    1f9c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1fa0:	88 23       	and	r24, r24
    1fa2:	2c f4       	brge	.+10     	; 0x1fae <HLCD_voidInit+0x32e>
		__ticks = 1;
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	98 ab       	std	Y+48, r25	; 0x30
    1faa:	8f a7       	std	Y+47, r24	; 0x2f
    1fac:	3f c0       	rjmp	.+126    	; 0x202c <HLCD_voidInit+0x3ac>
	else if (__tmp > 65535)
    1fae:	69 a9       	ldd	r22, Y+49	; 0x31
    1fb0:	7a a9       	ldd	r23, Y+50	; 0x32
    1fb2:	8b a9       	ldd	r24, Y+51	; 0x33
    1fb4:	9c a9       	ldd	r25, Y+52	; 0x34
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	3f ef       	ldi	r19, 0xFF	; 255
    1fba:	4f e7       	ldi	r20, 0x7F	; 127
    1fbc:	57 e4       	ldi	r21, 0x47	; 71
    1fbe:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fc2:	18 16       	cp	r1, r24
    1fc4:	4c f5       	brge	.+82     	; 0x2018 <HLCD_voidInit+0x398>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fc6:	6d a9       	ldd	r22, Y+53	; 0x35
    1fc8:	7e a9       	ldd	r23, Y+54	; 0x36
    1fca:	8f a9       	ldd	r24, Y+55	; 0x37
    1fcc:	98 ad       	ldd	r25, Y+56	; 0x38
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	40 e2       	ldi	r20, 0x20	; 32
    1fd4:	51 e4       	ldi	r21, 0x41	; 65
    1fd6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	bc 01       	movw	r22, r24
    1fe0:	cd 01       	movw	r24, r26
    1fe2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	98 ab       	std	Y+48, r25	; 0x30
    1fec:	8f a7       	std	Y+47, r24	; 0x2f
    1fee:	0f c0       	rjmp	.+30     	; 0x200e <HLCD_voidInit+0x38e>
    1ff0:	88 ec       	ldi	r24, 0xC8	; 200
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	9e a7       	std	Y+46, r25	; 0x2e
    1ff6:	8d a7       	std	Y+45, r24	; 0x2d
    1ff8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ffa:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ffc:	01 97       	sbiw	r24, 0x01	; 1
    1ffe:	f1 f7       	brne	.-4      	; 0x1ffc <HLCD_voidInit+0x37c>
    2000:	9e a7       	std	Y+46, r25	; 0x2e
    2002:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2004:	8f a5       	ldd	r24, Y+47	; 0x2f
    2006:	98 a9       	ldd	r25, Y+48	; 0x30
    2008:	01 97       	sbiw	r24, 0x01	; 1
    200a:	98 ab       	std	Y+48, r25	; 0x30
    200c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    200e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2010:	98 a9       	ldd	r25, Y+48	; 0x30
    2012:	00 97       	sbiw	r24, 0x00	; 0
    2014:	69 f7       	brne	.-38     	; 0x1ff0 <HLCD_voidInit+0x370>
    2016:	14 c0       	rjmp	.+40     	; 0x2040 <HLCD_voidInit+0x3c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2018:	69 a9       	ldd	r22, Y+49	; 0x31
    201a:	7a a9       	ldd	r23, Y+50	; 0x32
    201c:	8b a9       	ldd	r24, Y+51	; 0x33
    201e:	9c a9       	ldd	r25, Y+52	; 0x34
    2020:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2024:	dc 01       	movw	r26, r24
    2026:	cb 01       	movw	r24, r22
    2028:	98 ab       	std	Y+48, r25	; 0x30
    202a:	8f a7       	std	Y+47, r24	; 0x2f
    202c:	8f a5       	ldd	r24, Y+47	; 0x2f
    202e:	98 a9       	ldd	r25, Y+48	; 0x30
    2030:	9c a7       	std	Y+44, r25	; 0x2c
    2032:	8b a7       	std	Y+43, r24	; 0x2b
    2034:	8b a5       	ldd	r24, Y+43	; 0x2b
    2036:	9c a5       	ldd	r25, Y+44	; 0x2c
    2038:	01 97       	sbiw	r24, 0x01	; 1
    203a:	f1 f7       	brne	.-4      	; 0x2038 <HLCD_voidInit+0x3b8>
    203c:	9c a7       	std	Y+44, r25	; 0x2c
    203e:	8b a7       	std	Y+43, r24	; 0x2b
		
		/* Wait for command to settle */
	    _delay_ms (1) ;
	    
	    /** Display ON/OFF Control */
	    HLCD_voidSendCmd (CMD_CURSOR_On_DISPLAY_ON) ;
    2040:	8e e0       	ldi	r24, 0x0E	; 14
    2042:	0e 94 a4 0b 	call	0x1748	; 0x1748 <HLCD_voidSendCmd>
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	a0 e8       	ldi	r26, 0x80	; 128
    204c:	bf e3       	ldi	r27, 0x3F	; 63
    204e:	8f a3       	std	Y+39, r24	; 0x27
    2050:	98 a7       	std	Y+40, r25	; 0x28
    2052:	a9 a7       	std	Y+41, r26	; 0x29
    2054:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2056:	6f a1       	ldd	r22, Y+39	; 0x27
    2058:	78 a5       	ldd	r23, Y+40	; 0x28
    205a:	89 a5       	ldd	r24, Y+41	; 0x29
    205c:	9a a5       	ldd	r25, Y+42	; 0x2a
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	4a ef       	ldi	r20, 0xFA	; 250
    2064:	54 e4       	ldi	r21, 0x44	; 68
    2066:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	8b a3       	std	Y+35, r24	; 0x23
    2070:	9c a3       	std	Y+36, r25	; 0x24
    2072:	ad a3       	std	Y+37, r26	; 0x25
    2074:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2076:	6b a1       	ldd	r22, Y+35	; 0x23
    2078:	7c a1       	ldd	r23, Y+36	; 0x24
    207a:	8d a1       	ldd	r24, Y+37	; 0x25
    207c:	9e a1       	ldd	r25, Y+38	; 0x26
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	40 e8       	ldi	r20, 0x80	; 128
    2084:	5f e3       	ldi	r21, 0x3F	; 63
    2086:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    208a:	88 23       	and	r24, r24
    208c:	2c f4       	brge	.+10     	; 0x2098 <HLCD_voidInit+0x418>
		__ticks = 1;
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	9a a3       	std	Y+34, r25	; 0x22
    2094:	89 a3       	std	Y+33, r24	; 0x21
    2096:	3f c0       	rjmp	.+126    	; 0x2116 <HLCD_voidInit+0x496>
	else if (__tmp > 65535)
    2098:	6b a1       	ldd	r22, Y+35	; 0x23
    209a:	7c a1       	ldd	r23, Y+36	; 0x24
    209c:	8d a1       	ldd	r24, Y+37	; 0x25
    209e:	9e a1       	ldd	r25, Y+38	; 0x26
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	3f ef       	ldi	r19, 0xFF	; 255
    20a4:	4f e7       	ldi	r20, 0x7F	; 127
    20a6:	57 e4       	ldi	r21, 0x47	; 71
    20a8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20ac:	18 16       	cp	r1, r24
    20ae:	4c f5       	brge	.+82     	; 0x2102 <HLCD_voidInit+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20b0:	6f a1       	ldd	r22, Y+39	; 0x27
    20b2:	78 a5       	ldd	r23, Y+40	; 0x28
    20b4:	89 a5       	ldd	r24, Y+41	; 0x29
    20b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	40 e2       	ldi	r20, 0x20	; 32
    20be:	51 e4       	ldi	r21, 0x41	; 65
    20c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	bc 01       	movw	r22, r24
    20ca:	cd 01       	movw	r24, r26
    20cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	9a a3       	std	Y+34, r25	; 0x22
    20d6:	89 a3       	std	Y+33, r24	; 0x21
    20d8:	0f c0       	rjmp	.+30     	; 0x20f8 <HLCD_voidInit+0x478>
    20da:	88 ec       	ldi	r24, 0xC8	; 200
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	98 a3       	std	Y+32, r25	; 0x20
    20e0:	8f 8f       	std	Y+31, r24	; 0x1f
    20e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20e4:	98 a1       	ldd	r25, Y+32	; 0x20
    20e6:	01 97       	sbiw	r24, 0x01	; 1
    20e8:	f1 f7       	brne	.-4      	; 0x20e6 <HLCD_voidInit+0x466>
    20ea:	98 a3       	std	Y+32, r25	; 0x20
    20ec:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ee:	89 a1       	ldd	r24, Y+33	; 0x21
    20f0:	9a a1       	ldd	r25, Y+34	; 0x22
    20f2:	01 97       	sbiw	r24, 0x01	; 1
    20f4:	9a a3       	std	Y+34, r25	; 0x22
    20f6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f8:	89 a1       	ldd	r24, Y+33	; 0x21
    20fa:	9a a1       	ldd	r25, Y+34	; 0x22
    20fc:	00 97       	sbiw	r24, 0x00	; 0
    20fe:	69 f7       	brne	.-38     	; 0x20da <HLCD_voidInit+0x45a>
    2100:	14 c0       	rjmp	.+40     	; 0x212a <HLCD_voidInit+0x4aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2102:	6b a1       	ldd	r22, Y+35	; 0x23
    2104:	7c a1       	ldd	r23, Y+36	; 0x24
    2106:	8d a1       	ldd	r24, Y+37	; 0x25
    2108:	9e a1       	ldd	r25, Y+38	; 0x26
    210a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	9a a3       	std	Y+34, r25	; 0x22
    2114:	89 a3       	std	Y+33, r24	; 0x21
    2116:	89 a1       	ldd	r24, Y+33	; 0x21
    2118:	9a a1       	ldd	r25, Y+34	; 0x22
    211a:	9e 8f       	std	Y+30, r25	; 0x1e
    211c:	8d 8f       	std	Y+29, r24	; 0x1d
    211e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2120:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2122:	01 97       	sbiw	r24, 0x01	; 1
    2124:	f1 f7       	brne	.-4      	; 0x2122 <HLCD_voidInit+0x4a2>
    2126:	9e 8f       	std	Y+30, r25	; 0x1e
    2128:	8d 8f       	std	Y+29, r24	; 0x1d
		
		/* Wait for command to settle */
	    _delay_ms (1) ;
	    
	    /** Display Clear */
	    HLCD_voidSendCmd (CMD_CLEAR) ;
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	0e 94 a4 0b 	call	0x1748	; 0x1748 <HLCD_voidSendCmd>
    2130:	80 e0       	ldi	r24, 0x00	; 0
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	a0 e2       	ldi	r26, 0x20	; 32
    2136:	b1 e4       	ldi	r27, 0x41	; 65
    2138:	89 8f       	std	Y+25, r24	; 0x19
    213a:	9a 8f       	std	Y+26, r25	; 0x1a
    213c:	ab 8f       	std	Y+27, r26	; 0x1b
    213e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2140:	69 8d       	ldd	r22, Y+25	; 0x19
    2142:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2144:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2146:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	4a ef       	ldi	r20, 0xFA	; 250
    214e:	54 e4       	ldi	r21, 0x44	; 68
    2150:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2154:	dc 01       	movw	r26, r24
    2156:	cb 01       	movw	r24, r22
    2158:	8d 8b       	std	Y+21, r24	; 0x15
    215a:	9e 8b       	std	Y+22, r25	; 0x16
    215c:	af 8b       	std	Y+23, r26	; 0x17
    215e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2160:	6d 89       	ldd	r22, Y+21	; 0x15
    2162:	7e 89       	ldd	r23, Y+22	; 0x16
    2164:	8f 89       	ldd	r24, Y+23	; 0x17
    2166:	98 8d       	ldd	r25, Y+24	; 0x18
    2168:	20 e0       	ldi	r18, 0x00	; 0
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	40 e8       	ldi	r20, 0x80	; 128
    216e:	5f e3       	ldi	r21, 0x3F	; 63
    2170:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2174:	88 23       	and	r24, r24
    2176:	2c f4       	brge	.+10     	; 0x2182 <HLCD_voidInit+0x502>
		__ticks = 1;
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	9c 8b       	std	Y+20, r25	; 0x14
    217e:	8b 8b       	std	Y+19, r24	; 0x13
    2180:	3f c0       	rjmp	.+126    	; 0x2200 <HLCD_voidInit+0x580>
	else if (__tmp > 65535)
    2182:	6d 89       	ldd	r22, Y+21	; 0x15
    2184:	7e 89       	ldd	r23, Y+22	; 0x16
    2186:	8f 89       	ldd	r24, Y+23	; 0x17
    2188:	98 8d       	ldd	r25, Y+24	; 0x18
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	3f ef       	ldi	r19, 0xFF	; 255
    218e:	4f e7       	ldi	r20, 0x7F	; 127
    2190:	57 e4       	ldi	r21, 0x47	; 71
    2192:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2196:	18 16       	cp	r1, r24
    2198:	4c f5       	brge	.+82     	; 0x21ec <HLCD_voidInit+0x56c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    219a:	69 8d       	ldd	r22, Y+25	; 0x19
    219c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    219e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	40 e2       	ldi	r20, 0x20	; 32
    21a8:	51 e4       	ldi	r21, 0x41	; 65
    21aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21ae:	dc 01       	movw	r26, r24
    21b0:	cb 01       	movw	r24, r22
    21b2:	bc 01       	movw	r22, r24
    21b4:	cd 01       	movw	r24, r26
    21b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	9c 8b       	std	Y+20, r25	; 0x14
    21c0:	8b 8b       	std	Y+19, r24	; 0x13
    21c2:	0f c0       	rjmp	.+30     	; 0x21e2 <HLCD_voidInit+0x562>
    21c4:	88 ec       	ldi	r24, 0xC8	; 200
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	9a 8b       	std	Y+18, r25	; 0x12
    21ca:	89 8b       	std	Y+17, r24	; 0x11
    21cc:	89 89       	ldd	r24, Y+17	; 0x11
    21ce:	9a 89       	ldd	r25, Y+18	; 0x12
    21d0:	01 97       	sbiw	r24, 0x01	; 1
    21d2:	f1 f7       	brne	.-4      	; 0x21d0 <HLCD_voidInit+0x550>
    21d4:	9a 8b       	std	Y+18, r25	; 0x12
    21d6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d8:	8b 89       	ldd	r24, Y+19	; 0x13
    21da:	9c 89       	ldd	r25, Y+20	; 0x14
    21dc:	01 97       	sbiw	r24, 0x01	; 1
    21de:	9c 8b       	std	Y+20, r25	; 0x14
    21e0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e2:	8b 89       	ldd	r24, Y+19	; 0x13
    21e4:	9c 89       	ldd	r25, Y+20	; 0x14
    21e6:	00 97       	sbiw	r24, 0x00	; 0
    21e8:	69 f7       	brne	.-38     	; 0x21c4 <HLCD_voidInit+0x544>
    21ea:	14 c0       	rjmp	.+40     	; 0x2214 <HLCD_voidInit+0x594>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ec:	6d 89       	ldd	r22, Y+21	; 0x15
    21ee:	7e 89       	ldd	r23, Y+22	; 0x16
    21f0:	8f 89       	ldd	r24, Y+23	; 0x17
    21f2:	98 8d       	ldd	r25, Y+24	; 0x18
    21f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21f8:	dc 01       	movw	r26, r24
    21fa:	cb 01       	movw	r24, r22
    21fc:	9c 8b       	std	Y+20, r25	; 0x14
    21fe:	8b 8b       	std	Y+19, r24	; 0x13
    2200:	8b 89       	ldd	r24, Y+19	; 0x13
    2202:	9c 89       	ldd	r25, Y+20	; 0x14
    2204:	98 8b       	std	Y+16, r25	; 0x10
    2206:	8f 87       	std	Y+15, r24	; 0x0f
    2208:	8f 85       	ldd	r24, Y+15	; 0x0f
    220a:	98 89       	ldd	r25, Y+16	; 0x10
    220c:	01 97       	sbiw	r24, 0x01	; 1
    220e:	f1 f7       	brne	.-4      	; 0x220c <HLCD_voidInit+0x58c>
    2210:	98 8b       	std	Y+16, r25	; 0x10
    2212:	8f 87       	std	Y+15, r24	; 0x0f
		
		/* Wait for command to settle */
	    _delay_ms (10) ;
	    
	    /** Entry mode set */
	    HLCD_voidSendCmd (CMD_ENTRY_MODE) ;
    2214:	86 e0       	ldi	r24, 0x06	; 6
    2216:	0e 94 a4 0b 	call	0x1748	; 0x1748 <HLCD_voidSendCmd>
    221a:	80 e0       	ldi	r24, 0x00	; 0
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	a0 e8       	ldi	r26, 0x80	; 128
    2220:	bf e3       	ldi	r27, 0x3F	; 63
    2222:	8b 87       	std	Y+11, r24	; 0x0b
    2224:	9c 87       	std	Y+12, r25	; 0x0c
    2226:	ad 87       	std	Y+13, r26	; 0x0d
    2228:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    222a:	6b 85       	ldd	r22, Y+11	; 0x0b
    222c:	7c 85       	ldd	r23, Y+12	; 0x0c
    222e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2230:	9e 85       	ldd	r25, Y+14	; 0x0e
    2232:	20 e0       	ldi	r18, 0x00	; 0
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	4a ef       	ldi	r20, 0xFA	; 250
    2238:	54 e4       	ldi	r21, 0x44	; 68
    223a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    223e:	dc 01       	movw	r26, r24
    2240:	cb 01       	movw	r24, r22
    2242:	8f 83       	std	Y+7, r24	; 0x07
    2244:	98 87       	std	Y+8, r25	; 0x08
    2246:	a9 87       	std	Y+9, r26	; 0x09
    2248:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    224a:	6f 81       	ldd	r22, Y+7	; 0x07
    224c:	78 85       	ldd	r23, Y+8	; 0x08
    224e:	89 85       	ldd	r24, Y+9	; 0x09
    2250:	9a 85       	ldd	r25, Y+10	; 0x0a
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	40 e8       	ldi	r20, 0x80	; 128
    2258:	5f e3       	ldi	r21, 0x3F	; 63
    225a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    225e:	88 23       	and	r24, r24
    2260:	2c f4       	brge	.+10     	; 0x226c <HLCD_voidInit+0x5ec>
		__ticks = 1;
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	9e 83       	std	Y+6, r25	; 0x06
    2268:	8d 83       	std	Y+5, r24	; 0x05
    226a:	3f c0       	rjmp	.+126    	; 0x22ea <HLCD_voidInit+0x66a>
	else if (__tmp > 65535)
    226c:	6f 81       	ldd	r22, Y+7	; 0x07
    226e:	78 85       	ldd	r23, Y+8	; 0x08
    2270:	89 85       	ldd	r24, Y+9	; 0x09
    2272:	9a 85       	ldd	r25, Y+10	; 0x0a
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	3f ef       	ldi	r19, 0xFF	; 255
    2278:	4f e7       	ldi	r20, 0x7F	; 127
    227a:	57 e4       	ldi	r21, 0x47	; 71
    227c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2280:	18 16       	cp	r1, r24
    2282:	4c f5       	brge	.+82     	; 0x22d6 <HLCD_voidInit+0x656>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2284:	6b 85       	ldd	r22, Y+11	; 0x0b
    2286:	7c 85       	ldd	r23, Y+12	; 0x0c
    2288:	8d 85       	ldd	r24, Y+13	; 0x0d
    228a:	9e 85       	ldd	r25, Y+14	; 0x0e
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	40 e2       	ldi	r20, 0x20	; 32
    2292:	51 e4       	ldi	r21, 0x41	; 65
    2294:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	bc 01       	movw	r22, r24
    229e:	cd 01       	movw	r24, r26
    22a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	9e 83       	std	Y+6, r25	; 0x06
    22aa:	8d 83       	std	Y+5, r24	; 0x05
    22ac:	0f c0       	rjmp	.+30     	; 0x22cc <HLCD_voidInit+0x64c>
    22ae:	88 ec       	ldi	r24, 0xC8	; 200
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	9c 83       	std	Y+4, r25	; 0x04
    22b4:	8b 83       	std	Y+3, r24	; 0x03
    22b6:	8b 81       	ldd	r24, Y+3	; 0x03
    22b8:	9c 81       	ldd	r25, Y+4	; 0x04
    22ba:	01 97       	sbiw	r24, 0x01	; 1
    22bc:	f1 f7       	brne	.-4      	; 0x22ba <HLCD_voidInit+0x63a>
    22be:	9c 83       	std	Y+4, r25	; 0x04
    22c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c2:	8d 81       	ldd	r24, Y+5	; 0x05
    22c4:	9e 81       	ldd	r25, Y+6	; 0x06
    22c6:	01 97       	sbiw	r24, 0x01	; 1
    22c8:	9e 83       	std	Y+6, r25	; 0x06
    22ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22cc:	8d 81       	ldd	r24, Y+5	; 0x05
    22ce:	9e 81       	ldd	r25, Y+6	; 0x06
    22d0:	00 97       	sbiw	r24, 0x00	; 0
    22d2:	69 f7       	brne	.-38     	; 0x22ae <HLCD_voidInit+0x62e>
    22d4:	14 c0       	rjmp	.+40     	; 0x22fe <HLCD_voidInit+0x67e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d6:	6f 81       	ldd	r22, Y+7	; 0x07
    22d8:	78 85       	ldd	r23, Y+8	; 0x08
    22da:	89 85       	ldd	r24, Y+9	; 0x09
    22dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    22de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22e2:	dc 01       	movw	r26, r24
    22e4:	cb 01       	movw	r24, r22
    22e6:	9e 83       	std	Y+6, r25	; 0x06
    22e8:	8d 83       	std	Y+5, r24	; 0x05
    22ea:	8d 81       	ldd	r24, Y+5	; 0x05
    22ec:	9e 81       	ldd	r25, Y+6	; 0x06
    22ee:	9a 83       	std	Y+2, r25	; 0x02
    22f0:	89 83       	std	Y+1, r24	; 0x01
    22f2:	89 81       	ldd	r24, Y+1	; 0x01
    22f4:	9a 81       	ldd	r25, Y+2	; 0x02
    22f6:	01 97       	sbiw	r24, 0x01	; 1
    22f8:	f1 f7       	brne	.-4      	; 0x22f6 <HLCD_voidInit+0x676>
    22fa:	9a 83       	std	Y+2, r25	; 0x02
    22fc:	89 83       	std	Y+1, r24	; 0x01
		/* Wait for command to settle */
	    _delay_ms (1) ;
	#else 
		#error "selecct right mode"
	#endif
}
    22fe:	cc 5a       	subi	r28, 0xAC	; 172
    2300:	df 4f       	sbci	r29, 0xFF	; 255
    2302:	0f b6       	in	r0, 0x3f	; 63
    2304:	f8 94       	cli
    2306:	de bf       	out	0x3e, r29	; 62
    2308:	0f be       	out	0x3f, r0	; 63
    230a:	cd bf       	out	0x3d, r28	; 61
    230c:	cf 91       	pop	r28
    230e:	df 91       	pop	r29
    2310:	1f 91       	pop	r17
    2312:	0f 91       	pop	r16
    2314:	08 95       	ret

00002316 <HLCD_voidSendData>:
void HLCD_voidSendData(u8 A_u8Char)
{
    2316:	0f 93       	push	r16
    2318:	1f 93       	push	r17
    231a:	df 93       	push	r29
    231c:	cf 93       	push	r28
    231e:	cd b7       	in	r28, 0x3d	; 61
    2320:	de b7       	in	r29, 0x3e	; 62
    2322:	c7 54       	subi	r28, 0x47	; 71
    2324:	d0 40       	sbci	r29, 0x00	; 0
    2326:	0f b6       	in	r0, 0x3f	; 63
    2328:	f8 94       	cli
    232a:	de bf       	out	0x3e, r29	; 62
    232c:	0f be       	out	0x3f, r0	; 63
    232e:	cd bf       	out	0x3d, r28	; 61
    2330:	fe 01       	movw	r30, r28
    2332:	e9 5b       	subi	r30, 0xB9	; 185
    2334:	ff 4f       	sbci	r31, 0xFF	; 255
    2336:	80 83       	st	Z, r24
		/* Wait for E to settle */
		_delay_ms (2) ;
	
	#elif MODE == FOUR_BIT_CONNECTION
	    /**set read/write to low */
	    MDIO_voidClrPinVal  (LCD_RW_PORT , LCD_RW_PIN ) ;
    2338:	84 e0       	ldi	r24, 0x04	; 4
    233a:	62 e0       	ldi	r22, 0x02	; 2
    233c:	0e 94 0d 09 	call	0x121a	; 0x121a <MDIO_voidClrPinVal>
		
		/**send last four bits of data to last four bit at control register */
		MDIO_voidWriteHighNibble (LCD_DATA_PORT , A_u8Char >> FOUR_BITS) ;
    2340:	fe 01       	movw	r30, r28
    2342:	e9 5b       	subi	r30, 0xB9	; 185
    2344:	ff 4f       	sbci	r31, 0xFF	; 255
    2346:	80 81       	ld	r24, Z
    2348:	98 2f       	mov	r25, r24
    234a:	92 95       	swap	r25
    234c:	9f 70       	andi	r25, 0x0F	; 15
    234e:	84 e0       	ldi	r24, 0x04	; 4
    2350:	69 2f       	mov	r22, r25
    2352:	0e 94 07 0b 	call	0x160e	; 0x160e <MDIO_voidWriteHighNibble>
		
		/**set register select to low */
		MDIO_voidSetPinVal  (LCD_RS_PORT , LCD_RS_PIN ) ;
    2356:	84 e0       	ldi	r24, 0x04	; 4
    2358:	61 e0       	ldi	r22, 0x01	; 1
    235a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MDIO_voidSetPinVal>
		
		/**set enable to high */
		MDIO_voidSetPinVal  (LCD_EN_PORT , LCD_EN_PIN ) ;
    235e:	84 e0       	ldi	r24, 0x04	; 4
    2360:	63 e0       	ldi	r22, 0x03	; 3
    2362:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MDIO_voidSetPinVal>
    2366:	fe 01       	movw	r30, r28
    2368:	ed 5b       	subi	r30, 0xBD	; 189
    236a:	ff 4f       	sbci	r31, 0xFF	; 255
    236c:	80 e0       	ldi	r24, 0x00	; 0
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	a0 e0       	ldi	r26, 0x00	; 0
    2372:	b0 e4       	ldi	r27, 0x40	; 64
    2374:	80 83       	st	Z, r24
    2376:	91 83       	std	Z+1, r25	; 0x01
    2378:	a2 83       	std	Z+2, r26	; 0x02
    237a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    237c:	8e 01       	movw	r16, r28
    237e:	01 5c       	subi	r16, 0xC1	; 193
    2380:	1f 4f       	sbci	r17, 0xFF	; 255
    2382:	fe 01       	movw	r30, r28
    2384:	ed 5b       	subi	r30, 0xBD	; 189
    2386:	ff 4f       	sbci	r31, 0xFF	; 255
    2388:	60 81       	ld	r22, Z
    238a:	71 81       	ldd	r23, Z+1	; 0x01
    238c:	82 81       	ldd	r24, Z+2	; 0x02
    238e:	93 81       	ldd	r25, Z+3	; 0x03
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	4a ef       	ldi	r20, 0xFA	; 250
    2396:	54 e4       	ldi	r21, 0x44	; 68
    2398:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    239c:	dc 01       	movw	r26, r24
    239e:	cb 01       	movw	r24, r22
    23a0:	f8 01       	movw	r30, r16
    23a2:	80 83       	st	Z, r24
    23a4:	91 83       	std	Z+1, r25	; 0x01
    23a6:	a2 83       	std	Z+2, r26	; 0x02
    23a8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23aa:	fe 01       	movw	r30, r28
    23ac:	ff 96       	adiw	r30, 0x3f	; 63
    23ae:	60 81       	ld	r22, Z
    23b0:	71 81       	ldd	r23, Z+1	; 0x01
    23b2:	82 81       	ldd	r24, Z+2	; 0x02
    23b4:	93 81       	ldd	r25, Z+3	; 0x03
    23b6:	20 e0       	ldi	r18, 0x00	; 0
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	40 e8       	ldi	r20, 0x80	; 128
    23bc:	5f e3       	ldi	r21, 0x3F	; 63
    23be:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23c2:	88 23       	and	r24, r24
    23c4:	2c f4       	brge	.+10     	; 0x23d0 <HLCD_voidSendData+0xba>
		__ticks = 1;
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	9e af       	std	Y+62, r25	; 0x3e
    23cc:	8d af       	std	Y+61, r24	; 0x3d
    23ce:	46 c0       	rjmp	.+140    	; 0x245c <HLCD_voidSendData+0x146>
	else if (__tmp > 65535)
    23d0:	fe 01       	movw	r30, r28
    23d2:	ff 96       	adiw	r30, 0x3f	; 63
    23d4:	60 81       	ld	r22, Z
    23d6:	71 81       	ldd	r23, Z+1	; 0x01
    23d8:	82 81       	ldd	r24, Z+2	; 0x02
    23da:	93 81       	ldd	r25, Z+3	; 0x03
    23dc:	20 e0       	ldi	r18, 0x00	; 0
    23de:	3f ef       	ldi	r19, 0xFF	; 255
    23e0:	4f e7       	ldi	r20, 0x7F	; 127
    23e2:	57 e4       	ldi	r21, 0x47	; 71
    23e4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23e8:	18 16       	cp	r1, r24
    23ea:	64 f5       	brge	.+88     	; 0x2444 <HLCD_voidSendData+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ec:	fe 01       	movw	r30, r28
    23ee:	ed 5b       	subi	r30, 0xBD	; 189
    23f0:	ff 4f       	sbci	r31, 0xFF	; 255
    23f2:	60 81       	ld	r22, Z
    23f4:	71 81       	ldd	r23, Z+1	; 0x01
    23f6:	82 81       	ldd	r24, Z+2	; 0x02
    23f8:	93 81       	ldd	r25, Z+3	; 0x03
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	40 e2       	ldi	r20, 0x20	; 32
    2400:	51 e4       	ldi	r21, 0x41	; 65
    2402:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2406:	dc 01       	movw	r26, r24
    2408:	cb 01       	movw	r24, r22
    240a:	bc 01       	movw	r22, r24
    240c:	cd 01       	movw	r24, r26
    240e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	9e af       	std	Y+62, r25	; 0x3e
    2418:	8d af       	std	Y+61, r24	; 0x3d
    241a:	0f c0       	rjmp	.+30     	; 0x243a <HLCD_voidSendData+0x124>
    241c:	88 ec       	ldi	r24, 0xC8	; 200
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	9c af       	std	Y+60, r25	; 0x3c
    2422:	8b af       	std	Y+59, r24	; 0x3b
    2424:	8b ad       	ldd	r24, Y+59	; 0x3b
    2426:	9c ad       	ldd	r25, Y+60	; 0x3c
    2428:	01 97       	sbiw	r24, 0x01	; 1
    242a:	f1 f7       	brne	.-4      	; 0x2428 <HLCD_voidSendData+0x112>
    242c:	9c af       	std	Y+60, r25	; 0x3c
    242e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2430:	8d ad       	ldd	r24, Y+61	; 0x3d
    2432:	9e ad       	ldd	r25, Y+62	; 0x3e
    2434:	01 97       	sbiw	r24, 0x01	; 1
    2436:	9e af       	std	Y+62, r25	; 0x3e
    2438:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    243a:	8d ad       	ldd	r24, Y+61	; 0x3d
    243c:	9e ad       	ldd	r25, Y+62	; 0x3e
    243e:	00 97       	sbiw	r24, 0x00	; 0
    2440:	69 f7       	brne	.-38     	; 0x241c <HLCD_voidSendData+0x106>
    2442:	16 c0       	rjmp	.+44     	; 0x2470 <HLCD_voidSendData+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2444:	fe 01       	movw	r30, r28
    2446:	ff 96       	adiw	r30, 0x3f	; 63
    2448:	60 81       	ld	r22, Z
    244a:	71 81       	ldd	r23, Z+1	; 0x01
    244c:	82 81       	ldd	r24, Z+2	; 0x02
    244e:	93 81       	ldd	r25, Z+3	; 0x03
    2450:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	9e af       	std	Y+62, r25	; 0x3e
    245a:	8d af       	std	Y+61, r24	; 0x3d
    245c:	8d ad       	ldd	r24, Y+61	; 0x3d
    245e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2460:	9a af       	std	Y+58, r25	; 0x3a
    2462:	89 af       	std	Y+57, r24	; 0x39
    2464:	89 ad       	ldd	r24, Y+57	; 0x39
    2466:	9a ad       	ldd	r25, Y+58	; 0x3a
    2468:	01 97       	sbiw	r24, 0x01	; 1
    246a:	f1 f7       	brne	.-4      	; 0x2468 <HLCD_voidSendData+0x152>
    246c:	9a af       	std	Y+58, r25	; 0x3a
    246e:	89 af       	std	Y+57, r24	; 0x39
		
		/* Wait for E to settle */
		_delay_ms (2) ;
		
		/**set enable to low */
		MDIO_voidClrPinVal  (LCD_EN_PORT , LCD_EN_PIN ) ;
    2470:	84 e0       	ldi	r24, 0x04	; 4
    2472:	63 e0       	ldi	r22, 0x03	; 3
    2474:	0e 94 0d 09 	call	0x121a	; 0x121a <MDIO_voidClrPinVal>
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	a0 e0       	ldi	r26, 0x00	; 0
    247e:	b0 e4       	ldi	r27, 0x40	; 64
    2480:	8d ab       	std	Y+53, r24	; 0x35
    2482:	9e ab       	std	Y+54, r25	; 0x36
    2484:	af ab       	std	Y+55, r26	; 0x37
    2486:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2488:	6d a9       	ldd	r22, Y+53	; 0x35
    248a:	7e a9       	ldd	r23, Y+54	; 0x36
    248c:	8f a9       	ldd	r24, Y+55	; 0x37
    248e:	98 ad       	ldd	r25, Y+56	; 0x38
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	4a ef       	ldi	r20, 0xFA	; 250
    2496:	54 e4       	ldi	r21, 0x44	; 68
    2498:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	89 ab       	std	Y+49, r24	; 0x31
    24a2:	9a ab       	std	Y+50, r25	; 0x32
    24a4:	ab ab       	std	Y+51, r26	; 0x33
    24a6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    24a8:	69 a9       	ldd	r22, Y+49	; 0x31
    24aa:	7a a9       	ldd	r23, Y+50	; 0x32
    24ac:	8b a9       	ldd	r24, Y+51	; 0x33
    24ae:	9c a9       	ldd	r25, Y+52	; 0x34
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	40 e8       	ldi	r20, 0x80	; 128
    24b6:	5f e3       	ldi	r21, 0x3F	; 63
    24b8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    24bc:	88 23       	and	r24, r24
    24be:	2c f4       	brge	.+10     	; 0x24ca <HLCD_voidSendData+0x1b4>
		__ticks = 1;
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	98 ab       	std	Y+48, r25	; 0x30
    24c6:	8f a7       	std	Y+47, r24	; 0x2f
    24c8:	3f c0       	rjmp	.+126    	; 0x2548 <HLCD_voidSendData+0x232>
	else if (__tmp > 65535)
    24ca:	69 a9       	ldd	r22, Y+49	; 0x31
    24cc:	7a a9       	ldd	r23, Y+50	; 0x32
    24ce:	8b a9       	ldd	r24, Y+51	; 0x33
    24d0:	9c a9       	ldd	r25, Y+52	; 0x34
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	3f ef       	ldi	r19, 0xFF	; 255
    24d6:	4f e7       	ldi	r20, 0x7F	; 127
    24d8:	57 e4       	ldi	r21, 0x47	; 71
    24da:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    24de:	18 16       	cp	r1, r24
    24e0:	4c f5       	brge	.+82     	; 0x2534 <HLCD_voidSendData+0x21e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e2:	6d a9       	ldd	r22, Y+53	; 0x35
    24e4:	7e a9       	ldd	r23, Y+54	; 0x36
    24e6:	8f a9       	ldd	r24, Y+55	; 0x37
    24e8:	98 ad       	ldd	r25, Y+56	; 0x38
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	40 e2       	ldi	r20, 0x20	; 32
    24f0:	51 e4       	ldi	r21, 0x41	; 65
    24f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	bc 01       	movw	r22, r24
    24fc:	cd 01       	movw	r24, r26
    24fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	98 ab       	std	Y+48, r25	; 0x30
    2508:	8f a7       	std	Y+47, r24	; 0x2f
    250a:	0f c0       	rjmp	.+30     	; 0x252a <HLCD_voidSendData+0x214>
    250c:	88 ec       	ldi	r24, 0xC8	; 200
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	9e a7       	std	Y+46, r25	; 0x2e
    2512:	8d a7       	std	Y+45, r24	; 0x2d
    2514:	8d a5       	ldd	r24, Y+45	; 0x2d
    2516:	9e a5       	ldd	r25, Y+46	; 0x2e
    2518:	01 97       	sbiw	r24, 0x01	; 1
    251a:	f1 f7       	brne	.-4      	; 0x2518 <HLCD_voidSendData+0x202>
    251c:	9e a7       	std	Y+46, r25	; 0x2e
    251e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2520:	8f a5       	ldd	r24, Y+47	; 0x2f
    2522:	98 a9       	ldd	r25, Y+48	; 0x30
    2524:	01 97       	sbiw	r24, 0x01	; 1
    2526:	98 ab       	std	Y+48, r25	; 0x30
    2528:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    252a:	8f a5       	ldd	r24, Y+47	; 0x2f
    252c:	98 a9       	ldd	r25, Y+48	; 0x30
    252e:	00 97       	sbiw	r24, 0x00	; 0
    2530:	69 f7       	brne	.-38     	; 0x250c <HLCD_voidSendData+0x1f6>
    2532:	14 c0       	rjmp	.+40     	; 0x255c <HLCD_voidSendData+0x246>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2534:	69 a9       	ldd	r22, Y+49	; 0x31
    2536:	7a a9       	ldd	r23, Y+50	; 0x32
    2538:	8b a9       	ldd	r24, Y+51	; 0x33
    253a:	9c a9       	ldd	r25, Y+52	; 0x34
    253c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2540:	dc 01       	movw	r26, r24
    2542:	cb 01       	movw	r24, r22
    2544:	98 ab       	std	Y+48, r25	; 0x30
    2546:	8f a7       	std	Y+47, r24	; 0x2f
    2548:	8f a5       	ldd	r24, Y+47	; 0x2f
    254a:	98 a9       	ldd	r25, Y+48	; 0x30
    254c:	9c a7       	std	Y+44, r25	; 0x2c
    254e:	8b a7       	std	Y+43, r24	; 0x2b
    2550:	8b a5       	ldd	r24, Y+43	; 0x2b
    2552:	9c a5       	ldd	r25, Y+44	; 0x2c
    2554:	01 97       	sbiw	r24, 0x01	; 1
    2556:	f1 f7       	brne	.-4      	; 0x2554 <HLCD_voidSendData+0x23e>
    2558:	9c a7       	std	Y+44, r25	; 0x2c
    255a:	8b a7       	std	Y+43, r24	; 0x2b
		/* Wait for E to settle */
		_delay_ms (2) ;
		
		
		/**set read/write to low */
		MDIO_voidClrPinVal  (LCD_RW_PORT , LCD_RW_PIN ) ;
    255c:	84 e0       	ldi	r24, 0x04	; 4
    255e:	62 e0       	ldi	r22, 0x02	; 2
    2560:	0e 94 0d 09 	call	0x121a	; 0x121a <MDIO_voidClrPinVal>
		
		/**send last four bits of data to last four bit at control register */
		MDIO_voidWriteHighNibble (LCD_DATA_PORT , A_u8Char) ;
    2564:	fe 01       	movw	r30, r28
    2566:	e9 5b       	subi	r30, 0xB9	; 185
    2568:	ff 4f       	sbci	r31, 0xFF	; 255
    256a:	84 e0       	ldi	r24, 0x04	; 4
    256c:	60 81       	ld	r22, Z
    256e:	0e 94 07 0b 	call	0x160e	; 0x160e <MDIO_voidWriteHighNibble>
		
		/**set register select to low */
		MDIO_voidSetPinVal  (LCD_RS_PORT , LCD_RS_PIN ) ;
    2572:	84 e0       	ldi	r24, 0x04	; 4
    2574:	61 e0       	ldi	r22, 0x01	; 1
    2576:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MDIO_voidSetPinVal>
		
		/**set enable to high */
		MDIO_voidSetPinVal  (LCD_EN_PORT , LCD_EN_PIN ) ;
    257a:	84 e0       	ldi	r24, 0x04	; 4
    257c:	63 e0       	ldi	r22, 0x03	; 3
    257e:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MDIO_voidSetPinVal>
    2582:	80 e0       	ldi	r24, 0x00	; 0
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	a0 e0       	ldi	r26, 0x00	; 0
    2588:	b0 e4       	ldi	r27, 0x40	; 64
    258a:	8f a3       	std	Y+39, r24	; 0x27
    258c:	98 a7       	std	Y+40, r25	; 0x28
    258e:	a9 a7       	std	Y+41, r26	; 0x29
    2590:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2592:	6f a1       	ldd	r22, Y+39	; 0x27
    2594:	78 a5       	ldd	r23, Y+40	; 0x28
    2596:	89 a5       	ldd	r24, Y+41	; 0x29
    2598:	9a a5       	ldd	r25, Y+42	; 0x2a
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	4a ef       	ldi	r20, 0xFA	; 250
    25a0:	54 e4       	ldi	r21, 0x44	; 68
    25a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	8b a3       	std	Y+35, r24	; 0x23
    25ac:	9c a3       	std	Y+36, r25	; 0x24
    25ae:	ad a3       	std	Y+37, r26	; 0x25
    25b0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25b2:	6b a1       	ldd	r22, Y+35	; 0x23
    25b4:	7c a1       	ldd	r23, Y+36	; 0x24
    25b6:	8d a1       	ldd	r24, Y+37	; 0x25
    25b8:	9e a1       	ldd	r25, Y+38	; 0x26
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	40 e8       	ldi	r20, 0x80	; 128
    25c0:	5f e3       	ldi	r21, 0x3F	; 63
    25c2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    25c6:	88 23       	and	r24, r24
    25c8:	2c f4       	brge	.+10     	; 0x25d4 <HLCD_voidSendData+0x2be>
		__ticks = 1;
    25ca:	81 e0       	ldi	r24, 0x01	; 1
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	9a a3       	std	Y+34, r25	; 0x22
    25d0:	89 a3       	std	Y+33, r24	; 0x21
    25d2:	3f c0       	rjmp	.+126    	; 0x2652 <HLCD_voidSendData+0x33c>
	else if (__tmp > 65535)
    25d4:	6b a1       	ldd	r22, Y+35	; 0x23
    25d6:	7c a1       	ldd	r23, Y+36	; 0x24
    25d8:	8d a1       	ldd	r24, Y+37	; 0x25
    25da:	9e a1       	ldd	r25, Y+38	; 0x26
    25dc:	20 e0       	ldi	r18, 0x00	; 0
    25de:	3f ef       	ldi	r19, 0xFF	; 255
    25e0:	4f e7       	ldi	r20, 0x7F	; 127
    25e2:	57 e4       	ldi	r21, 0x47	; 71
    25e4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    25e8:	18 16       	cp	r1, r24
    25ea:	4c f5       	brge	.+82     	; 0x263e <HLCD_voidSendData+0x328>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ec:	6f a1       	ldd	r22, Y+39	; 0x27
    25ee:	78 a5       	ldd	r23, Y+40	; 0x28
    25f0:	89 a5       	ldd	r24, Y+41	; 0x29
    25f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    25f4:	20 e0       	ldi	r18, 0x00	; 0
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	40 e2       	ldi	r20, 0x20	; 32
    25fa:	51 e4       	ldi	r21, 0x41	; 65
    25fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	bc 01       	movw	r22, r24
    2606:	cd 01       	movw	r24, r26
    2608:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    260c:	dc 01       	movw	r26, r24
    260e:	cb 01       	movw	r24, r22
    2610:	9a a3       	std	Y+34, r25	; 0x22
    2612:	89 a3       	std	Y+33, r24	; 0x21
    2614:	0f c0       	rjmp	.+30     	; 0x2634 <HLCD_voidSendData+0x31e>
    2616:	88 ec       	ldi	r24, 0xC8	; 200
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	98 a3       	std	Y+32, r25	; 0x20
    261c:	8f 8f       	std	Y+31, r24	; 0x1f
    261e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2620:	98 a1       	ldd	r25, Y+32	; 0x20
    2622:	01 97       	sbiw	r24, 0x01	; 1
    2624:	f1 f7       	brne	.-4      	; 0x2622 <HLCD_voidSendData+0x30c>
    2626:	98 a3       	std	Y+32, r25	; 0x20
    2628:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    262a:	89 a1       	ldd	r24, Y+33	; 0x21
    262c:	9a a1       	ldd	r25, Y+34	; 0x22
    262e:	01 97       	sbiw	r24, 0x01	; 1
    2630:	9a a3       	std	Y+34, r25	; 0x22
    2632:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2634:	89 a1       	ldd	r24, Y+33	; 0x21
    2636:	9a a1       	ldd	r25, Y+34	; 0x22
    2638:	00 97       	sbiw	r24, 0x00	; 0
    263a:	69 f7       	brne	.-38     	; 0x2616 <HLCD_voidSendData+0x300>
    263c:	14 c0       	rjmp	.+40     	; 0x2666 <HLCD_voidSendData+0x350>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    263e:	6b a1       	ldd	r22, Y+35	; 0x23
    2640:	7c a1       	ldd	r23, Y+36	; 0x24
    2642:	8d a1       	ldd	r24, Y+37	; 0x25
    2644:	9e a1       	ldd	r25, Y+38	; 0x26
    2646:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    264a:	dc 01       	movw	r26, r24
    264c:	cb 01       	movw	r24, r22
    264e:	9a a3       	std	Y+34, r25	; 0x22
    2650:	89 a3       	std	Y+33, r24	; 0x21
    2652:	89 a1       	ldd	r24, Y+33	; 0x21
    2654:	9a a1       	ldd	r25, Y+34	; 0x22
    2656:	9e 8f       	std	Y+30, r25	; 0x1e
    2658:	8d 8f       	std	Y+29, r24	; 0x1d
    265a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    265c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    265e:	01 97       	sbiw	r24, 0x01	; 1
    2660:	f1 f7       	brne	.-4      	; 0x265e <HLCD_voidSendData+0x348>
    2662:	9e 8f       	std	Y+30, r25	; 0x1e
    2664:	8d 8f       	std	Y+29, r24	; 0x1d
		
		/* Wait for E to settle */
		_delay_ms (2) ;
		
		/**set enable to low */
		MDIO_voidClrPinVal  (LCD_EN_PORT , LCD_EN_PIN ) ;
    2666:	84 e0       	ldi	r24, 0x04	; 4
    2668:	63 e0       	ldi	r22, 0x03	; 3
    266a:	0e 94 0d 09 	call	0x121a	; 0x121a <MDIO_voidClrPinVal>
    266e:	80 e0       	ldi	r24, 0x00	; 0
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	a0 e0       	ldi	r26, 0x00	; 0
    2674:	b0 e4       	ldi	r27, 0x40	; 64
    2676:	89 8f       	std	Y+25, r24	; 0x19
    2678:	9a 8f       	std	Y+26, r25	; 0x1a
    267a:	ab 8f       	std	Y+27, r26	; 0x1b
    267c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    267e:	69 8d       	ldd	r22, Y+25	; 0x19
    2680:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2682:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2684:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	4a ef       	ldi	r20, 0xFA	; 250
    268c:	54 e4       	ldi	r21, 0x44	; 68
    268e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2692:	dc 01       	movw	r26, r24
    2694:	cb 01       	movw	r24, r22
    2696:	8d 8b       	std	Y+21, r24	; 0x15
    2698:	9e 8b       	std	Y+22, r25	; 0x16
    269a:	af 8b       	std	Y+23, r26	; 0x17
    269c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    269e:	6d 89       	ldd	r22, Y+21	; 0x15
    26a0:	7e 89       	ldd	r23, Y+22	; 0x16
    26a2:	8f 89       	ldd	r24, Y+23	; 0x17
    26a4:	98 8d       	ldd	r25, Y+24	; 0x18
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	40 e8       	ldi	r20, 0x80	; 128
    26ac:	5f e3       	ldi	r21, 0x3F	; 63
    26ae:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    26b2:	88 23       	and	r24, r24
    26b4:	2c f4       	brge	.+10     	; 0x26c0 <HLCD_voidSendData+0x3aa>
		__ticks = 1;
    26b6:	81 e0       	ldi	r24, 0x01	; 1
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	9c 8b       	std	Y+20, r25	; 0x14
    26bc:	8b 8b       	std	Y+19, r24	; 0x13
    26be:	3f c0       	rjmp	.+126    	; 0x273e <HLCD_voidSendData+0x428>
	else if (__tmp > 65535)
    26c0:	6d 89       	ldd	r22, Y+21	; 0x15
    26c2:	7e 89       	ldd	r23, Y+22	; 0x16
    26c4:	8f 89       	ldd	r24, Y+23	; 0x17
    26c6:	98 8d       	ldd	r25, Y+24	; 0x18
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	3f ef       	ldi	r19, 0xFF	; 255
    26cc:	4f e7       	ldi	r20, 0x7F	; 127
    26ce:	57 e4       	ldi	r21, 0x47	; 71
    26d0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    26d4:	18 16       	cp	r1, r24
    26d6:	4c f5       	brge	.+82     	; 0x272a <HLCD_voidSendData+0x414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d8:	69 8d       	ldd	r22, Y+25	; 0x19
    26da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	40 e2       	ldi	r20, 0x20	; 32
    26e6:	51 e4       	ldi	r21, 0x41	; 65
    26e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26ec:	dc 01       	movw	r26, r24
    26ee:	cb 01       	movw	r24, r22
    26f0:	bc 01       	movw	r22, r24
    26f2:	cd 01       	movw	r24, r26
    26f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	9c 8b       	std	Y+20, r25	; 0x14
    26fe:	8b 8b       	std	Y+19, r24	; 0x13
    2700:	0f c0       	rjmp	.+30     	; 0x2720 <HLCD_voidSendData+0x40a>
    2702:	88 ec       	ldi	r24, 0xC8	; 200
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	9a 8b       	std	Y+18, r25	; 0x12
    2708:	89 8b       	std	Y+17, r24	; 0x11
    270a:	89 89       	ldd	r24, Y+17	; 0x11
    270c:	9a 89       	ldd	r25, Y+18	; 0x12
    270e:	01 97       	sbiw	r24, 0x01	; 1
    2710:	f1 f7       	brne	.-4      	; 0x270e <HLCD_voidSendData+0x3f8>
    2712:	9a 8b       	std	Y+18, r25	; 0x12
    2714:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2716:	8b 89       	ldd	r24, Y+19	; 0x13
    2718:	9c 89       	ldd	r25, Y+20	; 0x14
    271a:	01 97       	sbiw	r24, 0x01	; 1
    271c:	9c 8b       	std	Y+20, r25	; 0x14
    271e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2720:	8b 89       	ldd	r24, Y+19	; 0x13
    2722:	9c 89       	ldd	r25, Y+20	; 0x14
    2724:	00 97       	sbiw	r24, 0x00	; 0
    2726:	69 f7       	brne	.-38     	; 0x2702 <HLCD_voidSendData+0x3ec>
    2728:	14 c0       	rjmp	.+40     	; 0x2752 <HLCD_voidSendData+0x43c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    272a:	6d 89       	ldd	r22, Y+21	; 0x15
    272c:	7e 89       	ldd	r23, Y+22	; 0x16
    272e:	8f 89       	ldd	r24, Y+23	; 0x17
    2730:	98 8d       	ldd	r25, Y+24	; 0x18
    2732:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2736:	dc 01       	movw	r26, r24
    2738:	cb 01       	movw	r24, r22
    273a:	9c 8b       	std	Y+20, r25	; 0x14
    273c:	8b 8b       	std	Y+19, r24	; 0x13
    273e:	8b 89       	ldd	r24, Y+19	; 0x13
    2740:	9c 89       	ldd	r25, Y+20	; 0x14
    2742:	98 8b       	std	Y+16, r25	; 0x10
    2744:	8f 87       	std	Y+15, r24	; 0x0f
    2746:	8f 85       	ldd	r24, Y+15	; 0x0f
    2748:	98 89       	ldd	r25, Y+16	; 0x10
    274a:	01 97       	sbiw	r24, 0x01	; 1
    274c:	f1 f7       	brne	.-4      	; 0x274a <HLCD_voidSendData+0x434>
    274e:	98 8b       	std	Y+16, r25	; 0x10
    2750:	8f 87       	std	Y+15, r24	; 0x0f
    2752:	80 e0       	ldi	r24, 0x00	; 0
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	a0 e8       	ldi	r26, 0x80	; 128
    2758:	bf e3       	ldi	r27, 0x3F	; 63
    275a:	8b 87       	std	Y+11, r24	; 0x0b
    275c:	9c 87       	std	Y+12, r25	; 0x0c
    275e:	ad 87       	std	Y+13, r26	; 0x0d
    2760:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2762:	6b 85       	ldd	r22, Y+11	; 0x0b
    2764:	7c 85       	ldd	r23, Y+12	; 0x0c
    2766:	8d 85       	ldd	r24, Y+13	; 0x0d
    2768:	9e 85       	ldd	r25, Y+14	; 0x0e
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	4a ef       	ldi	r20, 0xFA	; 250
    2770:	54 e4       	ldi	r21, 0x44	; 68
    2772:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2776:	dc 01       	movw	r26, r24
    2778:	cb 01       	movw	r24, r22
    277a:	8f 83       	std	Y+7, r24	; 0x07
    277c:	98 87       	std	Y+8, r25	; 0x08
    277e:	a9 87       	std	Y+9, r26	; 0x09
    2780:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2782:	6f 81       	ldd	r22, Y+7	; 0x07
    2784:	78 85       	ldd	r23, Y+8	; 0x08
    2786:	89 85       	ldd	r24, Y+9	; 0x09
    2788:	9a 85       	ldd	r25, Y+10	; 0x0a
    278a:	20 e0       	ldi	r18, 0x00	; 0
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	40 e8       	ldi	r20, 0x80	; 128
    2790:	5f e3       	ldi	r21, 0x3F	; 63
    2792:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2796:	88 23       	and	r24, r24
    2798:	2c f4       	brge	.+10     	; 0x27a4 <HLCD_voidSendData+0x48e>
		__ticks = 1;
    279a:	81 e0       	ldi	r24, 0x01	; 1
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	9e 83       	std	Y+6, r25	; 0x06
    27a0:	8d 83       	std	Y+5, r24	; 0x05
    27a2:	3f c0       	rjmp	.+126    	; 0x2822 <HLCD_voidSendData+0x50c>
	else if (__tmp > 65535)
    27a4:	6f 81       	ldd	r22, Y+7	; 0x07
    27a6:	78 85       	ldd	r23, Y+8	; 0x08
    27a8:	89 85       	ldd	r24, Y+9	; 0x09
    27aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ac:	20 e0       	ldi	r18, 0x00	; 0
    27ae:	3f ef       	ldi	r19, 0xFF	; 255
    27b0:	4f e7       	ldi	r20, 0x7F	; 127
    27b2:	57 e4       	ldi	r21, 0x47	; 71
    27b4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    27b8:	18 16       	cp	r1, r24
    27ba:	4c f5       	brge	.+82     	; 0x280e <HLCD_voidSendData+0x4f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    27be:	7c 85       	ldd	r23, Y+12	; 0x0c
    27c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    27c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	40 e2       	ldi	r20, 0x20	; 32
    27ca:	51 e4       	ldi	r21, 0x41	; 65
    27cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	bc 01       	movw	r22, r24
    27d6:	cd 01       	movw	r24, r26
    27d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27dc:	dc 01       	movw	r26, r24
    27de:	cb 01       	movw	r24, r22
    27e0:	9e 83       	std	Y+6, r25	; 0x06
    27e2:	8d 83       	std	Y+5, r24	; 0x05
    27e4:	0f c0       	rjmp	.+30     	; 0x2804 <HLCD_voidSendData+0x4ee>
    27e6:	88 ec       	ldi	r24, 0xC8	; 200
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	9c 83       	std	Y+4, r25	; 0x04
    27ec:	8b 83       	std	Y+3, r24	; 0x03
    27ee:	8b 81       	ldd	r24, Y+3	; 0x03
    27f0:	9c 81       	ldd	r25, Y+4	; 0x04
    27f2:	01 97       	sbiw	r24, 0x01	; 1
    27f4:	f1 f7       	brne	.-4      	; 0x27f2 <HLCD_voidSendData+0x4dc>
    27f6:	9c 83       	std	Y+4, r25	; 0x04
    27f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27fa:	8d 81       	ldd	r24, Y+5	; 0x05
    27fc:	9e 81       	ldd	r25, Y+6	; 0x06
    27fe:	01 97       	sbiw	r24, 0x01	; 1
    2800:	9e 83       	std	Y+6, r25	; 0x06
    2802:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2804:	8d 81       	ldd	r24, Y+5	; 0x05
    2806:	9e 81       	ldd	r25, Y+6	; 0x06
    2808:	00 97       	sbiw	r24, 0x00	; 0
    280a:	69 f7       	brne	.-38     	; 0x27e6 <HLCD_voidSendData+0x4d0>
    280c:	14 c0       	rjmp	.+40     	; 0x2836 <HLCD_voidSendData+0x520>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    280e:	6f 81       	ldd	r22, Y+7	; 0x07
    2810:	78 85       	ldd	r23, Y+8	; 0x08
    2812:	89 85       	ldd	r24, Y+9	; 0x09
    2814:	9a 85       	ldd	r25, Y+10	; 0x0a
    2816:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    281a:	dc 01       	movw	r26, r24
    281c:	cb 01       	movw	r24, r22
    281e:	9e 83       	std	Y+6, r25	; 0x06
    2820:	8d 83       	std	Y+5, r24	; 0x05
    2822:	8d 81       	ldd	r24, Y+5	; 0x05
    2824:	9e 81       	ldd	r25, Y+6	; 0x06
    2826:	9a 83       	std	Y+2, r25	; 0x02
    2828:	89 83       	std	Y+1, r24	; 0x01
    282a:	89 81       	ldd	r24, Y+1	; 0x01
    282c:	9a 81       	ldd	r25, Y+2	; 0x02
    282e:	01 97       	sbiw	r24, 0x01	; 1
    2830:	f1 f7       	brne	.-4      	; 0x282e <HLCD_voidSendData+0x518>
    2832:	9a 83       	std	Y+2, r25	; 0x02
    2834:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms (2) ;
	#else 
		 #error "select write mode"
	#endif
	_delay_ms(1) ;
}
    2836:	c9 5b       	subi	r28, 0xB9	; 185
    2838:	df 4f       	sbci	r29, 0xFF	; 255
    283a:	0f b6       	in	r0, 0x3f	; 63
    283c:	f8 94       	cli
    283e:	de bf       	out	0x3e, r29	; 62
    2840:	0f be       	out	0x3f, r0	; 63
    2842:	cd bf       	out	0x3d, r28	; 61
    2844:	cf 91       	pop	r28
    2846:	df 91       	pop	r29
    2848:	1f 91       	pop	r17
    284a:	0f 91       	pop	r16
    284c:	08 95       	ret

0000284e <HLCD_voidDispStr>:

void HLCD_voidDispStr(u8* A_Pu8String)
{
    284e:	df 93       	push	r29
    2850:	cf 93       	push	r28
    2852:	00 d0       	rcall	.+0      	; 0x2854 <HLCD_voidDispStr+0x6>
    2854:	0f 92       	push	r0
    2856:	cd b7       	in	r28, 0x3d	; 61
    2858:	de b7       	in	r29, 0x3e	; 62
    285a:	9b 83       	std	Y+3, r25	; 0x03
    285c:	8a 83       	std	Y+2, r24	; 0x02
	/**Local loop index */
	u8 L_u8Index = 0 ;
    285e:	19 82       	std	Y+1, r1	; 0x01
    2860:	0e c0       	rjmp	.+28     	; 0x287e <HLCD_voidDispStr+0x30>
	while (A_Pu8String [L_u8Index] != '\0')
	{
		/* Write Character on LCD */
		HLCD_voidSendData (A_Pu8String [L_u8Index]) ;
    2862:	89 81       	ldd	r24, Y+1	; 0x01
    2864:	28 2f       	mov	r18, r24
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	8a 81       	ldd	r24, Y+2	; 0x02
    286a:	9b 81       	ldd	r25, Y+3	; 0x03
    286c:	fc 01       	movw	r30, r24
    286e:	e2 0f       	add	r30, r18
    2870:	f3 1f       	adc	r31, r19
    2872:	80 81       	ld	r24, Z
    2874:	0e 94 8b 11 	call	0x2316	; 0x2316 <HLCD_voidSendData>
		
		/* Increment local loop index */
		L_u8Index ++ ;
    2878:	89 81       	ldd	r24, Y+1	; 0x01
    287a:	8f 5f       	subi	r24, 0xFF	; 255
    287c:	89 83       	std	Y+1, r24	; 0x01

void HLCD_voidDispStr(u8* A_Pu8String)
{
	/**Local loop index */
	u8 L_u8Index = 0 ;
	while (A_Pu8String [L_u8Index] != '\0')
    287e:	89 81       	ldd	r24, Y+1	; 0x01
    2880:	28 2f       	mov	r18, r24
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	8a 81       	ldd	r24, Y+2	; 0x02
    2886:	9b 81       	ldd	r25, Y+3	; 0x03
    2888:	fc 01       	movw	r30, r24
    288a:	e2 0f       	add	r30, r18
    288c:	f3 1f       	adc	r31, r19
    288e:	80 81       	ld	r24, Z
    2890:	88 23       	and	r24, r24
    2892:	39 f7       	brne	.-50     	; 0x2862 <HLCD_voidDispStr+0x14>
		HLCD_voidSendData (A_Pu8String [L_u8Index]) ;
		
		/* Increment local loop index */
		L_u8Index ++ ;
	}
}
    2894:	0f 90       	pop	r0
    2896:	0f 90       	pop	r0
    2898:	0f 90       	pop	r0
    289a:	cf 91       	pop	r28
    289c:	df 91       	pop	r29
    289e:	08 95       	ret

000028a0 <HLCD_voidDispIntNum>:

void HLCD_voidDispIntNum(u32 A_u32Number)
{
    28a0:	df 93       	push	r29
    28a2:	cf 93       	push	r28
    28a4:	cd b7       	in	r28, 0x3d	; 61
    28a6:	de b7       	in	r29, 0x3e	; 62
    28a8:	a4 97       	sbiw	r28, 0x24	; 36
    28aa:	0f b6       	in	r0, 0x3f	; 63
    28ac:	f8 94       	cli
    28ae:	de bf       	out	0x3e, r29	; 62
    28b0:	0f be       	out	0x3f, r0	; 63
    28b2:	cd bf       	out	0x3d, r28	; 61
    28b4:	69 a3       	std	Y+33, r22	; 0x21
    28b6:	7a a3       	std	Y+34, r23	; 0x22
    28b8:	8b a3       	std	Y+35, r24	; 0x23
    28ba:	9c a3       	std	Y+36, r25	; 0x24
	if (A_u32Number < MIN_INT_NUM && A_u32Number > MAX_INT_NUM)
    28bc:	89 a1       	ldd	r24, Y+33	; 0x21
    28be:	9a a1       	ldd	r25, Y+34	; 0x22
    28c0:	ab a1       	ldd	r26, Y+35	; 0x23
    28c2:	bc a1       	ldd	r27, Y+36	; 0x24
    28c4:	81 30       	cpi	r24, 0x01	; 1
    28c6:	26 e3       	ldi	r18, 0x36	; 54
    28c8:	92 07       	cpc	r25, r18
    28ca:	25 e6       	ldi	r18, 0x65	; 101
    28cc:	a2 07       	cpc	r26, r18
    28ce:	24 ec       	ldi	r18, 0xC4	; 196
    28d0:	b2 07       	cpc	r27, r18
    28d2:	98 f4       	brcc	.+38     	; 0x28fa <HLCD_voidDispIntNum+0x5a>
    28d4:	89 a1       	ldd	r24, Y+33	; 0x21
    28d6:	9a a1       	ldd	r25, Y+34	; 0x22
    28d8:	ab a1       	ldd	r26, Y+35	; 0x23
    28da:	bc a1       	ldd	r27, Y+36	; 0x24
    28dc:	80 30       	cpi	r24, 0x00	; 0
    28de:	2a ec       	ldi	r18, 0xCA	; 202
    28e0:	92 07       	cpc	r25, r18
    28e2:	2a e9       	ldi	r18, 0x9A	; 154
    28e4:	a2 07       	cpc	r26, r18
    28e6:	2b e3       	ldi	r18, 0x3B	; 59
    28e8:	b2 07       	cpc	r27, r18
    28ea:	38 f0       	brcs	.+14     	; 0x28fa <HLCD_voidDispIntNum+0x5a>
	{
		/**
		 * if the integer is more than MAX_INT_NUM or less than MIN_INT_NUM
		          **** "Overflow !!!!" will be displayed
		 */
		HLCD_voidClrScreen () ;
    28ec:	0e 94 48 15 	call	0x2a90	; 0x2a90 <HLCD_voidClrScreen>
		HLCD_voidDispStr ("Overflow !!!!") ;
    28f0:	80 e6       	ldi	r24, 0x60	; 96
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	0e 94 27 14 	call	0x284e	; 0x284e <HLCD_voidDispStr>
    28f8:	1a c0       	rjmp	.+52     	; 0x292e <HLCD_voidDispIntNum+0x8e>
	}
	else
	{
		/**array to stored conversion character*/
	    s8* L_Ps8String [16] = {0} ;
    28fa:	80 e2       	ldi	r24, 0x20	; 32
    28fc:	fe 01       	movw	r30, r28
    28fe:	31 96       	adiw	r30, 0x01	; 1
    2900:	df 01       	movw	r26, r30
    2902:	28 2f       	mov	r18, r24
    2904:	1d 92       	st	X+, r1
    2906:	2a 95       	dec	r18
    2908:	e9 f7       	brne	.-6      	; 0x2904 <HLCD_voidDispIntNum+0x64>

		/** convert integer to string*/
	    ltoa (A_u32Number , (s8*)L_Ps8String , BASE) ;
    290a:	89 a1       	ldd	r24, Y+33	; 0x21
    290c:	9a a1       	ldd	r25, Y+34	; 0x22
    290e:	ab a1       	ldd	r26, Y+35	; 0x23
    2910:	bc a1       	ldd	r27, Y+36	; 0x24
    2912:	9e 01       	movw	r18, r28
    2914:	2f 5f       	subi	r18, 0xFF	; 255
    2916:	3f 4f       	sbci	r19, 0xFF	; 255
    2918:	bc 01       	movw	r22, r24
    291a:	cd 01       	movw	r24, r26
    291c:	a9 01       	movw	r20, r18
    291e:	2a e0       	ldi	r18, 0x0A	; 10
    2920:	30 e0       	ldi	r19, 0x00	; 0
    2922:	0e 94 b2 18 	call	0x3164	; 0x3164 <ltoa>

		/**display number after convesion*/
	    HLCD_voidDispStr ((u8*)L_Ps8String) ;
    2926:	ce 01       	movw	r24, r28
    2928:	01 96       	adiw	r24, 0x01	; 1
    292a:	0e 94 27 14 	call	0x284e	; 0x284e <HLCD_voidDispStr>
	}
}
    292e:	a4 96       	adiw	r28, 0x24	; 36
    2930:	0f b6       	in	r0, 0x3f	; 63
    2932:	f8 94       	cli
    2934:	de bf       	out	0x3e, r29	; 62
    2936:	0f be       	out	0x3f, r0	; 63
    2938:	cd bf       	out	0x3d, r28	; 61
    293a:	cf 91       	pop	r28
    293c:	df 91       	pop	r29
    293e:	08 95       	ret

00002940 <HLCD_voidDispFloatNum>:

void HLCD_voidDispFloatNum(f32 A_f32Number , u8 A_u8AfterDigit)
{
    2940:	ef 92       	push	r14
    2942:	ff 92       	push	r15
    2944:	0f 93       	push	r16
    2946:	1f 93       	push	r17
    2948:	df 93       	push	r29
    294a:	cf 93       	push	r28
    294c:	cd b7       	in	r28, 0x3d	; 61
    294e:	de b7       	in	r29, 0x3e	; 62
    2950:	28 97       	sbiw	r28, 0x08	; 8
    2952:	0f b6       	in	r0, 0x3f	; 63
    2954:	f8 94       	cli
    2956:	de bf       	out	0x3e, r29	; 62
    2958:	0f be       	out	0x3f, r0	; 63
    295a:	cd bf       	out	0x3d, r28	; 61
    295c:	6c 83       	std	Y+4, r22	; 0x04
    295e:	7d 83       	std	Y+5, r23	; 0x05
    2960:	8e 83       	std	Y+6, r24	; 0x06
    2962:	9f 83       	std	Y+7, r25	; 0x07
    2964:	48 87       	std	Y+8, r20	; 0x08
	u16 L_u16AfterDigit = 1 ;
    2966:	81 e0       	ldi	r24, 0x01	; 1
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	9b 83       	std	Y+3, r25	; 0x03
    296c:	8a 83       	std	Y+2, r24	; 0x02
	u8  L_u8Iterator = 0 ;
    296e:	19 82       	std	Y+1, r1	; 0x01
	/** display integer part */
    HLCD_voidDispIntNum ((u32)A_f32Number) ;
    2970:	6c 81       	ldd	r22, Y+4	; 0x04
    2972:	7d 81       	ldd	r23, Y+5	; 0x05
    2974:	8e 81       	ldd	r24, Y+6	; 0x06
    2976:	9f 81       	ldd	r25, Y+7	; 0x07
    2978:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    297c:	dc 01       	movw	r26, r24
    297e:	cb 01       	movw	r24, r22
    2980:	bc 01       	movw	r22, r24
    2982:	cd 01       	movw	r24, r26
    2984:	0e 94 50 14 	call	0x28a0	; 0x28a0 <HLCD_voidDispIntNum>

	/** display dot */
	HLCD_voidSendData   (',') ;
    2988:	8c e2       	ldi	r24, 0x2C	; 44
    298a:	0e 94 8b 11 	call	0x2316	; 0x2316 <HLCD_voidSendData>

	for (L_u8Iterator = 0 ; L_u8Iterator < A_u8AfterDigit ; L_u8Iterator ++)
    298e:	19 82       	std	Y+1, r1	; 0x01
    2990:	11 c0       	rjmp	.+34     	; 0x29b4 <HLCD_voidDispFloatNum+0x74>
	{
		L_u16AfterDigit = L_u16AfterDigit * BASE ;
    2992:	8a 81       	ldd	r24, Y+2	; 0x02
    2994:	9b 81       	ldd	r25, Y+3	; 0x03
    2996:	9c 01       	movw	r18, r24
    2998:	22 0f       	add	r18, r18
    299a:	33 1f       	adc	r19, r19
    299c:	c9 01       	movw	r24, r18
    299e:	88 0f       	add	r24, r24
    29a0:	99 1f       	adc	r25, r25
    29a2:	88 0f       	add	r24, r24
    29a4:	99 1f       	adc	r25, r25
    29a6:	82 0f       	add	r24, r18
    29a8:	93 1f       	adc	r25, r19
    29aa:	9b 83       	std	Y+3, r25	; 0x03
    29ac:	8a 83       	std	Y+2, r24	; 0x02
    HLCD_voidDispIntNum ((u32)A_f32Number) ;

	/** display dot */
	HLCD_voidSendData   (',') ;

	for (L_u8Iterator = 0 ; L_u8Iterator < A_u8AfterDigit ; L_u8Iterator ++)
    29ae:	89 81       	ldd	r24, Y+1	; 0x01
    29b0:	8f 5f       	subi	r24, 0xFF	; 255
    29b2:	89 83       	std	Y+1, r24	; 0x01
    29b4:	99 81       	ldd	r25, Y+1	; 0x01
    29b6:	88 85       	ldd	r24, Y+8	; 0x08
    29b8:	98 17       	cp	r25, r24
    29ba:	58 f3       	brcs	.-42     	; 0x2992 <HLCD_voidDispFloatNum+0x52>
	{
		L_u16AfterDigit = L_u16AfterDigit * BASE ;
	}

	/** display fraction part */
	HLCD_voidDispIntNum ((A_f32Number - (u32) A_f32Number) * L_u16AfterDigit) ;
    29bc:	6c 81       	ldd	r22, Y+4	; 0x04
    29be:	7d 81       	ldd	r23, Y+5	; 0x05
    29c0:	8e 81       	ldd	r24, Y+6	; 0x06
    29c2:	9f 81       	ldd	r25, Y+7	; 0x07
    29c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29c8:	dc 01       	movw	r26, r24
    29ca:	cb 01       	movw	r24, r22
    29cc:	bc 01       	movw	r22, r24
    29ce:	cd 01       	movw	r24, r26
    29d0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    29d4:	9b 01       	movw	r18, r22
    29d6:	ac 01       	movw	r20, r24
    29d8:	6c 81       	ldd	r22, Y+4	; 0x04
    29da:	7d 81       	ldd	r23, Y+5	; 0x05
    29dc:	8e 81       	ldd	r24, Y+6	; 0x06
    29de:	9f 81       	ldd	r25, Y+7	; 0x07
    29e0:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    29e4:	dc 01       	movw	r26, r24
    29e6:	cb 01       	movw	r24, r22
    29e8:	7c 01       	movw	r14, r24
    29ea:	8d 01       	movw	r16, r26
    29ec:	8a 81       	ldd	r24, Y+2	; 0x02
    29ee:	9b 81       	ldd	r25, Y+3	; 0x03
    29f0:	cc 01       	movw	r24, r24
    29f2:	a0 e0       	ldi	r26, 0x00	; 0
    29f4:	b0 e0       	ldi	r27, 0x00	; 0
    29f6:	bc 01       	movw	r22, r24
    29f8:	cd 01       	movw	r24, r26
    29fa:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    29fe:	9b 01       	movw	r18, r22
    2a00:	ac 01       	movw	r20, r24
    2a02:	c8 01       	movw	r24, r16
    2a04:	b7 01       	movw	r22, r14
    2a06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a0a:	dc 01       	movw	r26, r24
    2a0c:	cb 01       	movw	r24, r22
    2a0e:	bc 01       	movw	r22, r24
    2a10:	cd 01       	movw	r24, r26
    2a12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a16:	dc 01       	movw	r26, r24
    2a18:	cb 01       	movw	r24, r22
    2a1a:	bc 01       	movw	r22, r24
    2a1c:	cd 01       	movw	r24, r26
    2a1e:	0e 94 50 14 	call	0x28a0	; 0x28a0 <HLCD_voidDispIntNum>
}
    2a22:	28 96       	adiw	r28, 0x08	; 8
    2a24:	0f b6       	in	r0, 0x3f	; 63
    2a26:	f8 94       	cli
    2a28:	de bf       	out	0x3e, r29	; 62
    2a2a:	0f be       	out	0x3f, r0	; 63
    2a2c:	cd bf       	out	0x3d, r28	; 61
    2a2e:	cf 91       	pop	r28
    2a30:	df 91       	pop	r29
    2a32:	1f 91       	pop	r17
    2a34:	0f 91       	pop	r16
    2a36:	ff 90       	pop	r15
    2a38:	ef 90       	pop	r14
    2a3a:	08 95       	ret

00002a3c <HLCD_voidMovCursor>:

void HLCD_voidMovCursor(u8 A_u8RowId, u8 A_u8ColId)
{
    2a3c:	df 93       	push	r29
    2a3e:	cf 93       	push	r28
    2a40:	00 d0       	rcall	.+0      	; 0x2a42 <HLCD_voidMovCursor+0x6>
    2a42:	0f 92       	push	r0
    2a44:	cd b7       	in	r28, 0x3d	; 61
    2a46:	de b7       	in	r29, 0x3e	; 62
    2a48:	8a 83       	std	Y+2, r24	; 0x02
    2a4a:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8DDRAMAddress ;
	
	/**if the row and col are out of range 
	         *** Do nothing
	  */
	if (A_u8RowId >= MIN_NUM_OF_ROW && A_u8RowId <= MAX_NUM_OF_ROW &&
    2a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4e:	88 23       	and	r24, r24
    2a50:	c9 f0       	breq	.+50     	; 0x2a84 <HLCD_voidMovCursor+0x48>
    2a52:	8a 81       	ldd	r24, Y+2	; 0x02
    2a54:	83 30       	cpi	r24, 0x03	; 3
    2a56:	b0 f4       	brcc	.+44     	; 0x2a84 <HLCD_voidMovCursor+0x48>
    2a58:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5a:	88 23       	and	r24, r24
    2a5c:	99 f0       	breq	.+38     	; 0x2a84 <HLCD_voidMovCursor+0x48>
    2a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a60:	81 31       	cpi	r24, 0x11	; 17
    2a62:	80 f4       	brcc	.+32     	; 0x2a84 <HLCD_voidMovCursor+0x48>
	A_u8ColId >= MIN_NUM_OF_COL && A_u8ColId <= MAX_NUM_OF_COL)
	{
		/**for first row*/
		if (A_u8RowId == LCD_ROW1)
    2a64:	8a 81       	ldd	r24, Y+2	; 0x02
    2a66:	81 30       	cpi	r24, 0x01	; 1
    2a68:	21 f4       	brne	.+8      	; 0x2a72 <HLCD_voidMovCursor+0x36>
		{
			L_u8DDRAMAddress = FIRST_ROW_ADDRESS + A_u8ColId - 1 ;
    2a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6c:	81 58       	subi	r24, 0x81	; 129
    2a6e:	89 83       	std	Y+1, r24	; 0x01
    2a70:	06 c0       	rjmp	.+12     	; 0x2a7e <HLCD_voidMovCursor+0x42>
		}
		
		/**for second row*/
		else if (A_u8RowId == LCD_ROW2)
    2a72:	8a 81       	ldd	r24, Y+2	; 0x02
    2a74:	82 30       	cpi	r24, 0x02	; 2
    2a76:	19 f4       	brne	.+6      	; 0x2a7e <HLCD_voidMovCursor+0x42>
		{
			L_u8DDRAMAddress = SECOND_ROW_ADDRESS + A_u8ColId - 1 ;
    2a78:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7a:	81 54       	subi	r24, 0x41	; 65
    2a7c:	89 83       	std	Y+1, r24	; 0x01
		}
		
		/**set DDRAM address*/
		HLCD_voidSendCmd (L_u8DDRAMAddress) ;
    2a7e:	89 81       	ldd	r24, Y+1	; 0x01
    2a80:	0e 94 a4 0b 	call	0x1748	; 0x1748 <HLCD_voidSendCmd>
	}
	else
	{
		/** DO Nothing */
	}
}
    2a84:	0f 90       	pop	r0
    2a86:	0f 90       	pop	r0
    2a88:	0f 90       	pop	r0
    2a8a:	cf 91       	pop	r28
    2a8c:	df 91       	pop	r29
    2a8e:	08 95       	ret

00002a90 <HLCD_voidClrScreen>:

void HLCD_voidClrScreen (void)
{
    2a90:	df 93       	push	r29
    2a92:	cf 93       	push	r28
    2a94:	cd b7       	in	r28, 0x3d	; 61
    2a96:	de b7       	in	r29, 0x3e	; 62
	/**clear data and move cursor to first position*/
	HLCD_voidSendCmd (CMD_CLEAR) ;
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	0e 94 a4 0b 	call	0x1748	; 0x1748 <HLCD_voidSendCmd>
}
    2a9e:	cf 91       	pop	r28
    2aa0:	df 91       	pop	r29
    2aa2:	08 95       	ret

00002aa4 <HLCD_voidShiftDisplayRight>:

void HLCD_voidShiftDisplayRight(void)
{
    2aa4:	df 93       	push	r29
    2aa6:	cf 93       	push	r28
    2aa8:	cd b7       	in	r28, 0x3d	; 61
    2aaa:	de b7       	in	r29, 0x3e	; 62
	/**shift display to right*/
	HLCD_voidSendCmd (SHIFT_DISPLAY_TO_RIGHT) ;
    2aac:	8c e1       	ldi	r24, 0x1C	; 28
    2aae:	0e 94 a4 0b 	call	0x1748	; 0x1748 <HLCD_voidSendCmd>
}
    2ab2:	cf 91       	pop	r28
    2ab4:	df 91       	pop	r29
    2ab6:	08 95       	ret

00002ab8 <HLCD_voidShiftDisplayLeft>:

void HLCD_voidShiftDisplayLeft(void)
{
    2ab8:	df 93       	push	r29
    2aba:	cf 93       	push	r28
    2abc:	cd b7       	in	r28, 0x3d	; 61
    2abe:	de b7       	in	r29, 0x3e	; 62
	/**shift display to left*/
	HLCD_voidSendCmd (SHIFT_DISPLAY_TO_LEFT) ;
    2ac0:	88 e1       	ldi	r24, 0x18	; 24
    2ac2:	0e 94 a4 0b 	call	0x1748	; 0x1748 <HLCD_voidSendCmd>
}
    2ac6:	cf 91       	pop	r28
    2ac8:	df 91       	pop	r29
    2aca:	08 95       	ret

00002acc <HLCD_voidDispSpecialChar>:

void HLCD_voidDispSpecialChar(u8 * A_u8Array, u8 A_u8Block, u8 A_u8RowId, u8 A_u8ColId)
{
    2acc:	df 93       	push	r29
    2ace:	cf 93       	push	r28
    2ad0:	00 d0       	rcall	.+0      	; 0x2ad2 <HLCD_voidDispSpecialChar+0x6>
    2ad2:	00 d0       	rcall	.+0      	; 0x2ad4 <HLCD_voidDispSpecialChar+0x8>
    2ad4:	00 d0       	rcall	.+0      	; 0x2ad6 <HLCD_voidDispSpecialChar+0xa>
    2ad6:	cd b7       	in	r28, 0x3d	; 61
    2ad8:	de b7       	in	r29, 0x3e	; 62
    2ada:	9b 83       	std	Y+3, r25	; 0x03
    2adc:	8a 83       	std	Y+2, r24	; 0x02
    2ade:	6c 83       	std	Y+4, r22	; 0x04
    2ae0:	4d 83       	std	Y+5, r20	; 0x05
    2ae2:	2e 83       	std	Y+6, r18	; 0x06
	/**iterator for for loop*/
	u8 L_u8Iterator ;
	
	/**set CGRAM address (001x xxxx) */
	HLCD_voidSendCmd ((A_u8Block * NUMBER_OF_BLOCKS_OF_CGRAM) + SET_CGRAM_ADDRESS) ;
    2ae4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ae6:	88 2f       	mov	r24, r24
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	08 96       	adiw	r24, 0x08	; 8
    2aec:	88 0f       	add	r24, r24
    2aee:	99 1f       	adc	r25, r25
    2af0:	88 0f       	add	r24, r24
    2af2:	99 1f       	adc	r25, r25
    2af4:	88 0f       	add	r24, r24
    2af6:	99 1f       	adc	r25, r25
    2af8:	0e 94 a4 0b 	call	0x1748	; 0x1748 <HLCD_voidSendCmd>
	
	/** Send the array to be stored */
	for (L_u8Iterator =  FIRST_INDEX_OF_EACH_BLOCK ;
    2afc:	19 82       	std	Y+1, r1	; 0x01
    2afe:	0e c0       	rjmp	.+28     	; 0x2b1c <HLCD_voidDispSpecialChar+0x50>
	     L_u8Iterator <= END_INDEX_OF_EACH_BLOCK   ;
		 L_u8Iterator ++ )
		 {
			 HLCD_voidSendData (A_u8Array [L_u8Iterator]) ;
    2b00:	89 81       	ldd	r24, Y+1	; 0x01
    2b02:	28 2f       	mov	r18, r24
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	8a 81       	ldd	r24, Y+2	; 0x02
    2b08:	9b 81       	ldd	r25, Y+3	; 0x03
    2b0a:	fc 01       	movw	r30, r24
    2b0c:	e2 0f       	add	r30, r18
    2b0e:	f3 1f       	adc	r31, r19
    2b10:	80 81       	ld	r24, Z
    2b12:	0e 94 8b 11 	call	0x2316	; 0x2316 <HLCD_voidSendData>
	HLCD_voidSendCmd ((A_u8Block * NUMBER_OF_BLOCKS_OF_CGRAM) + SET_CGRAM_ADDRESS) ;
	
	/** Send the array to be stored */
	for (L_u8Iterator =  FIRST_INDEX_OF_EACH_BLOCK ;
	     L_u8Iterator <= END_INDEX_OF_EACH_BLOCK   ;
		 L_u8Iterator ++ )
    2b16:	89 81       	ldd	r24, Y+1	; 0x01
    2b18:	8f 5f       	subi	r24, 0xFF	; 255
    2b1a:	89 83       	std	Y+1, r24	; 0x01
	/**set CGRAM address (001x xxxx) */
	HLCD_voidSendCmd ((A_u8Block * NUMBER_OF_BLOCKS_OF_CGRAM) + SET_CGRAM_ADDRESS) ;
	
	/** Send the array to be stored */
	for (L_u8Iterator =  FIRST_INDEX_OF_EACH_BLOCK ;
	     L_u8Iterator <= END_INDEX_OF_EACH_BLOCK   ;
    2b1c:	89 81       	ldd	r24, Y+1	; 0x01
    2b1e:	88 30       	cpi	r24, 0x08	; 8
    2b20:	78 f3       	brcs	.-34     	; 0x2b00 <HLCD_voidDispSpecialChar+0x34>
		 {
			 HLCD_voidSendData (A_u8Array [L_u8Iterator]) ;
		 }
    
	/* Move the cursor to required position */
	HLCD_voidMovCursor (A_u8RowId , A_u8ColId) ;
    2b22:	8d 81       	ldd	r24, Y+5	; 0x05
    2b24:	6e 81       	ldd	r22, Y+6	; 0x06
    2b26:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <HLCD_voidMovCursor>
	
	/* Set the block to be displayed */
	HLCD_voidSendData (A_u8Block) ;
    2b2a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b2c:	0e 94 8b 11 	call	0x2316	; 0x2316 <HLCD_voidSendData>
}
    2b30:	26 96       	adiw	r28, 0x06	; 6
    2b32:	0f b6       	in	r0, 0x3f	; 63
    2b34:	f8 94       	cli
    2b36:	de bf       	out	0x3e, r29	; 62
    2b38:	0f be       	out	0x3f, r0	; 63
    2b3a:	cd bf       	out	0x3d, r28	; 61
    2b3c:	cf 91       	pop	r28
    2b3e:	df 91       	pop	r29
    2b40:	08 95       	ret

00002b42 <HKP_voidKpInt>:
#include "KP_int.h"
#define F_CPU 8000000UL
#include <util/delay.h>

void HKP_voidKpInt (void) 
{
    2b42:	df 93       	push	r29
    2b44:	cf 93       	push	r28
    2b46:	cd b7       	in	r28, 0x3d	; 61
    2b48:	de b7       	in	r29, 0x3e	; 62
	/* Set Columns as Output & High */
	#if   COL_START == DIO_PIN0 && ROW_START == DIO_PIN4
	      /** first four pins of port are output
	          second four pins of port are input */   
	      MDIO_voidSetPortDir (KP_PORT , LOW_NIBBLE_OUTPUT) ;
    2b4a:	81 e0       	ldi	r24, 0x01	; 1
    2b4c:	6f e0       	ldi	r22, 0x0F	; 15
    2b4e:	0e 94 89 08 	call	0x1112	; 0x1112 <MDIO_voidSetPortDir>
	
	/** Set Rows as Inputs & Pulled up */
	#if   ROW_START == DIO_PIN4 && COL_START == DIO_PIN0
	      /** first four pins of port are output
	          second four pins of port are input */
	      MDIO_voidSetPortDir (KP_PORT , LOW_NIBBLE_OUTPUT) ;
    2b52:	81 e0       	ldi	r24, 0x01	; 1
    2b54:	6f e0       	ldi	r22, 0x0F	; 15
    2b56:	0e 94 89 08 	call	0x1112	; 0x1112 <MDIO_voidSetPortDir>
		  
		  /** first four pins of port are high
	          and  active internal pullup for second four pins of port */
	      MDIO_voidSetPortVal (KP_PORT , ALL_PINS_ONE) ;
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	6f ef       	ldi	r22, 0xFF	; 255
    2b5e:	0e 94 47 08 	call	0x108e	; 0x108e <MDIO_voidSetPortVal>
		      and first four pins of port are high */
	      MDIO_voidSetPortVal (KP_PORT , ALL_PINS_ONE) ;
	#else
		#error "Select right connections of Column start and Row start"
	#endif
}
    2b62:	cf 91       	pop	r28
    2b64:	df 91       	pop	r29
    2b66:	08 95       	ret

00002b68 <HKP_u8GetPressedKey>:

u8 HKP_u8GetPressedKey (void)
{
    2b68:	df 93       	push	r29
    2b6a:	cf 93       	push	r28
    2b6c:	cd b7       	in	r28, 0x3d	; 61
    2b6e:	de b7       	in	r29, 0x3e	; 62
    2b70:	62 97       	sbiw	r28, 0x12	; 18
    2b72:	0f b6       	in	r0, 0x3f	; 63
    2b74:	f8 94       	cli
    2b76:	de bf       	out	0x3e, r29	; 62
    2b78:	0f be       	out	0x3f, r0	; 63
    2b7a:	cd bf       	out	0x3d, r28	; 61
	u8 L_u8Column ;
	u8 L_u8Row    ;
    u8 L_u8PinVal ;
    u8 L_u8PressedKey = NOT_PRESSED;
    2b7c:	8f ef       	ldi	r24, 0xFF	; 255
    2b7e:	8f 87       	std	Y+15, r24	; 0x0f
	
	/**external loop to active current column that be checked */
	for (L_u8Column = COL_START ; L_u8Column <= COL_END ; L_u8Column ++)
    2b80:	1a 8a       	std	Y+18, r1	; 0x12
    2b82:	ab c0       	rjmp	.+342    	; 0x2cda <HKP_u8GetPressedKey+0x172>
	{
		/**active current column by make it output low */
		MDIO_voidClrPinVal (KP_PORT , L_u8Column) ;
    2b84:	81 e0       	ldi	r24, 0x01	; 1
    2b86:	6a 89       	ldd	r22, Y+18	; 0x12
    2b88:	0e 94 0d 09 	call	0x121a	; 0x121a <MDIO_voidClrPinVal>
		
		/**internal loop to loop to each row 
		   and check pressed key that common current row and current column */
		for (L_u8Row = ROW_START ; L_u8Row <= ROW_END ; L_u8Row ++)
    2b8c:	84 e0       	ldi	r24, 0x04	; 4
    2b8e:	89 8b       	std	Y+17, r24	; 0x11
    2b90:	99 c0       	rjmp	.+306    	; 0x2cc4 <HKP_u8GetPressedKey+0x15c>
		{
			
			/** read value of key that common current row and current column */
			L_u8PinVal = MDIO_u8GetPinVal (KP_PORT , L_u8Row) ;
    2b92:	81 e0       	ldi	r24, 0x01	; 1
    2b94:	69 89       	ldd	r22, Y+17	; 0x11
    2b96:	0e 94 9c 07 	call	0xf38	; 0xf38 <MDIO_u8GetPinVal>
    2b9a:	88 8b       	std	Y+16, r24	; 0x10
			
			/** if key is pressed ====> (MDIO_u8GetPinVal == 0) */
			if (L_u8PinVal == PRESSED)
    2b9c:	88 89       	ldd	r24, Y+16	; 0x10
    2b9e:	88 23       	and	r24, r24
    2ba0:	09 f0       	breq	.+2      	; 0x2ba4 <HKP_u8GetPressedKey+0x3c>
    2ba2:	8d c0       	rjmp	.+282    	; 0x2cbe <HKP_u8GetPressedKey+0x156>
			{
				/**get the value of the pressed key*/
				L_u8PressedKey = G_u8SwitchVal [L_u8Column - COL_START][L_u8Row - ROW_START] ;
    2ba4:	8a 89       	ldd	r24, Y+18	; 0x12
    2ba6:	48 2f       	mov	r20, r24
    2ba8:	50 e0       	ldi	r21, 0x00	; 0
    2baa:	89 89       	ldd	r24, Y+17	; 0x11
    2bac:	88 2f       	mov	r24, r24
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	9c 01       	movw	r18, r24
    2bb2:	24 50       	subi	r18, 0x04	; 4
    2bb4:	30 40       	sbci	r19, 0x00	; 0
    2bb6:	ca 01       	movw	r24, r20
    2bb8:	88 0f       	add	r24, r24
    2bba:	99 1f       	adc	r25, r25
    2bbc:	88 0f       	add	r24, r24
    2bbe:	99 1f       	adc	r25, r25
    2bc0:	82 0f       	add	r24, r18
    2bc2:	93 1f       	adc	r25, r19
    2bc4:	fc 01       	movw	r30, r24
    2bc6:	ed 55       	subi	r30, 0x5D	; 93
    2bc8:	fe 4f       	sbci	r31, 0xFE	; 254
    2bca:	80 81       	ld	r24, Z
    2bcc:	8f 87       	std	Y+15, r24	; 0x0f
				
				/**wait untill leave the button */
				while (MDIO_u8GetPinVal (KP_PORT , L_u8Row) == PRESSED) ;
    2bce:	81 e0       	ldi	r24, 0x01	; 1
    2bd0:	69 89       	ldd	r22, Y+17	; 0x11
    2bd2:	0e 94 9c 07 	call	0xf38	; 0xf38 <MDIO_u8GetPinVal>
    2bd6:	88 23       	and	r24, r24
    2bd8:	d1 f3       	breq	.-12     	; 0x2bce <HKP_u8GetPressedKey+0x66>
    2bda:	80 e0       	ldi	r24, 0x00	; 0
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	a0 ea       	ldi	r26, 0xA0	; 160
    2be0:	b1 e4       	ldi	r27, 0x41	; 65
    2be2:	8b 87       	std	Y+11, r24	; 0x0b
    2be4:	9c 87       	std	Y+12, r25	; 0x0c
    2be6:	ad 87       	std	Y+13, r26	; 0x0d
    2be8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bea:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bec:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bee:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	4a ef       	ldi	r20, 0xFA	; 250
    2bf8:	54 e4       	ldi	r21, 0x44	; 68
    2bfa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	8f 83       	std	Y+7, r24	; 0x07
    2c04:	98 87       	std	Y+8, r25	; 0x08
    2c06:	a9 87       	std	Y+9, r26	; 0x09
    2c08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c0a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c0c:	78 85       	ldd	r23, Y+8	; 0x08
    2c0e:	89 85       	ldd	r24, Y+9	; 0x09
    2c10:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c12:	20 e0       	ldi	r18, 0x00	; 0
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	40 e8       	ldi	r20, 0x80	; 128
    2c18:	5f e3       	ldi	r21, 0x3F	; 63
    2c1a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2c1e:	88 23       	and	r24, r24
    2c20:	2c f4       	brge	.+10     	; 0x2c2c <HKP_u8GetPressedKey+0xc4>
		__ticks = 1;
    2c22:	81 e0       	ldi	r24, 0x01	; 1
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	9e 83       	std	Y+6, r25	; 0x06
    2c28:	8d 83       	std	Y+5, r24	; 0x05
    2c2a:	3f c0       	rjmp	.+126    	; 0x2caa <HKP_u8GetPressedKey+0x142>
	else if (__tmp > 65535)
    2c2c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c2e:	78 85       	ldd	r23, Y+8	; 0x08
    2c30:	89 85       	ldd	r24, Y+9	; 0x09
    2c32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c34:	20 e0       	ldi	r18, 0x00	; 0
    2c36:	3f ef       	ldi	r19, 0xFF	; 255
    2c38:	4f e7       	ldi	r20, 0x7F	; 127
    2c3a:	57 e4       	ldi	r21, 0x47	; 71
    2c3c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2c40:	18 16       	cp	r1, r24
    2c42:	4c f5       	brge	.+82     	; 0x2c96 <HKP_u8GetPressedKey+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c44:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c46:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c48:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c4c:	20 e0       	ldi	r18, 0x00	; 0
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	40 e2       	ldi	r20, 0x20	; 32
    2c52:	51 e4       	ldi	r21, 0x41	; 65
    2c54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c58:	dc 01       	movw	r26, r24
    2c5a:	cb 01       	movw	r24, r22
    2c5c:	bc 01       	movw	r22, r24
    2c5e:	cd 01       	movw	r24, r26
    2c60:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c64:	dc 01       	movw	r26, r24
    2c66:	cb 01       	movw	r24, r22
    2c68:	9e 83       	std	Y+6, r25	; 0x06
    2c6a:	8d 83       	std	Y+5, r24	; 0x05
    2c6c:	0f c0       	rjmp	.+30     	; 0x2c8c <HKP_u8GetPressedKey+0x124>
    2c6e:	88 ec       	ldi	r24, 0xC8	; 200
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	9c 83       	std	Y+4, r25	; 0x04
    2c74:	8b 83       	std	Y+3, r24	; 0x03
    2c76:	8b 81       	ldd	r24, Y+3	; 0x03
    2c78:	9c 81       	ldd	r25, Y+4	; 0x04
    2c7a:	01 97       	sbiw	r24, 0x01	; 1
    2c7c:	f1 f7       	brne	.-4      	; 0x2c7a <HKP_u8GetPressedKey+0x112>
    2c7e:	9c 83       	std	Y+4, r25	; 0x04
    2c80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c82:	8d 81       	ldd	r24, Y+5	; 0x05
    2c84:	9e 81       	ldd	r25, Y+6	; 0x06
    2c86:	01 97       	sbiw	r24, 0x01	; 1
    2c88:	9e 83       	std	Y+6, r25	; 0x06
    2c8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c90:	00 97       	sbiw	r24, 0x00	; 0
    2c92:	69 f7       	brne	.-38     	; 0x2c6e <HKP_u8GetPressedKey+0x106>
    2c94:	14 c0       	rjmp	.+40     	; 0x2cbe <HKP_u8GetPressedKey+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c96:	6f 81       	ldd	r22, Y+7	; 0x07
    2c98:	78 85       	ldd	r23, Y+8	; 0x08
    2c9a:	89 85       	ldd	r24, Y+9	; 0x09
    2c9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ca2:	dc 01       	movw	r26, r24
    2ca4:	cb 01       	movw	r24, r22
    2ca6:	9e 83       	std	Y+6, r25	; 0x06
    2ca8:	8d 83       	std	Y+5, r24	; 0x05
    2caa:	8d 81       	ldd	r24, Y+5	; 0x05
    2cac:	9e 81       	ldd	r25, Y+6	; 0x06
    2cae:	9a 83       	std	Y+2, r25	; 0x02
    2cb0:	89 83       	std	Y+1, r24	; 0x01
    2cb2:	89 81       	ldd	r24, Y+1	; 0x01
    2cb4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cb6:	01 97       	sbiw	r24, 0x01	; 1
    2cb8:	f1 f7       	brne	.-4      	; 0x2cb6 <HKP_u8GetPressedKey+0x14e>
    2cba:	9a 83       	std	Y+2, r25	; 0x02
    2cbc:	89 83       	std	Y+1, r24	; 0x01
		/**active current column by make it output low */
		MDIO_voidClrPinVal (KP_PORT , L_u8Column) ;
		
		/**internal loop to loop to each row 
		   and check pressed key that common current row and current column */
		for (L_u8Row = ROW_START ; L_u8Row <= ROW_END ; L_u8Row ++)
    2cbe:	89 89       	ldd	r24, Y+17	; 0x11
    2cc0:	8f 5f       	subi	r24, 0xFF	; 255
    2cc2:	89 8b       	std	Y+17, r24	; 0x11
    2cc4:	89 89       	ldd	r24, Y+17	; 0x11
    2cc6:	88 30       	cpi	r24, 0x08	; 8
    2cc8:	08 f4       	brcc	.+2      	; 0x2ccc <HKP_u8GetPressedKey+0x164>
    2cca:	63 cf       	rjmp	.-314    	; 0x2b92 <HKP_u8GetPressedKey+0x2a>
				_delay_ms (DELAY_FOR_DRBOUNCING) ;
			}
		}
		
		/**deactive current column by make it output low */
		MDIO_voidSetPinVal (KP_PORT , L_u8Column) ;
    2ccc:	81 e0       	ldi	r24, 0x01	; 1
    2cce:	6a 89       	ldd	r22, Y+18	; 0x12
    2cd0:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MDIO_voidSetPinVal>
	u8 L_u8Row    ;
    u8 L_u8PinVal ;
    u8 L_u8PressedKey = NOT_PRESSED;
	
	/**external loop to active current column that be checked */
	for (L_u8Column = COL_START ; L_u8Column <= COL_END ; L_u8Column ++)
    2cd4:	8a 89       	ldd	r24, Y+18	; 0x12
    2cd6:	8f 5f       	subi	r24, 0xFF	; 255
    2cd8:	8a 8b       	std	Y+18, r24	; 0x12
    2cda:	8a 89       	ldd	r24, Y+18	; 0x12
    2cdc:	84 30       	cpi	r24, 0x04	; 4
    2cde:	08 f4       	brcc	.+2      	; 0x2ce2 <HKP_u8GetPressedKey+0x17a>
    2ce0:	51 cf       	rjmp	.-350    	; 0x2b84 <HKP_u8GetPressedKey+0x1c>
		}
		
		/**deactive current column by make it output low */
		MDIO_voidSetPinVal (KP_PORT , L_u8Column) ;
	}
	return L_u8PressedKey ;
    2ce2:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2ce4:	62 96       	adiw	r28, 0x12	; 18
    2ce6:	0f b6       	in	r0, 0x3f	; 63
    2ce8:	f8 94       	cli
    2cea:	de bf       	out	0x3e, r29	; 62
    2cec:	0f be       	out	0x3f, r0	; 63
    2cee:	cd bf       	out	0x3d, r28	; 61
    2cf0:	cf 91       	pop	r28
    2cf2:	df 91       	pop	r29
    2cf4:	08 95       	ret

00002cf6 <main>:
#include "../HAL/LCD/LCD_int.h"
#include "../HAL/KEY_PAD/KP_int.h"
#include <util/delay.h>

int main(void)
{
    2cf6:	df 93       	push	r29
    2cf8:	cf 93       	push	r28
    2cfa:	cd b7       	in	r28, 0x3d	; 61
    2cfc:	de b7       	in	r29, 0x3e	; 62
    2cfe:	a7 97       	sbiw	r28, 0x27	; 39
    2d00:	0f b6       	in	r0, 0x3f	; 63
    2d02:	f8 94       	cli
    2d04:	de bf       	out	0x3e, r29	; 62
    2d06:	0f be       	out	0x3f, r0	; 63
    2d08:	cd bf       	out	0x3d, r28	; 61
	u8  L_u8Num        = 255 ;
    2d0a:	8f ef       	ldi	r24, 0xFF	; 255
    2d0c:	8f a3       	std	Y+39, r24	; 0x27
	u32 L_u32EnterPass = 0 ;
    2d0e:	1b a2       	std	Y+35, r1	; 0x23
    2d10:	1c a2       	std	Y+36, r1	; 0x24
    2d12:	1d a2       	std	Y+37, r1	; 0x25
    2d14:	1e a2       	std	Y+38, r1	; 0x26
	u32 L_u32CheckPass = 1234 ;
    2d16:	82 ed       	ldi	r24, 0xD2	; 210
    2d18:	94 e0       	ldi	r25, 0x04	; 4
    2d1a:	a0 e0       	ldi	r26, 0x00	; 0
    2d1c:	b0 e0       	ldi	r27, 0x00	; 0
    2d1e:	8f 8f       	std	Y+31, r24	; 0x1f
    2d20:	98 a3       	std	Y+32, r25	; 0x20
    2d22:	a9 a3       	std	Y+33, r26	; 0x21
    2d24:	ba a3       	std	Y+34, r27	; 0x22
	u8 col = 1 ;
    2d26:	81 e0       	ldi	r24, 0x01	; 1
    2d28:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 Max_enter = 0 ;
    2d2a:	1d 8e       	std	Y+29, r1	; 0x1d
	HLCD_voidInit() ;
    2d2c:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <HLCD_voidInit>
	HKP_voidKpInt() ;
    2d30:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <HKP_voidKpInt>
	HLCD_voidDispStr((u8*)"Enter Your pass:") ;
    2d34:	8e e6       	ldi	r24, 0x6E	; 110
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	0e 94 27 14 	call	0x284e	; 0x284e <HLCD_voidDispStr>
	HLCD_voidMovCursor(2,1) ;
    2d3c:	82 e0       	ldi	r24, 0x02	; 2
    2d3e:	61 e0       	ldi	r22, 0x01	; 1
    2d40:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <HLCD_voidMovCursor>
	while(1)
	{
		L_u8Num = HKP_u8GetPressedKey() ;
    2d44:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <HKP_u8GetPressedKey>
    2d48:	8f a3       	std	Y+39, r24	; 0x27
		if (L_u8Num >= '0' && L_u8Num <= '9' && Max_enter < 10)
    2d4a:	8f a1       	ldd	r24, Y+39	; 0x27
    2d4c:	80 33       	cpi	r24, 0x30	; 48
    2d4e:	b8 f1       	brcs	.+110    	; 0x2dbe <main+0xc8>
    2d50:	8f a1       	ldd	r24, Y+39	; 0x27
    2d52:	8a 33       	cpi	r24, 0x3A	; 58
    2d54:	a0 f5       	brcc	.+104    	; 0x2dbe <main+0xc8>
    2d56:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d58:	8a 30       	cpi	r24, 0x0A	; 10
    2d5a:	88 f5       	brcc	.+98     	; 0x2dbe <main+0xc8>
		{
			L_u32EnterPass *= 10 ;
    2d5c:	8b a1       	ldd	r24, Y+35	; 0x23
    2d5e:	9c a1       	ldd	r25, Y+36	; 0x24
    2d60:	ad a1       	ldd	r26, Y+37	; 0x25
    2d62:	be a1       	ldd	r27, Y+38	; 0x26
    2d64:	2a e0       	ldi	r18, 0x0A	; 10
    2d66:	30 e0       	ldi	r19, 0x00	; 0
    2d68:	40 e0       	ldi	r20, 0x00	; 0
    2d6a:	50 e0       	ldi	r21, 0x00	; 0
    2d6c:	bc 01       	movw	r22, r24
    2d6e:	cd 01       	movw	r24, r26
    2d70:	0e 94 3a 18 	call	0x3074	; 0x3074 <__mulsi3>
    2d74:	dc 01       	movw	r26, r24
    2d76:	cb 01       	movw	r24, r22
    2d78:	8b a3       	std	Y+35, r24	; 0x23
    2d7a:	9c a3       	std	Y+36, r25	; 0x24
    2d7c:	ad a3       	std	Y+37, r26	; 0x25
    2d7e:	be a3       	std	Y+38, r27	; 0x26
			L_u32EnterPass += L_u8Num - '0' ;
    2d80:	8f a1       	ldd	r24, Y+39	; 0x27
    2d82:	88 2f       	mov	r24, r24
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	c0 97       	sbiw	r24, 0x30	; 48
    2d88:	9c 01       	movw	r18, r24
    2d8a:	44 27       	eor	r20, r20
    2d8c:	37 fd       	sbrc	r19, 7
    2d8e:	40 95       	com	r20
    2d90:	54 2f       	mov	r21, r20
    2d92:	8b a1       	ldd	r24, Y+35	; 0x23
    2d94:	9c a1       	ldd	r25, Y+36	; 0x24
    2d96:	ad a1       	ldd	r26, Y+37	; 0x25
    2d98:	be a1       	ldd	r27, Y+38	; 0x26
    2d9a:	82 0f       	add	r24, r18
    2d9c:	93 1f       	adc	r25, r19
    2d9e:	a4 1f       	adc	r26, r20
    2da0:	b5 1f       	adc	r27, r21
    2da2:	8b a3       	std	Y+35, r24	; 0x23
    2da4:	9c a3       	std	Y+36, r25	; 0x24
    2da6:	ad a3       	std	Y+37, r26	; 0x25
    2da8:	be a3       	std	Y+38, r27	; 0x26
			HLCD_voidDispStr((u8*)"*") ;
    2daa:	8f e7       	ldi	r24, 0x7F	; 127
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	0e 94 27 14 	call	0x284e	; 0x284e <HLCD_voidDispStr>
			col ++ ;
    2db2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2db4:	8f 5f       	subi	r24, 0xFF	; 255
    2db6:	8e 8f       	std	Y+30, r24	; 0x1e
			Max_enter ++ ;
    2db8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2dba:	8f 5f       	subi	r24, 0xFF	; 255
    2dbc:	8d 8f       	std	Y+29, r24	; 0x1d
		}
		if (L_u8Num == '-')
    2dbe:	8f a1       	ldd	r24, Y+39	; 0x27
    2dc0:	8d 32       	cpi	r24, 0x2D	; 45
    2dc2:	21 f5       	brne	.+72     	; 0x2e0c <main+0x116>
		{
			col -- ;
    2dc4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2dc6:	81 50       	subi	r24, 0x01	; 1
    2dc8:	8e 8f       	std	Y+30, r24	; 0x1e
			Max_enter -- ;
    2dca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2dcc:	81 50       	subi	r24, 0x01	; 1
    2dce:	8d 8f       	std	Y+29, r24	; 0x1d
			L_u32EnterPass /= 10 ;
    2dd0:	8b a1       	ldd	r24, Y+35	; 0x23
    2dd2:	9c a1       	ldd	r25, Y+36	; 0x24
    2dd4:	ad a1       	ldd	r26, Y+37	; 0x25
    2dd6:	be a1       	ldd	r27, Y+38	; 0x26
    2dd8:	2a e0       	ldi	r18, 0x0A	; 10
    2dda:	30 e0       	ldi	r19, 0x00	; 0
    2ddc:	40 e0       	ldi	r20, 0x00	; 0
    2dde:	50 e0       	ldi	r21, 0x00	; 0
    2de0:	bc 01       	movw	r22, r24
    2de2:	cd 01       	movw	r24, r26
    2de4:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__udivmodsi4>
    2de8:	da 01       	movw	r26, r20
    2dea:	c9 01       	movw	r24, r18
    2dec:	8b a3       	std	Y+35, r24	; 0x23
    2dee:	9c a3       	std	Y+36, r25	; 0x24
    2df0:	ad a3       	std	Y+37, r26	; 0x25
    2df2:	be a3       	std	Y+38, r27	; 0x26
			HLCD_voidMovCursor(2,col) ;
    2df4:	82 e0       	ldi	r24, 0x02	; 2
    2df6:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2df8:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <HLCD_voidMovCursor>
			HLCD_voidDispStr((u8*)" ") ;
    2dfc:	81 e8       	ldi	r24, 0x81	; 129
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	0e 94 27 14 	call	0x284e	; 0x284e <HLCD_voidDispStr>
			HLCD_voidMovCursor(2,col) ;
    2e04:	82 e0       	ldi	r24, 0x02	; 2
    2e06:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2e08:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <HLCD_voidMovCursor>
		}
		if (L_u8Num == '=' && L_u32EnterPass == L_u32CheckPass)
    2e0c:	8f a1       	ldd	r24, Y+39	; 0x27
    2e0e:	8d 33       	cpi	r24, 0x3D	; 61
    2e10:	09 f0       	breq	.+2      	; 0x2e14 <main+0x11e>
    2e12:	92 c0       	rjmp	.+292    	; 0x2f38 <main+0x242>
    2e14:	2b a1       	ldd	r18, Y+35	; 0x23
    2e16:	3c a1       	ldd	r19, Y+36	; 0x24
    2e18:	4d a1       	ldd	r20, Y+37	; 0x25
    2e1a:	5e a1       	ldd	r21, Y+38	; 0x26
    2e1c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e1e:	98 a1       	ldd	r25, Y+32	; 0x20
    2e20:	a9 a1       	ldd	r26, Y+33	; 0x21
    2e22:	ba a1       	ldd	r27, Y+34	; 0x22
    2e24:	28 17       	cp	r18, r24
    2e26:	39 07       	cpc	r19, r25
    2e28:	4a 07       	cpc	r20, r26
    2e2a:	5b 07       	cpc	r21, r27
    2e2c:	09 f0       	breq	.+2      	; 0x2e30 <main+0x13a>
    2e2e:	84 c0       	rjmp	.+264    	; 0x2f38 <main+0x242>
		{
			HLCD_voidClrScreen() ;
    2e30:	0e 94 48 15 	call	0x2a90	; 0x2a90 <HLCD_voidClrScreen>
			HLCD_voidDispStr((u8*)"Correct pass") ;
    2e34:	83 e8       	ldi	r24, 0x83	; 131
    2e36:	90 e0       	ldi	r25, 0x00	; 0
    2e38:	0e 94 27 14 	call	0x284e	; 0x284e <HLCD_voidDispStr>
			L_u8Num        = 255 ;
    2e3c:	8f ef       	ldi	r24, 0xFF	; 255
    2e3e:	8f a3       	std	Y+39, r24	; 0x27
			L_u32EnterPass = 0 ;
    2e40:	1b a2       	std	Y+35, r1	; 0x23
    2e42:	1c a2       	std	Y+36, r1	; 0x24
    2e44:	1d a2       	std	Y+37, r1	; 0x25
    2e46:	1e a2       	std	Y+38, r1	; 0x26
			col = 1 ;
    2e48:	81 e0       	ldi	r24, 0x01	; 1
    2e4a:	8e 8f       	std	Y+30, r24	; 0x1e
			Max_enter = 0 ;
    2e4c:	1d 8e       	std	Y+29, r1	; 0x1d
    2e4e:	80 e0       	ldi	r24, 0x00	; 0
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	aa e7       	ldi	r26, 0x7A	; 122
    2e54:	b4 e4       	ldi	r27, 0x44	; 68
    2e56:	89 8f       	std	Y+25, r24	; 0x19
    2e58:	9a 8f       	std	Y+26, r25	; 0x1a
    2e5a:	ab 8f       	std	Y+27, r26	; 0x1b
    2e5c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e5e:	69 8d       	ldd	r22, Y+25	; 0x19
    2e60:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e62:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e64:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e66:	20 e0       	ldi	r18, 0x00	; 0
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	4a ef       	ldi	r20, 0xFA	; 250
    2e6c:	54 e4       	ldi	r21, 0x44	; 68
    2e6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e72:	dc 01       	movw	r26, r24
    2e74:	cb 01       	movw	r24, r22
    2e76:	8d 8b       	std	Y+21, r24	; 0x15
    2e78:	9e 8b       	std	Y+22, r25	; 0x16
    2e7a:	af 8b       	std	Y+23, r26	; 0x17
    2e7c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e7e:	6d 89       	ldd	r22, Y+21	; 0x15
    2e80:	7e 89       	ldd	r23, Y+22	; 0x16
    2e82:	8f 89       	ldd	r24, Y+23	; 0x17
    2e84:	98 8d       	ldd	r25, Y+24	; 0x18
    2e86:	20 e0       	ldi	r18, 0x00	; 0
    2e88:	30 e0       	ldi	r19, 0x00	; 0
    2e8a:	40 e8       	ldi	r20, 0x80	; 128
    2e8c:	5f e3       	ldi	r21, 0x3F	; 63
    2e8e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2e92:	88 23       	and	r24, r24
    2e94:	2c f4       	brge	.+10     	; 0x2ea0 <main+0x1aa>
		__ticks = 1;
    2e96:	81 e0       	ldi	r24, 0x01	; 1
    2e98:	90 e0       	ldi	r25, 0x00	; 0
    2e9a:	9c 8b       	std	Y+20, r25	; 0x14
    2e9c:	8b 8b       	std	Y+19, r24	; 0x13
    2e9e:	3f c0       	rjmp	.+126    	; 0x2f1e <main+0x228>
	else if (__tmp > 65535)
    2ea0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ea2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ea4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ea6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ea8:	20 e0       	ldi	r18, 0x00	; 0
    2eaa:	3f ef       	ldi	r19, 0xFF	; 255
    2eac:	4f e7       	ldi	r20, 0x7F	; 127
    2eae:	57 e4       	ldi	r21, 0x47	; 71
    2eb0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2eb4:	18 16       	cp	r1, r24
    2eb6:	4c f5       	brge	.+82     	; 0x2f0a <main+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eb8:	69 8d       	ldd	r22, Y+25	; 0x19
    2eba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ebc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ebe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ec0:	20 e0       	ldi	r18, 0x00	; 0
    2ec2:	30 e0       	ldi	r19, 0x00	; 0
    2ec4:	40 e2       	ldi	r20, 0x20	; 32
    2ec6:	51 e4       	ldi	r21, 0x41	; 65
    2ec8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ecc:	dc 01       	movw	r26, r24
    2ece:	cb 01       	movw	r24, r22
    2ed0:	bc 01       	movw	r22, r24
    2ed2:	cd 01       	movw	r24, r26
    2ed4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ed8:	dc 01       	movw	r26, r24
    2eda:	cb 01       	movw	r24, r22
    2edc:	9c 8b       	std	Y+20, r25	; 0x14
    2ede:	8b 8b       	std	Y+19, r24	; 0x13
    2ee0:	0f c0       	rjmp	.+30     	; 0x2f00 <main+0x20a>
    2ee2:	88 ec       	ldi	r24, 0xC8	; 200
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	9a 8b       	std	Y+18, r25	; 0x12
    2ee8:	89 8b       	std	Y+17, r24	; 0x11
    2eea:	89 89       	ldd	r24, Y+17	; 0x11
    2eec:	9a 89       	ldd	r25, Y+18	; 0x12
    2eee:	01 97       	sbiw	r24, 0x01	; 1
    2ef0:	f1 f7       	brne	.-4      	; 0x2eee <main+0x1f8>
    2ef2:	9a 8b       	std	Y+18, r25	; 0x12
    2ef4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ef6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ef8:	9c 89       	ldd	r25, Y+20	; 0x14
    2efa:	01 97       	sbiw	r24, 0x01	; 1
    2efc:	9c 8b       	std	Y+20, r25	; 0x14
    2efe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f00:	8b 89       	ldd	r24, Y+19	; 0x13
    2f02:	9c 89       	ldd	r25, Y+20	; 0x14
    2f04:	00 97       	sbiw	r24, 0x00	; 0
    2f06:	69 f7       	brne	.-38     	; 0x2ee2 <main+0x1ec>
    2f08:	14 c0       	rjmp	.+40     	; 0x2f32 <main+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f0a:	6d 89       	ldd	r22, Y+21	; 0x15
    2f0c:	7e 89       	ldd	r23, Y+22	; 0x16
    2f0e:	8f 89       	ldd	r24, Y+23	; 0x17
    2f10:	98 8d       	ldd	r25, Y+24	; 0x18
    2f12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f16:	dc 01       	movw	r26, r24
    2f18:	cb 01       	movw	r24, r22
    2f1a:	9c 8b       	std	Y+20, r25	; 0x14
    2f1c:	8b 8b       	std	Y+19, r24	; 0x13
    2f1e:	8b 89       	ldd	r24, Y+19	; 0x13
    2f20:	9c 89       	ldd	r25, Y+20	; 0x14
    2f22:	98 8b       	std	Y+16, r25	; 0x10
    2f24:	8f 87       	std	Y+15, r24	; 0x0f
    2f26:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f28:	98 89       	ldd	r25, Y+16	; 0x10
    2f2a:	01 97       	sbiw	r24, 0x01	; 1
    2f2c:	f1 f7       	brne	.-4      	; 0x2f2a <main+0x234>
    2f2e:	98 8b       	std	Y+16, r25	; 0x10
    2f30:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000) ;
			HLCD_voidClrScreen() ;
    2f32:	0e 94 48 15 	call	0x2a90	; 0x2a90 <HLCD_voidClrScreen>
    2f36:	06 cf       	rjmp	.-500    	; 0x2d44 <main+0x4e>
		}
		else if (L_u8Num == '=' && L_u32EnterPass != L_u32CheckPass)
    2f38:	8f a1       	ldd	r24, Y+39	; 0x27
    2f3a:	8d 33       	cpi	r24, 0x3D	; 61
    2f3c:	09 f0       	breq	.+2      	; 0x2f40 <main+0x24a>
    2f3e:	02 cf       	rjmp	.-508    	; 0x2d44 <main+0x4e>
    2f40:	2b a1       	ldd	r18, Y+35	; 0x23
    2f42:	3c a1       	ldd	r19, Y+36	; 0x24
    2f44:	4d a1       	ldd	r20, Y+37	; 0x25
    2f46:	5e a1       	ldd	r21, Y+38	; 0x26
    2f48:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f4a:	98 a1       	ldd	r25, Y+32	; 0x20
    2f4c:	a9 a1       	ldd	r26, Y+33	; 0x21
    2f4e:	ba a1       	ldd	r27, Y+34	; 0x22
    2f50:	28 17       	cp	r18, r24
    2f52:	39 07       	cpc	r19, r25
    2f54:	4a 07       	cpc	r20, r26
    2f56:	5b 07       	cpc	r21, r27
    2f58:	09 f4       	brne	.+2      	; 0x2f5c <main+0x266>
    2f5a:	f4 ce       	rjmp	.-536    	; 0x2d44 <main+0x4e>
		{
			HLCD_voidClrScreen() ;
    2f5c:	0e 94 48 15 	call	0x2a90	; 0x2a90 <HLCD_voidClrScreen>
			HLCD_voidDispStr((u8*)"Wrong pass") ;
    2f60:	80 e9       	ldi	r24, 0x90	; 144
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	0e 94 27 14 	call	0x284e	; 0x284e <HLCD_voidDispStr>
			L_u8Num        = 255 ;
    2f68:	8f ef       	ldi	r24, 0xFF	; 255
    2f6a:	8f a3       	std	Y+39, r24	; 0x27
			L_u32EnterPass = 0 ;
    2f6c:	1b a2       	std	Y+35, r1	; 0x23
    2f6e:	1c a2       	std	Y+36, r1	; 0x24
    2f70:	1d a2       	std	Y+37, r1	; 0x25
    2f72:	1e a2       	std	Y+38, r1	; 0x26
			col = 1 ;
    2f74:	81 e0       	ldi	r24, 0x01	; 1
    2f76:	8e 8f       	std	Y+30, r24	; 0x1e
			Max_enter = 0 ;
    2f78:	1d 8e       	std	Y+29, r1	; 0x1d
    2f7a:	80 e0       	ldi	r24, 0x00	; 0
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	aa e7       	ldi	r26, 0x7A	; 122
    2f80:	b4 e4       	ldi	r27, 0x44	; 68
    2f82:	8b 87       	std	Y+11, r24	; 0x0b
    2f84:	9c 87       	std	Y+12, r25	; 0x0c
    2f86:	ad 87       	std	Y+13, r26	; 0x0d
    2f88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f90:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f92:	20 e0       	ldi	r18, 0x00	; 0
    2f94:	30 e0       	ldi	r19, 0x00	; 0
    2f96:	4a ef       	ldi	r20, 0xFA	; 250
    2f98:	54 e4       	ldi	r21, 0x44	; 68
    2f9a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f9e:	dc 01       	movw	r26, r24
    2fa0:	cb 01       	movw	r24, r22
    2fa2:	8f 83       	std	Y+7, r24	; 0x07
    2fa4:	98 87       	std	Y+8, r25	; 0x08
    2fa6:	a9 87       	std	Y+9, r26	; 0x09
    2fa8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2faa:	6f 81       	ldd	r22, Y+7	; 0x07
    2fac:	78 85       	ldd	r23, Y+8	; 0x08
    2fae:	89 85       	ldd	r24, Y+9	; 0x09
    2fb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fb2:	20 e0       	ldi	r18, 0x00	; 0
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	40 e8       	ldi	r20, 0x80	; 128
    2fb8:	5f e3       	ldi	r21, 0x3F	; 63
    2fba:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2fbe:	88 23       	and	r24, r24
    2fc0:	2c f4       	brge	.+10     	; 0x2fcc <main+0x2d6>
		__ticks = 1;
    2fc2:	81 e0       	ldi	r24, 0x01	; 1
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	9e 83       	std	Y+6, r25	; 0x06
    2fc8:	8d 83       	std	Y+5, r24	; 0x05
    2fca:	3f c0       	rjmp	.+126    	; 0x304a <main+0x354>
	else if (__tmp > 65535)
    2fcc:	6f 81       	ldd	r22, Y+7	; 0x07
    2fce:	78 85       	ldd	r23, Y+8	; 0x08
    2fd0:	89 85       	ldd	r24, Y+9	; 0x09
    2fd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fd4:	20 e0       	ldi	r18, 0x00	; 0
    2fd6:	3f ef       	ldi	r19, 0xFF	; 255
    2fd8:	4f e7       	ldi	r20, 0x7F	; 127
    2fda:	57 e4       	ldi	r21, 0x47	; 71
    2fdc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2fe0:	18 16       	cp	r1, r24
    2fe2:	4c f5       	brge	.+82     	; 0x3036 <main+0x340>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fe4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fe6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fe8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fea:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fec:	20 e0       	ldi	r18, 0x00	; 0
    2fee:	30 e0       	ldi	r19, 0x00	; 0
    2ff0:	40 e2       	ldi	r20, 0x20	; 32
    2ff2:	51 e4       	ldi	r21, 0x41	; 65
    2ff4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ff8:	dc 01       	movw	r26, r24
    2ffa:	cb 01       	movw	r24, r22
    2ffc:	bc 01       	movw	r22, r24
    2ffe:	cd 01       	movw	r24, r26
    3000:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3004:	dc 01       	movw	r26, r24
    3006:	cb 01       	movw	r24, r22
    3008:	9e 83       	std	Y+6, r25	; 0x06
    300a:	8d 83       	std	Y+5, r24	; 0x05
    300c:	0f c0       	rjmp	.+30     	; 0x302c <main+0x336>
    300e:	88 ec       	ldi	r24, 0xC8	; 200
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	9c 83       	std	Y+4, r25	; 0x04
    3014:	8b 83       	std	Y+3, r24	; 0x03
    3016:	8b 81       	ldd	r24, Y+3	; 0x03
    3018:	9c 81       	ldd	r25, Y+4	; 0x04
    301a:	01 97       	sbiw	r24, 0x01	; 1
    301c:	f1 f7       	brne	.-4      	; 0x301a <main+0x324>
    301e:	9c 83       	std	Y+4, r25	; 0x04
    3020:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3022:	8d 81       	ldd	r24, Y+5	; 0x05
    3024:	9e 81       	ldd	r25, Y+6	; 0x06
    3026:	01 97       	sbiw	r24, 0x01	; 1
    3028:	9e 83       	std	Y+6, r25	; 0x06
    302a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    302c:	8d 81       	ldd	r24, Y+5	; 0x05
    302e:	9e 81       	ldd	r25, Y+6	; 0x06
    3030:	00 97       	sbiw	r24, 0x00	; 0
    3032:	69 f7       	brne	.-38     	; 0x300e <main+0x318>
    3034:	14 c0       	rjmp	.+40     	; 0x305e <main+0x368>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3036:	6f 81       	ldd	r22, Y+7	; 0x07
    3038:	78 85       	ldd	r23, Y+8	; 0x08
    303a:	89 85       	ldd	r24, Y+9	; 0x09
    303c:	9a 85       	ldd	r25, Y+10	; 0x0a
    303e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3042:	dc 01       	movw	r26, r24
    3044:	cb 01       	movw	r24, r22
    3046:	9e 83       	std	Y+6, r25	; 0x06
    3048:	8d 83       	std	Y+5, r24	; 0x05
    304a:	8d 81       	ldd	r24, Y+5	; 0x05
    304c:	9e 81       	ldd	r25, Y+6	; 0x06
    304e:	9a 83       	std	Y+2, r25	; 0x02
    3050:	89 83       	std	Y+1, r24	; 0x01
    3052:	89 81       	ldd	r24, Y+1	; 0x01
    3054:	9a 81       	ldd	r25, Y+2	; 0x02
    3056:	01 97       	sbiw	r24, 0x01	; 1
    3058:	f1 f7       	brne	.-4      	; 0x3056 <main+0x360>
    305a:	9a 83       	std	Y+2, r25	; 0x02
    305c:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000) ;
			HLCD_voidClrScreen() ;
    305e:	0e 94 48 15 	call	0x2a90	; 0x2a90 <HLCD_voidClrScreen>
			HLCD_voidDispStr((u8*)"Enter Your pass:") ;
    3062:	8e e6       	ldi	r24, 0x6E	; 110
    3064:	90 e0       	ldi	r25, 0x00	; 0
    3066:	0e 94 27 14 	call	0x284e	; 0x284e <HLCD_voidDispStr>
			HLCD_voidMovCursor(2,1) ;
    306a:	82 e0       	ldi	r24, 0x02	; 2
    306c:	61 e0       	ldi	r22, 0x01	; 1
    306e:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <HLCD_voidMovCursor>
    3072:	68 ce       	rjmp	.-816    	; 0x2d44 <main+0x4e>

00003074 <__mulsi3>:
    3074:	62 9f       	mul	r22, r18
    3076:	d0 01       	movw	r26, r0
    3078:	73 9f       	mul	r23, r19
    307a:	f0 01       	movw	r30, r0
    307c:	82 9f       	mul	r24, r18
    307e:	e0 0d       	add	r30, r0
    3080:	f1 1d       	adc	r31, r1
    3082:	64 9f       	mul	r22, r20
    3084:	e0 0d       	add	r30, r0
    3086:	f1 1d       	adc	r31, r1
    3088:	92 9f       	mul	r25, r18
    308a:	f0 0d       	add	r31, r0
    308c:	83 9f       	mul	r24, r19
    308e:	f0 0d       	add	r31, r0
    3090:	74 9f       	mul	r23, r20
    3092:	f0 0d       	add	r31, r0
    3094:	65 9f       	mul	r22, r21
    3096:	f0 0d       	add	r31, r0
    3098:	99 27       	eor	r25, r25
    309a:	72 9f       	mul	r23, r18
    309c:	b0 0d       	add	r27, r0
    309e:	e1 1d       	adc	r30, r1
    30a0:	f9 1f       	adc	r31, r25
    30a2:	63 9f       	mul	r22, r19
    30a4:	b0 0d       	add	r27, r0
    30a6:	e1 1d       	adc	r30, r1
    30a8:	f9 1f       	adc	r31, r25
    30aa:	bd 01       	movw	r22, r26
    30ac:	cf 01       	movw	r24, r30
    30ae:	11 24       	eor	r1, r1
    30b0:	08 95       	ret

000030b2 <__udivmodsi4>:
    30b2:	a1 e2       	ldi	r26, 0x21	; 33
    30b4:	1a 2e       	mov	r1, r26
    30b6:	aa 1b       	sub	r26, r26
    30b8:	bb 1b       	sub	r27, r27
    30ba:	fd 01       	movw	r30, r26
    30bc:	0d c0       	rjmp	.+26     	; 0x30d8 <__udivmodsi4_ep>

000030be <__udivmodsi4_loop>:
    30be:	aa 1f       	adc	r26, r26
    30c0:	bb 1f       	adc	r27, r27
    30c2:	ee 1f       	adc	r30, r30
    30c4:	ff 1f       	adc	r31, r31
    30c6:	a2 17       	cp	r26, r18
    30c8:	b3 07       	cpc	r27, r19
    30ca:	e4 07       	cpc	r30, r20
    30cc:	f5 07       	cpc	r31, r21
    30ce:	20 f0       	brcs	.+8      	; 0x30d8 <__udivmodsi4_ep>
    30d0:	a2 1b       	sub	r26, r18
    30d2:	b3 0b       	sbc	r27, r19
    30d4:	e4 0b       	sbc	r30, r20
    30d6:	f5 0b       	sbc	r31, r21

000030d8 <__udivmodsi4_ep>:
    30d8:	66 1f       	adc	r22, r22
    30da:	77 1f       	adc	r23, r23
    30dc:	88 1f       	adc	r24, r24
    30de:	99 1f       	adc	r25, r25
    30e0:	1a 94       	dec	r1
    30e2:	69 f7       	brne	.-38     	; 0x30be <__udivmodsi4_loop>
    30e4:	60 95       	com	r22
    30e6:	70 95       	com	r23
    30e8:	80 95       	com	r24
    30ea:	90 95       	com	r25
    30ec:	9b 01       	movw	r18, r22
    30ee:	ac 01       	movw	r20, r24
    30f0:	bd 01       	movw	r22, r26
    30f2:	cf 01       	movw	r24, r30
    30f4:	08 95       	ret

000030f6 <__prologue_saves__>:
    30f6:	2f 92       	push	r2
    30f8:	3f 92       	push	r3
    30fa:	4f 92       	push	r4
    30fc:	5f 92       	push	r5
    30fe:	6f 92       	push	r6
    3100:	7f 92       	push	r7
    3102:	8f 92       	push	r8
    3104:	9f 92       	push	r9
    3106:	af 92       	push	r10
    3108:	bf 92       	push	r11
    310a:	cf 92       	push	r12
    310c:	df 92       	push	r13
    310e:	ef 92       	push	r14
    3110:	ff 92       	push	r15
    3112:	0f 93       	push	r16
    3114:	1f 93       	push	r17
    3116:	cf 93       	push	r28
    3118:	df 93       	push	r29
    311a:	cd b7       	in	r28, 0x3d	; 61
    311c:	de b7       	in	r29, 0x3e	; 62
    311e:	ca 1b       	sub	r28, r26
    3120:	db 0b       	sbc	r29, r27
    3122:	0f b6       	in	r0, 0x3f	; 63
    3124:	f8 94       	cli
    3126:	de bf       	out	0x3e, r29	; 62
    3128:	0f be       	out	0x3f, r0	; 63
    312a:	cd bf       	out	0x3d, r28	; 61
    312c:	09 94       	ijmp

0000312e <__epilogue_restores__>:
    312e:	2a 88       	ldd	r2, Y+18	; 0x12
    3130:	39 88       	ldd	r3, Y+17	; 0x11
    3132:	48 88       	ldd	r4, Y+16	; 0x10
    3134:	5f 84       	ldd	r5, Y+15	; 0x0f
    3136:	6e 84       	ldd	r6, Y+14	; 0x0e
    3138:	7d 84       	ldd	r7, Y+13	; 0x0d
    313a:	8c 84       	ldd	r8, Y+12	; 0x0c
    313c:	9b 84       	ldd	r9, Y+11	; 0x0b
    313e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3140:	b9 84       	ldd	r11, Y+9	; 0x09
    3142:	c8 84       	ldd	r12, Y+8	; 0x08
    3144:	df 80       	ldd	r13, Y+7	; 0x07
    3146:	ee 80       	ldd	r14, Y+6	; 0x06
    3148:	fd 80       	ldd	r15, Y+5	; 0x05
    314a:	0c 81       	ldd	r16, Y+4	; 0x04
    314c:	1b 81       	ldd	r17, Y+3	; 0x03
    314e:	aa 81       	ldd	r26, Y+2	; 0x02
    3150:	b9 81       	ldd	r27, Y+1	; 0x01
    3152:	ce 0f       	add	r28, r30
    3154:	d1 1d       	adc	r29, r1
    3156:	0f b6       	in	r0, 0x3f	; 63
    3158:	f8 94       	cli
    315a:	de bf       	out	0x3e, r29	; 62
    315c:	0f be       	out	0x3f, r0	; 63
    315e:	cd bf       	out	0x3d, r28	; 61
    3160:	ed 01       	movw	r28, r26
    3162:	08 95       	ret

00003164 <ltoa>:
    3164:	fa 01       	movw	r30, r20
    3166:	cf 93       	push	r28
    3168:	ff 93       	push	r31
    316a:	ef 93       	push	r30
    316c:	22 30       	cpi	r18, 0x02	; 2
    316e:	44 f1       	brlt	.+80     	; 0x31c0 <ltoa+0x5c>
    3170:	25 32       	cpi	r18, 0x25	; 37
    3172:	34 f5       	brge	.+76     	; 0x31c0 <ltoa+0x5c>
    3174:	c2 2f       	mov	r28, r18
    3176:	e8 94       	clt
    3178:	ca 30       	cpi	r28, 0x0A	; 10
    317a:	49 f4       	brne	.+18     	; 0x318e <ltoa+0x2a>
    317c:	97 fb       	bst	r25, 7
    317e:	3e f4       	brtc	.+14     	; 0x318e <ltoa+0x2a>
    3180:	90 95       	com	r25
    3182:	80 95       	com	r24
    3184:	70 95       	com	r23
    3186:	61 95       	neg	r22
    3188:	7f 4f       	sbci	r23, 0xFF	; 255
    318a:	8f 4f       	sbci	r24, 0xFF	; 255
    318c:	9f 4f       	sbci	r25, 0xFF	; 255
    318e:	2c 2f       	mov	r18, r28
    3190:	33 27       	eor	r19, r19
    3192:	44 27       	eor	r20, r20
    3194:	55 27       	eor	r21, r21
    3196:	ff 93       	push	r31
    3198:	ef 93       	push	r30
    319a:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__udivmodsi4>
    319e:	ef 91       	pop	r30
    31a0:	ff 91       	pop	r31
    31a2:	60 5d       	subi	r22, 0xD0	; 208
    31a4:	6a 33       	cpi	r22, 0x3A	; 58
    31a6:	0c f0       	brlt	.+2      	; 0x31aa <ltoa+0x46>
    31a8:	69 5d       	subi	r22, 0xD9	; 217
    31aa:	61 93       	st	Z+, r22
    31ac:	b9 01       	movw	r22, r18
    31ae:	ca 01       	movw	r24, r20
    31b0:	60 50       	subi	r22, 0x00	; 0
    31b2:	70 40       	sbci	r23, 0x00	; 0
    31b4:	80 40       	sbci	r24, 0x00	; 0
    31b6:	90 40       	sbci	r25, 0x00	; 0
    31b8:	51 f7       	brne	.-44     	; 0x318e <ltoa+0x2a>
    31ba:	16 f4       	brtc	.+4      	; 0x31c0 <ltoa+0x5c>
    31bc:	cd e2       	ldi	r28, 0x2D	; 45
    31be:	c1 93       	st	Z+, r28
    31c0:	10 82       	st	Z, r1
    31c2:	8f 91       	pop	r24
    31c4:	9f 91       	pop	r25
    31c6:	cf 91       	pop	r28
    31c8:	0c 94 e6 18 	jmp	0x31cc	; 0x31cc <strrev>

000031cc <strrev>:
    31cc:	dc 01       	movw	r26, r24
    31ce:	fc 01       	movw	r30, r24
    31d0:	67 2f       	mov	r22, r23
    31d2:	71 91       	ld	r23, Z+
    31d4:	77 23       	and	r23, r23
    31d6:	e1 f7       	brne	.-8      	; 0x31d0 <strrev+0x4>
    31d8:	32 97       	sbiw	r30, 0x02	; 2
    31da:	04 c0       	rjmp	.+8      	; 0x31e4 <strrev+0x18>
    31dc:	7c 91       	ld	r23, X
    31de:	6d 93       	st	X+, r22
    31e0:	70 83       	st	Z, r23
    31e2:	62 91       	ld	r22, -Z
    31e4:	ae 17       	cp	r26, r30
    31e6:	bf 07       	cpc	r27, r31
    31e8:	c8 f3       	brcs	.-14     	; 0x31dc <strrev+0x10>
    31ea:	08 95       	ret

000031ec <_exit>:
    31ec:	f8 94       	cli

000031ee <__stop_program>:
    31ee:	ff cf       	rjmp	.-2      	; 0x31ee <__stop_program>
